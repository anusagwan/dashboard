{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/Finalize/coldef.js\";\nimport React from 'react';\nimport { toPercentage, toPercentageWithDecimalDraft, toDollarWithlDraft, toUnitDraft, toFixedToTwoDraft } from '../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default (function () {\n  var colDef = [{\n    Header: 'MD Plan',\n    accessor: 'md_plan',\n    disableGroupBy: true,\n    align: 'left',\n    showFilter: true,\n    enableRowSpan: true\n  }, {\n    Header: 'Scenario',\n    accessor: 'scenario',\n    showFilter: true,\n    disableGroupBy: true,\n    enableRowSpan: true,\n    Cell: function Cell(_ref) {\n      var row = _ref.row;\n      var check = row.original.checked_for_approval;\n      return !check ? null : check ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, row.original.scenario) : '-';\n    }\n  }, {\n    // Build our expander column\n    id: 'expander',\n    // Make sure it has an ID\n    // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n    //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n    // ),\n    Header: 'Date Range',\n    width: 15,\n    Cell: function Cell(_ref2) {\n      var row = _ref2.row;\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      return row.canExpand && row.original.checked_for_approval ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), moment(row.original.start_date).format('YYYY/MM/DD'), \" -\", ' ', moment(row.original.end_date).format('YYYY/MM/DD'), \"\\xA0\\xA0\\xA0\", row.isExpanded ? React.createElement(\"i\", {\n        class: \"fa fa-angle-down expanded-icon-size color-blue\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right expanded-icon-size color-blue\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })) : null;\n    }\n  }, {\n    Header: 'Time Period',\n    accessor: 'week_num',\n    disableGroupBy: false,\n    isGroupBy: false,\n    Cell: function Cell(_ref3) {\n      var row = _ref3.row;\n      var check = row.original.checked_for_approval;\n      return !check ? null : check ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, row.original.week_num) : '-';\n    },\n    Aggregated: function Aggregated(_ref4) {\n      var value = _ref4.value,\n          row = _ref4.row;\n      var check = row.original.checked_for_approval;\n      return !check ? null : check ? \"weeks (\".concat(row.subRows.length, \")\") : '-';\n    }\n  }, {\n    Header: 'Sell through %',\n    accessor: 'sell_through',\n    disableGroupBy: true,\n    // Cell: ({ row }) => {\n    //   console.log(row, 'czseferuuuuuuuwweeee--');\n    //   return row.original.checked_for_approval ? <span>{row.original.sell_through}</span> : null;\n    // },\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \" \", toPercentageWithDecimalDraft(props), \" \");\n    },\n    Aggregated: function Aggregated(_ref5) {\n      var row = _ref5.row;\n      var val = row.original.overall_sell_through;\n      return row.original.checked_for_approval ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, val ? parseFloat(val).toFixed(2) : '-') : null;\n    }\n  }, {\n    Header: 'Markdown %',\n    accessor: 'markdown_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'average',\n    Aggregated: function Aggregated(_ref6) {\n      var row = _ref6.row;\n      var check = row.original.checked_for_approval;\n      return !check ? null : check ? Math.round(row.original.overall_markdown_perc) : '-';\n    }\n  }];\n  return colDef;\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/Finalize/coldef.js"],"names":["React","toPercentage","toPercentageWithDecimalDraft","toDollarWithlDraft","toUnitDraft","toFixedToTwoDraft","_","moment","colDef","Header","accessor","disableGroupBy","align","showFilter","enableRowSpan","Cell","row","check","original","checked_for_approval","scenario","id","width","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","start_date","format","end_date","isExpanded","isGroupBy","week_num","Aggregated","value","subRows","length","props","val","overall_sell_through","parseFloat","toFixed","aggregate","Math","round","overall_markdown_perc"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  toPercentage,\n  toPercentageWithDecimalDraft,\n  toDollarWithlDraft,\n  toUnitDraft,\n  toFixedToTwoDraft,\n} from '../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default () => {\n  const colDef = [\n    {\n      Header: 'MD Plan',\n      accessor: 'md_plan',\n      disableGroupBy: true,\n      align: 'left',\n      showFilter: true,\n      enableRowSpan: true,\n    },\n    {\n      Header: 'Scenario',\n      accessor: 'scenario',\n      showFilter: true,\n      disableGroupBy: true,\n      enableRowSpan: true,\n      Cell: ({ row }) => {\n        let check = row.original.checked_for_approval;\n        return !check ? null : check ? <span>{row.original.scenario}</span> : '-';\n      },\n    },\n    {\n      // Build our expander column\n      id: 'expander', // Make sure it has an ID\n      // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n      //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n      // ),\n      Header: 'Date Range',\n      width: 15,\n      Cell: ({ row }) => {\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n        // to build the toggle for expanding a row\n        return row.canExpand && row.original.checked_for_approval ? (\n          <span\n            {...row.getToggleRowExpandedProps({\n              style: {\n                // We can even use the row.depth property\n                // and paddingLeft to indicate the depth\n                // of the row\n                paddingLeft: `${row.depth * 2}rem`,\n              },\n            })}>\n            {moment(row.original.start_date).format('YYYY/MM/DD')} -{' '}\n            {moment(row.original.end_date).format('YYYY/MM/DD')}&nbsp;&nbsp;&nbsp;\n            {row.isExpanded ? (\n              <i class=\"fa fa-angle-down expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n            ) : (\n              <i class=\"fa fa-angle-right expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n            )}\n          </span>\n        ) : null;\n      },\n    },\n    {\n      Header: 'Time Period',\n      accessor: 'week_num',\n      disableGroupBy: false,\n      isGroupBy: false,\n      Cell: ({ row }) => {\n        let check = row.original.checked_for_approval;\n        return !check ? null : check ? <span>{row.original.week_num}</span> : '-';\n      },\n      Aggregated: ({ value, row }) => {\n        let check = row.original.checked_for_approval;\n        return !check ? null : check ? `weeks (${row.subRows.length})` : '-';\n      },\n    },\n    {\n      Header: 'Sell through %',\n      accessor: 'sell_through',\n      disableGroupBy: true,\n      // Cell: ({ row }) => {\n      //   console.log(row, 'czseferuuuuuuuwweeee--');\n      //   return row.original.checked_for_approval ? <span>{row.original.sell_through}</span> : null;\n      // },\n      Cell: (props) => <div> {toPercentageWithDecimalDraft(props)} </div>,\n      Aggregated: ({ row }) => {\n        let val = row.original.overall_sell_through;\n        return row.original.checked_for_approval ? (\n          <span>{val ? parseFloat(val).toFixed(2) : '-'}</span>\n        ) : null;\n      },\n    },\n    {\n      Header: 'Markdown %',\n      accessor: 'markdown_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'average',\n      Aggregated: ({ row }) => {\n        let check = row.original.checked_for_approval;\n        return !check ? null : check ? Math.round(row.original.overall_markdown_perc) : '-';\n      },\n    },\n    // {\n    //   Header: 'Margin %',\n    //   accessor: 'margin_perc',\n    //   disableGroupBy: true,\n    //   width: 70,\n    //   Cell: (props) => <div> {toPercentageWithDecimalDraft(props)} </div>,\n    //   Aggregated: ({ row }) => {\n    //     console.log('CSfdwepppppp', row);\n\n    //     let val = row.original.overall_margin;\n    //     let check = row.original.checked_for_approval;\n    //     return check ? <span>{val ? Number(val).toFixed(2) : '-'}</span> : null;\n    //   },\n    // },\n    // {\n    //   Header: 'AUM',\n    //   accessor: 'aum',\n    //   disableGroupBy: true,\n    //   Cell: (props) => <div>{toFixedToTwoDraft(props)}</div>,\n    //   Aggregated: (row) => {\n    //     let val = row.row.original.overall_aum;\n    //     return <span>{val ? Number(val).toFixed(2) : '-'}</span>;\n    //   },\n    // },\n    // {\n    //   Header: 'AUR',\n    //   accessor: 'aur',\n    //   disableGroupBy: true,\n    //   Cell: (props) => <div>{toFixedToTwoDraft(props)}</div>,\n    //   Aggregated: (row) => {\n    //     let val = row.row.original.overall_aur;\n    //     return <span>{val ? Number(val).toFixed(2) : '-'}</span>;\n    //   },\n    // },\n    // {\n    //   Header: 'Planned Units',\n    //   accessor: 'plannedUnits',\n    //   Cell: (props) => <div>{toUnitDraft(props)}</div>,\n\n    //   disableGroupBy: true,\n    //   Aggregated: (row) => {\n    //     let val = row.row.original.overall_planned_units;\n    //     return <span>{val ? Number(val).toLocaleString('en') : '-'}</span>;\n    //   },\n    // },\n    // {\n    //   Header: 'Actual Units',\n    //   accessor: 'actualUnits',\n    //   Cell: (props) => <div>{toUnitDraft(props)}</div>,\n    //   disableGroupBy: true,\n    //   Aggregated: (row) => {\n    //     let val = row.row.original.overall_units;\n    //     return <span>{val ? Number(val).toLocaleString('en') : '-'}</span>;\n    //   },\n    // },\n    // {\n    //   Header: 'Revenue $',\n    //   accessor: 'revenue$',\n    //   Aggregated: (row) => {\n    //     let val = row.row.original.overall_revenue$;\n    //     console.log(val.toFixed(2), 'fixed');\n    //     console.log(parseFloat(val).toFixed(2), 'valalala');\n    //     console.log(Number(val).toFixed(2), 'nu,ber');\n    //     return <span>{val ? parseInt(val).toLocaleString('en') : '-'}</span>;\n    //   },\n    //   disableGroupBy: true,\n    //   Cell: (props) => <div> {toDollarWithlDraft(props)} </div>,\n    // },\n  ];\n  return colDef;\n};\n"]},"metadata":{},"sourceType":"module"}