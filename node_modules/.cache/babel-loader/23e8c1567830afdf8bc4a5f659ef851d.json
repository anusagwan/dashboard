{"ast":null,"code":"import _classCallCheck from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/ManuallyCreateMD/planSavePopup.js\";\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport cloneDeep from 'clone-deep';\nimport _ from 'lodash'; // import { toast } from 'react-toastify';\n// import \"./index.css\"\n\nvar scenarioCheck = false;\n\nvar PlanSave =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlanSave, _Component);\n\n  function PlanSave(props) {\n    var _this;\n\n    _classCallCheck(this, PlanSave);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlanSave).call(this, props));\n\n    _this.validateInput = function (inputs) {\n      if (_this.props.activeTab !== 'Comparison') {\n        return true;\n      } else {\n        var value = inputs.map(function (obj) {\n          if (obj.value) {\n            return obj.value;\n          }\n\n          return obj.label;\n        });\n        return new Set(value).size === value.length;\n      }\n    };\n\n    _this.state = {\n      planName: '',\n      scenarioName: '',\n      showErrorMessage: false,\n      tempArr: []\n    };\n    return _this;\n  }\n\n  _createClass(PlanSave, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tabsData = cloneDeep(this.props.data);\n      var tempArr = this.state.tempArr;\n\n      if (this.props.activeTab === 'Comparison' && !scenarioCheck) {\n        tempArr = this.props.comparsionSelectedData.map(function (row) {\n          return Object.assign({}, row, {\n            label: row.scenarios,\n            value: ''\n          });\n        });\n      }\n\n      if (this.props.activeTab !== 'Comparison' && !scenarioCheck) {\n        var data = tabsData[this.state.activeIndex] ? tabsData[this.state.activeIndex][0] : {};\n        data.label = this.props.activeTab;\n        data.value = '';\n        tempArr = [data]; // data.forEach((label) => {\n        //   if (label !== 'Optimal' && label !== 'Comparison') {\n        //     tempArr.push({\n        //       label: label,\n        //       value: '',\n        //     });\n        //   }\n        // });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"planSaveAlign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, ' ', React.createElement(\"p\", {\n        className: \"font-size-14 mb-0 ml-3\",\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"required\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"*\"), \"Markdown Plan Name\"), React.createElement(InputGroup, {\n        className: \"mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        \"aria-label\": \"planName\",\n        \"aria-describedby\": \"basic-addon2\",\n        style: {\n          padding: '18px'\n        },\n        value: this.state.planName,\n        type: \"text\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            planName: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }))), tempArr.map(function (obj, index) {\n        return React.createElement(\"div\", {\n          className: \"planSaveAlign\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"font-size-14 mb-0 ml-3\",\n          style: {\n            fontWeight: 'bold'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, obj.label), React.createElement(InputGroup, {\n          className: \"mb-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(FormControl, {\n          \"aria-label\": \"scenarioName\",\n          \"aria-describedby\": \"basic-addon2\",\n          style: {\n            padding: '18px'\n          },\n          value: obj.value,\n          type: \"text\",\n          onChange: function onChange(e) {\n            scenarioCheck = true;\n            obj.value = e.target.value;\n\n            _this2.setState({\n              showErrorMessage: false,\n              tempArr: tempArr\n            }); // this.setState({ [obj.value]: e.target.value });\n\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        })));\n      }), this.state.showErrorMessage && React.createElement(\"div\", {\n        style: {\n          color: 'red',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Scenario name should be unique\"), React.createElement(\"div\", {\n        className: \"saveBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary biconbuttonFilter\",\n        style: {\n          width: '15%'\n        },\n        disabled: !this.state.planName,\n        onClick: function onClick() {\n          if (_this2.validateInput(tempArr)) {\n            _this2.props.onSave(_this2.state.planName, tempArr);\n\n            scenarioCheck = false;\n\n            _this2.setState({\n              planName: '',\n              tempArr: [],\n              showErrorMessage: false\n            });\n          } else {\n            _this2.setState({\n              showErrorMessage: true\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Save\")));\n    }\n  }]);\n\n  return PlanSave;\n}(Component);\n\nexport default PlanSave;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/ManuallyCreateMD/planSavePopup.js"],"names":["React","Component","Select","InputGroup","FormControl","cloneDeep","_","scenarioCheck","PlanSave","props","validateInput","inputs","activeTab","value","map","obj","label","Set","size","length","state","planName","scenarioName","showErrorMessage","tempArr","tabsData","data","comparsionSelectedData","row","Object","assign","scenarios","activeIndex","fontWeight","padding","e","setState","target","index","color","textAlign","width","onSave"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport cloneDeep from 'clone-deep';\nimport _ from 'lodash';\n// import { toast } from 'react-toastify';\n// import \"./index.css\"\n\nlet scenarioCheck = false;\n\nclass PlanSave extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planName: '',\n      scenarioName: '',\n      showErrorMessage: false,\n      tempArr: [],\n    };\n  }\n\n  validateInput = (inputs) => {\n    if (this.props.activeTab !== 'Comparison') {\n      return true;\n    } else {\n      let value = inputs.map((obj) => {\n        if (obj.value) {\n          return obj.value;\n        }\n        return obj.label;\n      });\n      return new Set(value).size === value.length;\n    }\n  };\n  render() {\n    let tabsData = cloneDeep(this.props.data);\n    let tempArr = this.state.tempArr;\n    if (this.props.activeTab === 'Comparison' && !scenarioCheck) {\n      tempArr = this.props.comparsionSelectedData.map((row) => {\n        return Object.assign({}, row, {\n          label: row.scenarios,\n          value: '',\n        });\n      });\n    }\n    if (this.props.activeTab !== 'Comparison' && !scenarioCheck) {\n      let data = tabsData[this.state.activeIndex] ? tabsData[this.state.activeIndex][0] : {};\n      data.label = this.props.activeTab;\n      data.value = '';\n      tempArr = [data];\n      // data.forEach((label) => {\n      //   if (label !== 'Optimal' && label !== 'Comparison') {\n      //     tempArr.push({\n      //       label: label,\n      //       value: '',\n      //     });\n      //   }\n      // });\n    }\n\n    return (\n      <div>\n        <div className=\"planSaveAlign\">\n          {' '}\n          <p className=\"font-size-14 mb-0 ml-3\" style={{ fontWeight: 'bold' }}>\n            <span className=\"required\">*</span>Markdown Plan Name\n          </p>\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              aria-label=\"planName\"\n              aria-describedby=\"basic-addon2\"\n              style={{ padding: '18px' }}\n              value={this.state.planName}\n              type=\"text\"\n              onChange={(e) => {\n                this.setState({ planName: e.target.value });\n              }}\n            />\n          </InputGroup>\n        </div>\n        {tempArr.map((obj, index) => {\n          return (\n            <div className=\"planSaveAlign\" key={index}>\n              <p className=\"font-size-14 mb-0 ml-3\" style={{ fontWeight: 'bold' }}>\n                {obj.label}\n              </p>\n              <InputGroup className=\"mb-3\">\n                <FormControl\n                  aria-label=\"scenarioName\"\n                  aria-describedby=\"basic-addon2\"\n                  style={{ padding: '18px' }}\n                  value={obj.value}\n                  type=\"text\"\n                  onChange={(e) => {\n                    scenarioCheck = true;\n                    obj.value = e.target.value;\n                    this.setState({\n                      showErrorMessage: false,\n                      tempArr,\n                    });\n                    // this.setState({ [obj.value]: e.target.value });\n                  }}\n                />\n              </InputGroup>\n            </div>\n          );\n        })}\n        {this.state.showErrorMessage && (\n          <div style={{ color: 'red', textAlign: 'center' }}>Scenario name should be unique</div>\n        )}\n        <div className=\"saveBtn\">\n          <button\n            className=\"btn btn-primary biconbuttonFilter\"\n            style={{ width: '15%' }}\n            disabled={!this.state.planName}\n            onClick={() => {\n              if (this.validateInput(tempArr)) {\n                this.props.onSave(this.state.planName, tempArr);\n                scenarioCheck = false;\n                this.setState({\n                  planName: '',\n                  tempArr: [],\n                  showErrorMessage: false,\n                });\n              } else {\n                this.setState({\n                  showErrorMessage: true,\n                });\n              }\n            }}>\n            Save\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlanSave;\n"]},"metadata":{},"sourceType":"module"}