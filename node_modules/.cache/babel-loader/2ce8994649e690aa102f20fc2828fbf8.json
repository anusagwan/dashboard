{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/services/reactTable/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  /* This is required to make the table full-width */\\n  display: block;\\n  max-width: 100%;\\n  overflow:auto .exportBtn {\\n  }\\n  /* This will make the table scrollable when it gets too small */\\n  .tableWrap {\\n    display: block;\\n    max-width: 100%;\\n    overflow-x: scroll;\\n    overflow-y: hidden;\\n    border-bottom: 1px solid black;\\n  }\\n  table {\\n    width: 100%;\\n    border-spacing: 0;\\n    border: 1px solid #c4ced5;\\n\\n    thead {\\n      background-color: #e7eef2;\\n    }\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0 0rem;\\n      border-bottom: 1px solid #accee7;\\n      border-right: 1px solid #accee7;\\n      font-size: 12px;\\n\\n      /* The secret sauce */\\n      /* Each cell should grow equally */\\n      // width: 1.5%;\\n      /* But \\\"collapsed\\\" cells should be as small as possible */\\n      &.collapse {\\n        width: 0.0000000001%;\\n      }\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n      input {\\n        height: 19px;\\n        margin: 8px 0 !important;\\n        display: inline-block;\\n        border: 1px solid #44677b;\\n        width: 10em;\\n        padding: 0px 8px;\\n        margin: 0;\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport './index.css';\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useRowSelect } from 'react-table';\nimport styled from 'styled-components';\nimport matchSorter from 'match-sorter';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport { useExportData } from 'react-table-plugins';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n  switch (visibleColumns) {\n    case 'onlyRowSelection':\n      hooks.visibleColumns.push(function (columns) {\n        return [{\n          id: 'selection',\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: function Header(_ref) {\n            var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 33\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34\n              },\n              __self: this\n            })));\n          },\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref2) {\n            var row = _ref2.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 41\n              },\n              __self: this\n            })));\n          }\n        }].concat(_toConsumableArray(columns));\n      });\n      break;\n\n    case 'markDownDrafts':\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          id: 'selection',\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions1',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref3) {\n            var row = _ref3.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({\n              row: row.id\n            }, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            })));\n          }\n        }, {\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions2',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref4) {\n            var row = _ref4.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    case 'markDownStatus':\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref5) {\n            var row = _ref5.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    default:\n      hooks.useInstance.push(useInstance);\n      break;\n  }\n}\n\nfunction DefaultColumnFilter(_ref6) {\n  var _ref6$column = _ref6.column,\n      filterValue = _ref6$column.filterValue,\n      preFilteredRows = _ref6$column.preFilteredRows,\n      setFilter = _ref6$column.setFilter;\n  return React.createElement(\"div\", {\n    className: \"filterInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-filter filterIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })));\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Create a default prop getter\n\n\nvar defaultPropGetter = function defaultPropGetter() {\n  return {};\n};\n\nfunction useInstance(instance) {\n  var allColumns = instance.allColumns;\n  var rowSpanHeaders = [];\n  allColumns.forEach(function (column) {\n    var id = column.id,\n        enableRowSpan = column.enableRowSpan;\n\n    if (enableRowSpan !== undefined) {\n      rowSpanHeaders = [].concat(_toConsumableArray(rowSpanHeaders), [{\n        id: id,\n        topCellValue: null,\n        topCellIndex: 0\n      }]);\n    }\n  });\n  Object.assign(instance, {\n    rowSpanHeaders: rowSpanHeaders\n  });\n}\n\nfunction getExportFileBlob(_ref7) {\n  var columns = _ref7.columns,\n      data = _ref7.data,\n      fileType = _ref7.fileType,\n      fileName = _ref7.fileName;\n  console.log(columns, 'columnscolumns', data, 'datadata');\n\n  if (fileType === 'csv') {\n    // CSV example\n    var headerNames = columns.map(function (col) {\n      return col.exportValue;\n    });\n    var csvString = Papa.unparse({\n      fields: headerNames,\n      data: data\n    });\n    return new Blob([csvString], {\n      type: 'text/csv'\n    });\n  } else if (fileType === 'xlsx') {\n    // XLSX example\n    var newCols = _.filter(columns, function (item) {\n      return !item.hideInDownload;\n    }); //hideInDownload:true if the column needs to b hidden in downloaded file\n\n\n    var header = _.map(newCols, function (c) {\n      return c.downloadHeader ? c.downloadHeader : c.exportValue;\n    }); //downloadHeader is to show different headername in downloaded file,\n\n\n    var cellFormatter = _.map(newCols, function (c) {\n      return c.downloadFormatter;\n    }); //downloadFormatter is formatter func for the download val\n\n\n    var compatibleData = _.map(data, function (row) {\n      var obj = {};\n\n      _.forEach(header, function (col, index) {\n        var val = row[index];\n        var newVal = (val || val === 0) && cellFormatter[index] ? cellFormatter[index]({\n          value: val\n        }) : val;\n        obj[col] = newVal || newVal === 0 ? newVal : '-';\n        console.log('czsdlfeopppppp', val, newVal);\n      });\n\n      return obj;\n    });\n\n    var wb = XLSX.utils.book_new();\n    var ws1 = XLSX.utils.json_to_sheet(compatibleData, {\n      header: header\n    });\n    XLSX.utils.book_append_sheet(wb, ws1, 'Data');\n    XLSX.writeFile(wb, \"\".concat(fileName, \".xlsx\")); // Returning false as downloading of file is already taken care of\n\n    return false;\n  } // Other formats goes here\n\n\n  return false;\n}\n\nfunction Table(_ref8) {\n  var columns = _ref8.columns,\n      data = _ref8.data,\n      updateMyData = _ref8.updateMyData,\n      visibleColumns = _ref8.visibleColumns,\n      isColumnFilter = _ref8.isColumnFilter,\n      isCellEdit = _ref8.isCellEdit,\n      defCols = _ref8.defCols,\n      isPagination = _ref8.isPagination,\n      rowsPerPage = _ref8.rowsPerPage,\n      showExport = _ref8.showExport,\n      _ref8$getHeaderProps = _ref8.getHeaderProps,\n      getHeaderProps = _ref8$getHeaderProps === void 0 ? defaultPropGetter : _ref8$getHeaderProps,\n      _ref8$getColumnProps = _ref8.getColumnProps,\n      getColumnProps = _ref8$getColumnProps === void 0 ? defaultPropGetter : _ref8$getColumnProps,\n      _ref8$getRowProps = _ref8.getRowProps,\n      getRowProps = _ref8$getRowProps === void 0 ? defaultPropGetter : _ref8$getRowProps,\n      _ref8$getCellProps = _ref8.getCellProps,\n      getCellProps = _ref8$getCellProps === void 0 ? defaultPropGetter : _ref8$getCellProps,\n      isSort = _ref8.isSort,\n      isHeaderHidden = _ref8.isHeaderHidden,\n      selectRow = _ref8.selectRow;\n  //Column Filter Configuration\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    };\n  }, []); // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n  // Use the state and functions returned from useTable to build your UI\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    //for setting default view\n    filterTypes: filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData,\n    getExportFileBlob: getExportFileBlob,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    disableMultiSort: true,\n    initialState: {\n      groupBy: [],\n      filters: [],\n      pageSize: rowsPerPage ? rowsPerPage : 10\n    }\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, useExportData, // Here we will use a plugin to add our selection column\n  function (hooks) {\n    setVisibleColumns(hooks, visibleColumns);\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      rows = _useTable.rows,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      rowSpanHeaders = _useTable.rowSpanHeaders,\n      exportData = _useTable.exportData,\n      _useTable$state = _useTable.state,\n      selectedRowIds = _useTable$state.selectedRowIds,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize,\n      sortBy = _useTable$state.sortBy,\n      groupBy = _useTable$state.groupBy,\n      expanded = _useTable$state.expanded,\n      filters = _useTable$state.filters;\n\n  useEffect(function () {\n    selectRow && selectRow(selectedRowIds);\n  }, [selectedRowIds]);\n  var tableData = [];\n\n  if (isPagination) {\n    tableData = page;\n  } else {\n    tableData = rows;\n  }\n\n  var perPageArray = rowsPerPage ? [rowsPerPage, rowsPerPage * 2, rowsPerPage * 3, rowsPerPage * 4, rowsPerPage * 5] : [10, 20, 30, 40, 50]; // Render the UI for your table\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exportBtn mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: showExport ? 'btn btn-primary iconbutton download-btn' : 'd-none',\n    onClick: function onClick() {\n      exportData('xlsx', false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-download\",\n    \"aria-hidden\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"tableWrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }), isHeaderHidden ? null : React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return React.createElement(\"th\", Object.assign({\n        className: \"thth\"\n      }, column.getHeaderProps({\n        className: column.collapse ? 'collapse' : ''\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dis_flex_r\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, isSort && !column.columns ? React.createElement(\"div\", Object.assign({}, column.getSortByToggleProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), column.render('Header'), \" \\xA0\", !column.isSorted ? typeof column.Header !== 'string' ? '' : React.createElement(\"i\", {\n        className: \"fa fa-sort\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }) : column.isSortedDesc ? React.createElement(\"i\", {\n        className: \"fa fa-sort-desc\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        className: \"fa fa-sort-asc\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      })) : column.render('Header')), React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, column.showFilter ? column.render('Filter') : null));\n    }));\n  })), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    },\n    __self: this\n  }), rowSpanHeaders && tableData.map(function (row, i) {\n    prepareRow(row);\n\n    var _loop = function _loop(j) {\n      var cell = row.allCells[j];\n      var rowSpanHeader = rowSpanHeaders.find(function (x) {\n        return x.id === cell.column.id;\n      });\n\n      if (rowSpanHeader !== undefined) {\n        if (rowSpanHeader.topCellValue === null || rowSpanHeader.topCellValue !== cell.value) {\n          cell.isRowSpanned = false;\n          rowSpanHeader.topCellValue = cell.value;\n          rowSpanHeader.topCellIndex = i;\n          cell.rowSpan = 1;\n        } else {\n          page[rowSpanHeader.topCellIndex].allCells[j].rowSpan++;\n          cell.isRowSpanned = true;\n        }\n      }\n    };\n\n    for (var j = 0; j < row.allCells.length; j++) {\n      _loop(j);\n    }\n\n    return null;\n  }), tableData.map(function (row) {\n    if (!rowSpanHeaders || rowSpanHeaders && rowSpanHeaders.length === 0) {\n      prepareRow(row);\n    }\n\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps([getRowProps(row)]), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      row.getToggleRowExpandedProps();\n      if (cell.isRowSpanned) return null;else {\n        return React.createElement(\"td\", Object.assign({\n          className: \"tdtd\",\n          rowSpan: cell.rowSpan\n        }, cell.getCellProps(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 432\n          },\n          __self: this\n        }), cell.isGrouped ? // If it's a grouped cell, add an expander and row count\n        React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          className: \"dis_flex_r\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436\n          },\n          __self: this\n        }, cell.render('Cell', {\n          editable: false\n        }), React.createElement(\"div\", Object.assign({}, row.getToggleRowExpandedProps(), {\n          className: \"expandCollapseArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438\n          },\n          __self: this\n        }), row.isExpanded ? React.createElement(\"i\", {\n          className: \"fa fa-angle-down fa-lg\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442\n          },\n          __self: this\n        }) : React.createElement(\"i\", {\n          class: \"fa fa-angle-right fa-lg\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444\n          },\n          __self: this\n        })), ' ')) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n        // renderer for cell\n        cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n        // Otherwise, just render the regular cell\n        React.createElement(\"div\", Object.assign({}, cell.getCellProps([{\n          className: cell.column.className,\n          style: cell.column.style\n        }, getColumnProps(cell.column), getCellProps(cell)]), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455\n          },\n          __self: this\n        }), cell.render('Cell', {\n          editable: true\n        })));\n      }\n    }));\n  })))), tableData && tableData.length ? '' : React.createElement(\"div\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477\n    },\n    __self: this\n  }), isPagination && data && data.length ? React.createElement(\"div\", {\n    className: \"pagination dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, \"Showing\", ' ', React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }, pageIndex > 0 ? \"\".concat(pageSize * pageIndex + 1, \" to \").concat(pageSize * (pageIndex + 1) > rows.length ? rows.length : pageSize * (pageIndex + 1), \" of \").concat(rows.length) : \"\".concat(pageIndex + 1, \" to \").concat(pageSize > rows.length ? rows.length : pageSize, \" of \").concat(rows.length)), ' '), React.createElement(\"div\", {\n    className: \"dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }, '<<'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    },\n    __self: this\n  }, '<'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    },\n    __self: this\n  }, '>'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524\n    },\n    __self: this\n  }, '>>')), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543\n    },\n    __self: this\n  }, \"Per page\", React.createElement(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545\n    },\n    __self: this\n  }, perPageArray.map(function (pageSize) {\n    return React.createElement(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, \"Show \", pageSize);\n  })))) : '');\n}\n\nexport default Table;\nvar Styles = styled.div(_templateObject());","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/services/reactTable/index.js"],"names":["React","useEffect","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useRowSelect","styled","matchSorter","IndeterminateCheckbox","_","useExportData","Papa","XLSX","setVisibleColumns","hooks","visibleColumns","push","columns","id","groupByBoundary","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useInstance","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","e","target","value","undefined","fuzzyTextFilterFn","rows","keys","values","autoRemove","val","defaultPropGetter","instance","allColumns","rowSpanHeaders","forEach","enableRowSpan","topCellValue","topCellIndex","Object","assign","getExportFileBlob","data","fileType","fileName","console","log","headerNames","map","col","exportValue","csvString","unparse","fields","Blob","type","newCols","filter","item","hideInDownload","header","c","downloadHeader","cellFormatter","downloadFormatter","compatibleData","obj","index","newVal","wb","utils","book_new","ws1","json_to_sheet","book_append_sheet","writeFile","Table","updateMyData","isColumnFilter","isCellEdit","defCols","isPagination","rowsPerPage","showExport","getHeaderProps","getColumnProps","getRowProps","getCellProps","isSort","isHeaderHidden","selectRow","filterTypes","useMemo","fuzzyText","text","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","disableMultiSort","initialState","groupBy","filters","pageSize","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","exportData","state","selectedRowIds","pageIndex","sortBy","expanded","tableData","perPageArray","headerGroup","getHeaderGroupProps","headers","className","collapse","getSortByToggleProps","render","isSorted","isSortedDesc","showFilter","i","j","cell","allCells","rowSpanHeader","find","x","isRowSpanned","rowSpan","length","cells","getToggleRowExpandedProps","isGrouped","editable","isExpanded","isAggregated","isPlaceholder","style","Number","Styles","div"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport './index.css';\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from 'react-table';\nimport styled from 'styled-components';\nimport matchSorter from 'match-sorter';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport { useExportData } from 'react-table-plugins';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n  switch (visibleColumns) {\n    case 'onlyRowSelection':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ];\n      });\n      break;\n    case 'markDownDrafts':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions1',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => {\n              return (\n                <div>\n                  <IndeterminateCheckbox row={row.id} {...row.getToggleRowSelectedProps()} />\n                </div>\n              );\n            },\n          },\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions2',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n    case 'markDownStatus':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n\n    default:\n      hooks.useInstance.push(useInstance);\n      break;\n  }\n}\nfunction DefaultColumnFilter({ column: { filterValue, preFilteredRows, setFilter } }) {\n  return (\n    <div className=\"filterInput\">\n      <input\n        value={filterValue || ''}\n        onChange={(e) => {\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search`}\n      />\n      <span>\n        <i className=\"fa fa-filter filterIcon\"></i>\n      </span>\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Create a default prop getter\nconst defaultPropGetter = () => ({});\n\nfunction useInstance(instance) {\n  const { allColumns } = instance;\n\n  let rowSpanHeaders = [];\n\n  allColumns.forEach((column) => {\n    const { id, enableRowSpan } = column;\n\n    if (enableRowSpan !== undefined) {\n      rowSpanHeaders = [...rowSpanHeaders, { id: id, topCellValue: null, topCellIndex: 0 }];\n    }\n  });\n\n  Object.assign(instance, {\n    rowSpanHeaders: rowSpanHeaders,\n  });\n}\nfunction getExportFileBlob({ columns, data, fileType, fileName }) {\n  console.log(columns, 'columnscolumns', data, 'datadata');\n  if (fileType === 'csv') {\n    // CSV example\n    const headerNames = columns.map((col) => col.exportValue);\n    const csvString = Papa.unparse({ fields: headerNames, data });\n    return new Blob([csvString], { type: 'text/csv' });\n  } else if (fileType === 'xlsx') {\n    // XLSX example\n\n    const newCols = _.filter(columns, (item) => !item.hideInDownload); //hideInDownload:true if the column needs to b hidden in downloaded file\n    const header = _.map(newCols, (c) => (c.downloadHeader ? c.downloadHeader : c.exportValue)); //downloadHeader is to show different headername in downloaded file,\n    const cellFormatter = _.map(newCols, (c) => c.downloadFormatter); //downloadFormatter is formatter func for the download val\n    const compatibleData = _.map(data, (row) => {\n      const obj = {};\n      _.forEach(header, (col, index) => {\n        let val = row[index];\n        let newVal =\n          (val || val === 0) && cellFormatter[index] ? cellFormatter[index]({ value: val }) : val;\n        obj[col] = newVal || newVal === 0 ? newVal : '-';\n        console.log('czsdlfeopppppp', val, newVal);\n      });\n      return obj;\n    });\n\n    let wb = XLSX.utils.book_new();\n    let ws1 = XLSX.utils.json_to_sheet(compatibleData, {\n      header,\n    });\n    XLSX.utils.book_append_sheet(wb, ws1, 'Data');\n    XLSX.writeFile(wb, `${fileName}.xlsx`);\n\n    // Returning false as downloading of file is already taken care of\n    return false;\n  }\n\n  // Other formats goes here\n  return false;\n}\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  visibleColumns,\n  isColumnFilter,\n  isCellEdit,\n  defCols,\n  isPagination,\n  rowsPerPage,\n  showExport,\n  getHeaderProps = defaultPropGetter,\n  getColumnProps = defaultPropGetter,\n  getRowProps = defaultPropGetter,\n  getCellProps = defaultPropGetter,\n  isSort,\n  isHeaderHidden,\n  selectRow,\n}) {\n  //Column Filter Configuration\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n  // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    rows, // Instead of using 'rows', we'll use page, which has only the rows for the active page, The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    rowSpanHeaders,\n    exportData,\n    state: { selectedRowIds, pageIndex, pageSize, sortBy, groupBy, expanded, filters },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, //for setting default view\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      getExportFileBlob,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      disableMultiSort: true,\n      initialState: {\n        groupBy: [],\n        filters: [],\n        pageSize: rowsPerPage ? rowsPerPage : 10,\n      },\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    useExportData,\n    // Here we will use a plugin to add our selection column\n    (hooks) => {\n      setVisibleColumns(hooks, visibleColumns);\n    }\n  );\n  useEffect(() => {\n    selectRow && selectRow(selectedRowIds);\n  }, [selectedRowIds]);\n  var tableData = [];\n  if (isPagination) {\n    tableData = page;\n  } else {\n    tableData = rows;\n  }\n  let perPageArray = rowsPerPage\n    ? [rowsPerPage, rowsPerPage * 2, rowsPerPage * 3, rowsPerPage * 4, rowsPerPage * 5]\n    : [10, 20, 30, 40, 50];\n\n  // Render the UI for your table\n  return (\n    <Styles>\n      <div className=\"exportBtn mb-3\">\n        <button\n          className={showExport ? 'btn btn-primary iconbutton download-btn' : 'd-none'}\n          onClick={() => {\n            exportData('xlsx', false);\n          }}>\n          <span>\n            <i className=\"fa fa-download\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"tableWrap\">\n        <table {...getTableProps()}>\n          {isHeaderHidden ? null : (\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((column) => {\n                    return (\n                      <th\n                        className=\"thth\"\n                        {...column.getHeaderProps({\n                          className: column.collapse ? 'collapse' : '',\n                        })}>\n                        <div className=\"dis_flex_r\">\n                          {/* {column.canGroupBy ? (\n                            // If the column can be grouped, let's add a toggle\n                            <div {...column.getGroupByToggleProps()} className=\"plr\">\n                              {column.isGrouped ? (\n                                '🛑 '\n                              ) : (\n                                <i className=\"fa fa-users\" aria-hidden=\"true\" />\n                              )}\n                            </div>\n                          ) : null} */}\n\n                          {isSort && !column.columns ? (\n                            <div {...column.getSortByToggleProps()}>\n                              {column.render('Header')} &nbsp;\n                              {!column.isSorted ? (\n                                typeof column.Header !== 'string' ? (\n                                  ''\n                                ) : (\n                                  <i className=\"fa fa-sort\" aria-hidden=\"true\" />\n                                )\n                              ) : column.isSortedDesc ? (\n                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\" />\n                              ) : (\n                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\" />\n                              )}\n                            </div>\n                          ) : (\n                            column.render('Header')\n                          )}\n                        </div>\n                        {/* Render the columns filter UI */}\n                        <React.Fragment>\n                          {column.showFilter ? column.render('Filter') : null}\n                        </React.Fragment>\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n          )}\n\n          <tbody {...getTableBodyProps()}>\n            {/* Row Span */}\n            {rowSpanHeaders &&\n              tableData.map((row, i) => {\n                prepareRow(row);\n                for (let j = 0; j < row.allCells.length; j++) {\n                  let cell = row.allCells[j];\n                  let rowSpanHeader = rowSpanHeaders.find((x) => x.id === cell.column.id);\n                  if (rowSpanHeader !== undefined) {\n                    if (\n                      rowSpanHeader.topCellValue === null ||\n                      rowSpanHeader.topCellValue !== cell.value\n                    ) {\n                      cell.isRowSpanned = false;\n                      rowSpanHeader.topCellValue = cell.value;\n                      rowSpanHeader.topCellIndex = i;\n                      cell.rowSpan = 1;\n                    } else {\n                      page[rowSpanHeader.topCellIndex].allCells[j].rowSpan++;\n                      cell.isRowSpanned = true;\n                    }\n                  }\n                }\n                return null;\n              })}\n\n            {tableData.map((row) => {\n              if (!rowSpanHeaders || (rowSpanHeaders && rowSpanHeaders.length === 0)) {\n                prepareRow(row);\n              }\n              return (\n                <tr {...row.getRowProps([getRowProps(row)])}>\n                  {row.cells.map((cell) => {\n                    row.getToggleRowExpandedProps();\n                    if (cell.isRowSpanned) return null;\n                    else {\n                      return (\n                        <td className=\"tdtd\" rowSpan={cell.rowSpan} {...cell.getCellProps()}>\n                          {cell.isGrouped ? (\n                            // If it's a grouped cell, add an expander and row count\n                            <>\n                              <div className=\"dis_flex_r\">\n                                {cell.render('Cell', { editable: false })}\n                                <div\n                                  {...row.getToggleRowExpandedProps()}\n                                  className=\"expandCollapseArrow\">\n                                  {row.isExpanded ? (\n                                    <i className=\"fa fa-angle-down fa-lg\" aria-hidden=\"true\" />\n                                  ) : (\n                                    <i class=\"fa fa-angle-right fa-lg\" aria-hidden=\"true\" />\n                                  )}\n                                </div>{' '}\n                              </div>\n                            </>\n                          ) : cell.isAggregated ? (\n                            // If the cell is aggregated, use the Aggregated\n                            // renderer for cell\n                            cell.render('Aggregated')\n                          ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                            // Otherwise, just render the regular cell\n                            <div\n                              {...cell.getCellProps([\n                                {\n                                  className: cell.column.className,\n                                  style: cell.column.style,\n                                },\n                                getColumnProps(cell.column),\n                                getCellProps(cell),\n                              ])}>\n                              {cell.render('Cell', { editable: true })}\n                            </div>\n                          )}\n                        </td>\n                      );\n                    }\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {tableData && tableData.length ? '' : <div align=\"center\"></div>}\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n\n      {isPagination && data && data.length ? (\n        <div className=\"pagination dis_flex_r\">\n          <div>\n            Showing{' '}\n            <strong>\n              {pageIndex > 0\n                ? `${pageSize * pageIndex + 1} to ${\n                    pageSize * (pageIndex + 1) > rows.length\n                      ? rows.length\n                      : pageSize * (pageIndex + 1)\n                  } of ${rows.length}`\n                : `${pageIndex + 1} to ${pageSize > rows.length ? rows.length : pageSize} of ${\n                    rows.length\n                  }`}\n            </strong>{' '}\n          </div>\n          <div className=\"dis_flex_r\">\n            <button className=\"pages\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n              {'<<'}\n            </button>{' '}\n            <button className=\"pages\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n              {'<'}\n            </button>{' '}\n            {/* {pageOptions.map((page) => {\n              return (\n                <div\n                  className=\"pagination-options\"\n                  onClick={() => {\n                    gotoPage(page);\n                  }}>\n                  {pageIndex + 1 === page + 1 ? (\n                    <div className=\"pageCountActive\">{page + 1}</div>\n                  ) : (\n                    <div className=\"pageCount\">{page + 1}</div>\n                  )}\n                </div>\n              );\n            })} */}\n            <button className=\"pages\" onClick={() => nextPage()} disabled={!canNextPage}>\n              {'>'}\n            </button>{' '}\n            <button\n              className=\"pages\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}>\n              {'>>'}\n            </button>\n          </div>\n          {/* <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"} */}\n          <div>\n            Per page\n            <select\n              value={pageSize}\n              onChange={(e) => {\n                setPageSize(Number(e.target.value));\n              }}>\n              {perPageArray.map((pageSize) => (\n                <option key={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n    </Styles>\n  );\n}\n\nexport default Table;\n\nconst Styles = styled.div`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n  overflow:auto .exportBtn {\n  }\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    border-bottom: 1px solid black;\n  }\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border: 1px solid #c4ced5;\n\n    thead {\n      background-color: #e7eef2;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0 0rem;\n      border-bottom: 1px solid #accee7;\n      border-right: 1px solid #accee7;\n      font-size: 12px;\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      // width: 1.5%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n      input {\n        height: 19px;\n        margin: 8px 0 !important;\n        display: inline-block;\n        border: 1px solid #44677b;\n        width: 10em;\n        padding: 0px 8px;\n        margin: 0;\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}