{"ast":null,"code":"import _toConsumableArray from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/calenderComponents/cadenceChatComponent.js\";\nimport React, { PureComponent } from \"react\";\nimport CadenceChart from \"../cadenceChart\";\nimport moment from \"moment\";\n\nvar cadenceGraphComponent =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(cadenceGraphComponent, _PureComponent);\n\n  function cadenceGraphComponent(props) {\n    var _this;\n\n    _classCallCheck(this, cadenceGraphComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(cadenceGraphComponent).call(this, props));\n    _this.state = {\n      barChartData1: 25,\n      barChartData2: 35,\n      barChartData3: 50\n    };\n    return _this;\n  }\n\n  _createClass(cadenceGraphComponent, [{\n    key: \"render\",\n    value: function render() {\n      var borderColors = [\"#7b8ec9\", \"#c099b7\", \"#e5ce6b\"];\n      var backgroundColors = [\"#eaecf6\", \"#f1e8ef\", \"#faf4de\"];\n      var selectedCadenceSet = this.props.selectedCadenceSet;\n\n      var cadencePercentages = _toConsumableArray(new Set(selectedCadenceSet.overall.weekly_markdown));\n\n      var datasets = cadencePercentages.map(function () {\n        return [];\n      });\n      selectedCadenceSet.overall.weekly_markdown.forEach(function (markdown, idx) {\n        if (datasets[cadencePercentages.indexOf(markdown)].length == 0 && idx !== 0) {\n          datasets[cadencePercentages.indexOf(markdown)] = _toConsumableArray(datasets[cadencePercentages.indexOf(markdown) - 1]);\n        }\n\n        datasets[cadencePercentages.indexOf(markdown)].push(selectedCadenceSet.overall.weekly_revenue_new[idx]);\n      });\n      var labels = selectedCadenceSet.overall.start_weeks.map(function (date) {\n        return moment(date).format(\"MMM DD\");\n      });\n      var chartData = {\n        labels: labels,\n        datasets: datasets.map(function (item, idx) {\n          return {\n            data: item,\n            borderColor: borderColors[idx],\n            backgroundColor: backgroundColors[idx]\n          };\n        })\n      };\n      var annotations = [];\n\n      for (var i = 0; i < cadencePercentages.length - 1; i++) {\n        var lastIndex = selectedCadenceSet.overall.weekly_markdown.lastIndexOf(cadencePercentages[i]);\n        annotations.push({\n          drawTime: \"afterDatasetsDraw\",\n          type: \"line\",\n          mode: \"vertical\",\n          scaleID: \"x-axis-0\",\n          value: chartData.labels[lastIndex],\n          borderColor: \"#c6bcbc\",\n          borderWidth: 2\n        });\n      }\n\n      cadencePercentages = cadencePercentages.map(function (per) {\n        return \"\".concat((Number(per) * 100).toFixed(2), \"%\");\n      });\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"pipelineLabel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Cadence\"), React.createElement(\"div\", {\n        className: \"chartContainermain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(CadenceChart, {\n        chartData: chartData,\n        annotations: annotations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chartContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row j-c-c\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, cadencePercentages.map(function (per, index) {\n        return React.createElement(\"div\", {\n          className: \"col-md-3 d-flex\",\n          key: \"\".concat(Math.random() + index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"colorBox\",\n          style: {\n            backgroundColor: backgroundColors[index]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"left-space\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, per));\n      })))));\n    }\n  }]);\n\n  return cadenceGraphComponent;\n}(PureComponent);\n\nexport default cadenceGraphComponent;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/calenderComponents/cadenceChatComponent.js"],"names":["React","PureComponent","CadenceChart","moment","cadenceGraphComponent","props","state","barChartData1","barChartData2","barChartData3","borderColors","backgroundColors","selectedCadenceSet","cadencePercentages","Set","overall","weekly_markdown","datasets","map","forEach","markdown","idx","indexOf","length","push","weekly_revenue_new","labels","start_weeks","date","format","chartData","item","data","borderColor","backgroundColor","annotations","i","lastIndex","lastIndexOf","drawTime","type","mode","scaleID","value","borderWidth","per","Number","toFixed","index","Math","random"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport CadenceChart from \"../cadenceChart\";\nimport moment from \"moment\";\n\nclass cadenceGraphComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barChartData1: 25,\n      barChartData2: 35,\n      barChartData3: 50\n    };\n  }\n\n  render() {\n    const borderColors = [\"#7b8ec9\", \"#c099b7\", \"#e5ce6b\"];\n    const backgroundColors = [\"#eaecf6\", \"#f1e8ef\", \"#faf4de\"];\n    const { selectedCadenceSet } = this.props;\n    let cadencePercentages = [\n      ...new Set(selectedCadenceSet.overall.weekly_markdown)\n    ];\n\n    const datasets = cadencePercentages.map(() => []);\n    selectedCadenceSet.overall.weekly_markdown.forEach((markdown, idx) => {\n      if (\n        datasets[cadencePercentages.indexOf(markdown)].length == 0 &&\n        idx !== 0\n      ) {\n        datasets[cadencePercentages.indexOf(markdown)] = [\n          ...datasets[cadencePercentages.indexOf(markdown) - 1]\n        ];\n      }\n      datasets[cadencePercentages.indexOf(markdown)].push(\n        selectedCadenceSet.overall.weekly_revenue_new[idx]\n      );\n    });\n\n    const labels = selectedCadenceSet.overall.start_weeks.map(date =>\n      moment(date).format(\"MMM DD\")\n    );\n    let chartData = {\n      labels: labels,\n      datasets: datasets.map((item, idx) => ({\n        data: item,\n        borderColor: borderColors[idx],\n        backgroundColor: backgroundColors[idx]\n      }))\n    };\n    const annotations = [];\n    for (let i = 0; i < cadencePercentages.length - 1; i++) {\n      const lastIndex = selectedCadenceSet.overall.weekly_markdown.lastIndexOf(\n        cadencePercentages[i]\n      );\n      annotations.push({\n        drawTime: \"afterDatasetsDraw\",\n        type: \"line\",\n        mode: \"vertical\",\n        scaleID: \"x-axis-0\",\n        value: chartData.labels[lastIndex],\n        borderColor: \"#c6bcbc\",\n        borderWidth: 2\n      });\n    }\n\n    cadencePercentages = cadencePercentages.map(\n      per => `${(Number(per) * 100).toFixed(2)}%`\n    );\n\n    return (\n      <>\n        <div className=\"pipelineLabel\">Cadence</div>\n        <div className=\"chartContainermain\">\n          {/* <div className=\"chartContainer\">\n          <div className=\"row j-c-c\">\n            {cadencePercentages.map((per, index) => (\n              <div className=\"col-md-3 d-flex\" key={`${Math.random() + index}`}>\n                <p className=\"colorBox\" style={{ backgroundColor: backgroundColors[index] }}></p>\n                <span className=\"left-space\">{per}</span>\n              </div>\n            ))}\n          </div>\n        </div> */}\n          <CadenceChart chartData={chartData} annotations={annotations} />\n          <div className=\"chartContainer\">\n            <div className=\"row j-c-c\">\n              {cadencePercentages.map((per, index) => (\n                <div\n                  className=\"col-md-3 d-flex\"\n                  key={`${Math.random() + index}`}\n                >\n                  <p\n                    className=\"colorBox\"\n                    style={{ backgroundColor: backgroundColors[index] }}\n                  />\n                  <span className=\"left-space\">{per}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nexport default cadenceGraphComponent;\n"]},"metadata":{},"sourceType":"module"}