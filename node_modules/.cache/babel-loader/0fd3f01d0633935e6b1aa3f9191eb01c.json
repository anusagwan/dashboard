{"ast":null,"code":"import axios from \"axios\";\nimport { GET_QNA_FILTER, LOADER } from \"./types\";\nimport { config } from \"../../../utils/config\";\n\nvar setLoader = function setLoader(dispatch, value) {\n  var actionData = {\n    type: LOADER,\n    payload: value\n  };\n  dispatch(actionData);\n};\n\nvar handle401Error = function handle401Error(response) {\n  if (response.response && response.response.status === 401) {\n    alert(\"Session has expired. Please login again\");\n    window.location.href = \"/login\";\n    return true;\n  }\n\n  return false;\n}; // const actions = {\n//   getQnAFilters: () => {\n//     return dispatch => {\n//       return axios\n//         .post(`${config.nlpBaseUrl}/filters`)\n//         .then(res => {\n//           setLoader(dispatch, false);\n//           if (res.data.Error !== undefined && res.data.Error !== \"\") {\n//             dispatch({\n//               type: GET_QNA_FILTER,\n//               payload: res.data.Error\n//             });\n//           } else {\n//             dispatch({\n//               type: GET_QNA_FILTER,\n//               payload: res.data\n//             });\n//           }\n//         })\n//         .catch(error => {\n//           if (!handle401Error(error)) {\n//             throw error;\n//           }\n//         });\n//     };\n//   }\n// };\n// export default actions;\n\n\nexport var getQnAFilters = function getQnAFilters(params) {\n  return function (dispatch) {\n    axios.post(\"\".concat(config.nlpBaseUrl, \"/filters\")).then(function (res) {\n      setLoader(dispatch, false);\n\n      if (res.data.Error !== undefined && res.data.Error !== \"\") {\n        dispatch({\n          type: GET_QNA_FILTER,\n          payload: res.data.Error\n        });\n      } else {\n        dispatch({\n          type: GET_QNA_FILTER,\n          payload: res.data\n        });\n      }\n    }).catch(function (error) {\n      if (!handle401Error(error)) {\n        throw error;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/support/redux/actions.js"],"names":["axios","GET_QNA_FILTER","LOADER","config","setLoader","dispatch","value","actionData","type","payload","handle401Error","response","status","alert","window","location","href","getQnAFilters","params","post","nlpBaseUrl","then","res","data","Error","undefined","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,SAAvC;AACA,SAASC,MAAT,QAAuB,uBAAvB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAWC,KAAX,EAAqB;AACrC,MAAMC,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAEN,MADW;AAEjBO,IAAAA,OAAO,EAAEH;AAFQ,GAAnB;AAIAD,EAAAA,QAAQ,CAACE,UAAD,CAAR;AACD,CAND;;AAQA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AACjC,MAAIA,QAAQ,CAACA,QAAT,IAAqBA,QAAQ,CAACA,QAAT,CAAkBC,MAAlB,KAA6B,GAAtD,EAA2D;AACzDC,IAAAA,KAAK,CAAC,yCAAD,CAAL;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPD,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM;AAAA,SAAI,UAAAb,QAAQ,EAAI;AACjDL,IAAAA,KAAK,CACFmB,IADH,WACWhB,MAAM,CAACiB,UADlB,eAEGC,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXlB,MAAAA,SAAS,CAACC,QAAD,EAAW,KAAX,CAAT;;AACA,UAAIiB,GAAG,CAACC,IAAJ,CAASC,KAAT,KAAmBC,SAAnB,IAAgCH,GAAG,CAACC,IAAJ,CAASC,KAAT,KAAmB,EAAvD,EAA2D;AACzDnB,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAEP,cADC;AAEPQ,UAAAA,OAAO,EAAEa,GAAG,CAACC,IAAJ,CAASC;AAFX,SAAD,CAAR;AAID,OALD,MAKO;AACLnB,QAAAA,QAAQ,CAAC;AACPG,UAAAA,IAAI,EAAEP,cADC;AAEPQ,UAAAA,OAAO,EAAEa,GAAG,CAACC;AAFN,SAAD,CAAR;AAID;AACF,KAfH,EAgBGG,KAhBH,CAgBS,UAAAC,KAAK,EAAI;AACd,UAAI,CAACjB,cAAc,CAACiB,KAAD,CAAnB,EAA4B;AAC1B,cAAMA,KAAN;AACD;AACF,KApBH;AAqBD,GAtBkC;AAAA,CAA5B","sourcesContent":["import axios from \"axios\";\n\nimport { GET_QNA_FILTER, LOADER } from \"./types\";\nimport { config } from \"../../../utils/config\";\n\nconst setLoader = (dispatch, value) => {\n  const actionData = {\n    type: LOADER,\n    payload: value\n  };\n  dispatch(actionData);\n};\n\nconst handle401Error = response => {\n  if (response.response && response.response.status === 401) {\n    alert(\"Session has expired. Please login again\");\n    window.location.href = \"/login\";\n    return true;\n  }\n  return false;\n};\n\n// const actions = {\n//   getQnAFilters: () => {\n//     return dispatch => {\n//       return axios\n//         .post(`${config.nlpBaseUrl}/filters`)\n//         .then(res => {\n//           setLoader(dispatch, false);\n//           if (res.data.Error !== undefined && res.data.Error !== \"\") {\n//             dispatch({\n//               type: GET_QNA_FILTER,\n//               payload: res.data.Error\n//             });\n//           } else {\n//             dispatch({\n//               type: GET_QNA_FILTER,\n//               payload: res.data\n//             });\n//           }\n//         })\n//         .catch(error => {\n//           if (!handle401Error(error)) {\n//             throw error;\n//           }\n//         });\n//     };\n//   }\n// };\n\n// export default actions;\n\nexport const getQnAFilters = params => dispatch => {\n  axios\n    .post(`${config.nlpBaseUrl}/filters`)\n    .then(res => {\n      setLoader(dispatch, false);\n      if (res.data.Error !== undefined && res.data.Error !== \"\") {\n        dispatch({\n          type: GET_QNA_FILTER,\n          payload: res.data.Error\n        });\n      } else {\n        dispatch({\n          type: GET_QNA_FILTER,\n          payload: res.data\n        });\n      }\n    })\n    .catch(error => {\n      if (!handle401Error(error)) {\n        throw error;\n      }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}