{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/draftStatus/draft/coldef.js\";\nimport React from 'react';\nimport { toPercentage, toDollarWithDecimal, toUnit, toFixedToTwo } from '../../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport numeral from 'numeral';\nexport default (function () {\n  var colDef = [{\n    Header: 'MD Plan',\n    accessor: 'md_plan',\n    disableGroupBy: true,\n    width: 50,\n    align: 'left',\n    enableRowSpan: true\n  }, {\n    Header: 'Scenario',\n    accessor: 'markdown_id',\n    disableGroupBy: true,\n    enableRowSpan: true,\n    width: 50,\n    Cell: function Cell(_ref) {\n      var row = _ref.row,\n          rows = _ref.rows;\n      return row.original.scenario ? row.original.scenario : null;\n    }\n  }, {\n    // Build our expander column\n    id: 'expander',\n    // Make sure it has an ID\n    // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n    //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n    // ),\n    Header: 'Date Range',\n    width: 15,\n    Cell: function Cell(_ref2) {\n      var row = _ref2.row;\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      console.log('czseferuuuuuuu', row);\n      return row.canExpand ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), moment(row.original.start_date).format('YYYY/MM/DD'), \" -\", ' ', moment(row.original.end_date).format('YYYY/MM/DD') + '  ', row.isExpanded ? React.createElement(\"i\", {\n        class: \"fa fa-angle-down expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })) : null;\n    }\n  }, {\n    Header: 'Time Period',\n    accessor: 'week_num',\n    disableGroupBy: false,\n    isGroupBy: false,\n    width: 50,\n    Aggregated: function Aggregated(_ref3) {\n      var value = _ref3.value,\n          row = _ref3.row;\n      return \"weeks (\".concat(row.subRows.length, \")\");\n    }\n  }, {\n    Header: 'Sell through%',\n    accessor: 'sell_through',\n    disableGroupBy: true,\n    width: 50,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, row.row.original.overall_sell_through);\n    }\n  }, {\n    Header: 'Markdown %',\n    accessor: 'markdown_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'average',\n    Aggregated: function Aggregated(_ref4) {\n      var value = _ref4.value;\n      return '-';\n    }\n  }, {\n    Header: 'Margin%',\n    accessor: 'margin_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      console.log(numeral(row.row.original.overall_margin.format(0.0)), 'row.row.original.overall_margin');\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, row.row.original.overall_margin);\n    }\n  }, {\n    Header: 'Aum',\n    accessor: 'aum',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, toFixedToTwo(props));\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, row.row.original.overall_aum);\n    }\n  }, {\n    Header: 'Aur',\n    accessor: 'aur',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, toFixedToTwo(props));\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, row.row.original.overall_aur);\n    }\n  }, {\n    Header: 'Planned Units',\n    accessor: 'plannedUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, toUnit(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, row.row.original.overall_planned_units);\n    }\n  }, {\n    Header: 'Actual Units',\n    accessor: 'actualUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, toUnit(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, row.row.original.overall_units);\n    }\n  }, {\n    Header: 'Revenue',\n    accessor: 'revenue$',\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, row.row.original.overall_revenue);\n    },\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \" \", toDollarWithDecimal(props), \" \");\n    }\n  }];\n  return colDef;\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/draftStatus/draft/coldef.js"],"names":["React","toPercentage","toDollarWithDecimal","toUnit","toFixedToTwo","_","moment","numeral","colDef","Header","accessor","disableGroupBy","width","align","enableRowSpan","Cell","row","rows","original","scenario","id","console","log","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","start_date","format","end_date","isExpanded","isGroupBy","Aggregated","value","subRows","length","props","overall_sell_through","aggregate","overall_margin","overall_aum","overall_aur","overall_planned_units","overall_units","overall_revenue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toPercentage, toDollarWithDecimal, toUnit, toFixedToTwo } from '../../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport numeral from 'numeral';\n\nexport default () => {\n  const colDef = [\n    {\n      Header: 'MD Plan',\n      accessor: 'md_plan',\n      disableGroupBy: true,\n      width: 50,\n      align: 'left',\n      enableRowSpan: true,\n    },\n    {\n      Header: 'Scenario',\n      accessor: 'markdown_id',\n      disableGroupBy: true,\n      enableRowSpan: true,\n      width: 50,\n      Cell: ({ row, rows }) => (row.original.scenario ? row.original.scenario : null),\n    },\n    {\n      // Build our expander column\n      id: 'expander', // Make sure it has an ID\n      // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n      //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n      // ),\n      Header: 'Date Range',\n      width: 15,\n      Cell: ({ row }) => {\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n        // to build the toggle for expanding a row\n        console.log('czseferuuuuuuu', row);\n\n        return row.canExpand ? (\n          <span\n            {...row.getToggleRowExpandedProps({\n              style: {\n                // We can even use the row.depth property\n                // and paddingLeft to indicate the depth\n                // of the row\n                paddingLeft: `${row.depth * 2}rem`,\n              },\n            })}>\n            {moment(row.original.start_date).format('YYYY/MM/DD')} -{' '}\n            {moment(row.original.end_date).format('YYYY/MM/DD') + '  '}\n            {row.isExpanded ? (\n              <i class=\"fa fa-angle-down expanded-icon-size\" aria-hidden=\"true\"></i>\n            ) : (\n              <i class=\"fa fa-angle-right expanded-icon-size\" aria-hidden=\"true\"></i>\n            )}\n          </span>\n        ) : null;\n      },\n    },\n    {\n      Header: 'Time Period',\n      accessor: 'week_num',\n      disableGroupBy: false,\n      isGroupBy: false,\n      width: 50,\n      Aggregated: ({ value, row }) => `weeks (${row.subRows.length})`,\n    },\n    {\n      Header: 'Sell through%',\n      accessor: 'sell_through',\n      disableGroupBy: true,\n      width: 50,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_sell_through}</span>;\n      },\n    },\n    {\n      Header: 'Markdown %',\n      accessor: 'markdown_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'average',\n      Aggregated: ({ value }) => '-',\n    },\n    {\n      Header: 'Margin%',\n      accessor: 'margin_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      Aggregated: (row) => {\n        console.log(\n          numeral(row.row.original.overall_margin.format(0.0)),\n          'row.row.original.overall_margin'\n        );\n        return <span>{row.row.original.overall_margin}</span>;\n      },\n    },\n    {\n      Header: 'Aum',\n      accessor: 'aum',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwo(props)}</div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_aum}</span>;\n      },\n    },\n    {\n      Header: 'Aur',\n      accessor: 'aur',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwo(props)}</div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_aur}</span>;\n      },\n    },\n    {\n      Header: 'Planned Units',\n      accessor: 'plannedUnits',\n      Cell: (props) => <div>{toUnit(props)}</div>,\n\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_planned_units}</span>;\n      },\n    },\n    {\n      Header: 'Actual Units',\n      accessor: 'actualUnits',\n      Cell: (props) => <div>{toUnit(props)}</div>,\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_units}</span>;\n      },\n    },\n    {\n      Header: 'Revenue',\n      accessor: 'revenue$',\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_revenue}</span>;\n      },\n      disableGroupBy: true,\n      Cell: (props) => <div> {toDollarWithDecimal(props)} </div>,\n    },\n  ];\n  return colDef;\n};\n"]},"metadata":{},"sourceType":"module"}