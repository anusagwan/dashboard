{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from '../utils/axios';\nimport { config } from '../utils/config';\nimport { toast } from 'react-toastify';\nvar storeConfigActions = {\n  onResetStyleColorTable: function onResetStyleColorTable() {\n    return function (dispatch) {\n      dispatch({\n        type: 'RESET_STORE_CONFIG'\n      });\n    };\n  },\n  // fetchStoreGroups: () => {\n  //   return (dispatch) => {\n  //     dispatch({\n  //       type: 'LOADER_STATE',\n  //       payload: {\n  //         status: true,\n  //       },\n  //     });\n  //     axios({\n  //       url: `${config.createMarkdownURL}/getCustomStoreGroup/`,\n  //       method: 'GET',\n  //     })\n  //       .then((resp) => {\n  //         dispatch({\n  //           type: 'SET_STORE_GROUPS',\n  //           payload: resp.data.data,\n  //         });\n  //         dispatch({\n  //           type: 'LOADER_STATE',\n  //           payload: {\n  //             status: false,\n  //           },\n  //         });\n  //       })\n  //       .catch((err) => {\n  //         dispatch({\n  //           type: 'LOADER_STATE',\n  //           payload: {\n  //             status: false,\n  //           },\n  //         });\n  //       });\n  //   };\n  // },\n  getStoreGroupTableData: function getStoreGroupTableData(reqObj) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(dispatch) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch({\n                    type: 'LOADER_STATE',\n                    payload: {\n                      status: true\n                    }\n                  });\n                  _context.next = 3;\n                  return axios({\n                    url: \"\".concat(config.createMarkdownURL, \"/getStores/\"),\n                    method: 'POST',\n                    data: reqObj\n                  }).then(function (resp) {\n                    if (reqObj) {\n                      dispatch({\n                        type: 'CURRENT_STORE_GROUP_TABLE_DATA',\n                        payload: resp.data.data\n                      });\n                    } else {\n                      dispatch({\n                        type: 'SET_STORE_GROUP_TABLE_DATA',\n                        payload: resp.data.data\n                      });\n                    }\n\n                    dispatch({\n                      type: 'LOADER_STATE',\n                      payload: {\n                        status: false\n                      }\n                    });\n                    return resp && resp.data && resp.data.data ? resp.data.data : [];\n                  }).catch(function (err) {\n                    dispatch({\n                      type: 'LOADER_STATE',\n                      payload: {\n                        status: false\n                      }\n                    });\n                    return [];\n                  });\n\n                case 3:\n                  res = _context.sent;\n                  return _context.abrupt(\"return\", res);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  createStoreGroup: function createStoreGroup(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      return axios({\n        url: \"\".concat(config.createMarkdownURL, \"/createCustomStoreGroup/\"),\n        method: 'POST',\n        data: reqObj\n      }).then(function (resp) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n\n        if (!resp.data.status) {\n          toast.error('Something went wrong! Please try again.', {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n          return false;\n        } else {\n          toast.success('Store Group Created Successfully', {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n          return true;\n        }\n      }).catch(function (err) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        return false;\n      });\n    };\n  },\n  editStoreGroup: function editStoreGroup(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      return axios({\n        url: \"\".concat(config.createMarkdownURL, \"/updateCustomStores/\"),\n        method: 'POST',\n        data: reqObj\n      }).then(function (resp) {\n        if (!resp.data.status) {\n          toast.error('Something went wrong! Please try again.', {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n        } else if (resp.data.create_status == true) {\n          toast.success('Custom Style Group Updated Successfully', {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n        }\n\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        return resp.data;\n      }).catch(function (err) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      });\n    };\n  }\n};\nexport default storeConfigActions;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/actions/storeConfigActions.js"],"names":["axios","config","toast","storeConfigActions","onResetStyleColorTable","dispatch","type","getStoreGroupTableData","reqObj","payload","status","url","createMarkdownURL","method","data","then","resp","catch","err","res","createStoreGroup","error","autoClose","hideProgressBar","success","editStoreGroup","create_status"],"mappings":"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","sourcesContent":["import axios from '../utils/axios';\nimport { config } from '../utils/config';\nimport { toast } from 'react-toastify';\n\nconst storeConfigActions = {\n  onResetStyleColorTable: () => {\n    return (dispatch) => {\n      dispatch({\n        type: 'RESET_STORE_CONFIG',\n      });\n    };\n  },\n  // fetchStoreGroups: () => {\n  //   return (dispatch) => {\n  //     dispatch({\n  //       type: 'LOADER_STATE',\n  //       payload: {\n  //         status: true,\n  //       },\n  //     });\n  //     axios({\n  //       url: `${config.createMarkdownURL}/getCustomStoreGroup/`,\n  //       method: 'GET',\n  //     })\n  //       .then((resp) => {\n  //         dispatch({\n  //           type: 'SET_STORE_GROUPS',\n  //           payload: resp.data.data,\n  //         });\n  //         dispatch({\n  //           type: 'LOADER_STATE',\n  //           payload: {\n  //             status: false,\n  //           },\n  //         });\n  //       })\n  //       .catch((err) => {\n  //         dispatch({\n  //           type: 'LOADER_STATE',\n  //           payload: {\n  //             status: false,\n  //           },\n  //         });\n  //       });\n  //   };\n  // },\n  getStoreGroupTableData: (reqObj) => {\n    return async (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      let res = await axios({\n        url: `${config.createMarkdownURL}/getStores/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          if (reqObj) {\n            dispatch({\n              type: 'CURRENT_STORE_GROUP_TABLE_DATA',\n              payload: resp.data.data,\n            });\n          } else {\n            dispatch({\n              type: 'SET_STORE_GROUP_TABLE_DATA',\n              payload: resp.data.data,\n            });\n          }\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return resp && resp.data && resp.data.data ? resp.data.data : [];\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return [];\n        });\n      return res;\n    };\n  },\n  createStoreGroup: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      return axios({\n        url: `${config.createMarkdownURL}/createCustomStoreGroup/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          if (!resp.data.status) {\n            toast.error('Something went wrong! Please try again.', {\n              autoClose: 15000,\n              hideProgressBar: true,\n            });\n            return false;\n          } else {\n            toast.success('Store Group Created Successfully', {\n              autoClose: 15000,\n              hideProgressBar: true,\n            });\n            return true;\n          }\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return false;\n        });\n    };\n  },\n  editStoreGroup: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      return axios({\n        url: `${config.createMarkdownURL}/updateCustomStores/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          if (!resp.data.status) {\n            toast.error('Something went wrong! Please try again.', {\n              autoClose: 15000,\n              hideProgressBar: true,\n            });\n          } else if (resp.data.create_status == true) {\n            toast.success('Custom Style Group Updated Successfully', {\n              autoClose: 15000,\n              hideProgressBar: true,\n            });\n          }\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return resp.data;\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        });\n    };\n  },\n};\n\nexport default storeConfigActions;\n"]},"metadata":{},"sourceType":"module"}