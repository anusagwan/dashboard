{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/draftStatus/draft/coldef.js\";\nimport React from 'react';\nimport { toPercentage } from '../../../helper/formatter';\nimport IndeterminateCheckbox from '../../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default (function () {\n  var colDef = [{\n    Header: 'MD Plan',\n    accessor: 'md_plan',\n    disableGroupBy: true,\n    width: 50,\n    align: 'left',\n    enableRowSpan: true\n  }, {\n    Header: 'Scenario',\n    accessor: 'scenario',\n    disableGroupBy: true,\n    enableRowSpan: true,\n    width: 50\n  }, {\n    // Build our expander column\n    id: 'expander',\n    // Make sure it has an ID\n    // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n    //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n    // ),\n    Header: 'Date Range',\n    width: 15,\n    Cell: function Cell(_ref) {\n      var row = _ref.row;\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      console.log('czseferuuuuuuu', row);\n      return row.canExpand ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), moment(row.original.start_date).format('YYYY/MM/DD'), \" -\", ' ', moment(row.original.end_date).format('YYYY/MM/DD') + '  ', row.isExpanded ? React.createElement(\"i\", {\n        class: \"fa fa-angle-down expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })) : null;\n    }\n  }, {\n    Header: 'Time Period',\n    accessor: 'week_num',\n    disableGroupBy: false,\n    isGroupBy: false,\n    width: 50,\n    Aggregated: function Aggregated(_ref2) {\n      var value = _ref2.value,\n          row = _ref2.row;\n      return \"weeks (\".concat(row.subRows.length, \")\");\n    }\n  }, {\n    Header: 'Sell through%',\n    accessor: 'sell_through',\n    disableGroupBy: true,\n    width: 50,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, row.row.original.overall_sell_through);\n    }\n  }, {\n    Header: 'Markdown %',\n    accessor: 'markdown_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'average',\n    Aggregated: function Aggregated(_ref3) {\n      var value = _ref3.value;\n      return \"\".concat(value);\n    }\n  }, {\n    Header: 'Margin%',\n    accessor: 'margin_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, row.row.original.overall_margin);\n    }\n  }, {\n    Header: 'Aum',\n    accessor: 'aum',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, toFixedToTwo(props));\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, row.row.original.overall_aum);\n    }\n  }, {\n    Header: 'Aur',\n    accessor: 'aur',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, toFixedToTwo(props));\n    },\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, row.row.original.overall_aur);\n    }\n  }, {\n    Header: 'Planned Units',\n    accessor: 'plannedUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, toUnit(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, row.row.original.overall_planned_units);\n    }\n  }, {\n    Header: 'Actual Units',\n    accessor: 'actualUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, toUnit(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, row.row.original.overall_units);\n    }\n  }, {\n    Header: 'Revenue',\n    accessor: 'revenue$',\n    Aggregated: function Aggregated(row) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, row.row.original.overall_revenue);\n    },\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \" \", toDollarWithDecimal(props), \" \");\n    }\n  }, {\n    id: 'selection',\n    // Make this column a groupByBoundary. This ensures that groupBy columns\n    // are placed after it\n    groupByBoundary: true,\n    // The header can use the table's getToggleAllRowsSelectedProps method\n    // to render a checkbox\n    Header: 'Actions',\n    // The cell can use the individual row's getToggleRowSelectedProps method\n    // to the render a checkbox\n    Cell: function Cell(props) {\n      var row = props.row,\n          rows = props.rows;\n\n      var mdPlan = row.values.md_plan,\n          mainGrp = _.find(rows, {\n        isSelected: true,\n        values: {\n          md_plan: mdPlan\n        }\n      }),\n          checkboxDisabled = mainGrp && !row.isSelected ? true : false;\n\n      return row.canExpand ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(IndeterminateCheckbox, Object.assign({\n        row: row.id,\n        disabled: checkboxDisabled\n      }, row.getToggleRowSelectedProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }))) : null;\n    }\n  }];\n  return colDef;\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/draftStatus/draft/coldef.js"],"names":["React","toPercentage","IndeterminateCheckbox","_","moment","colDef","Header","accessor","disableGroupBy","width","align","enableRowSpan","id","Cell","row","console","log","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","original","start_date","format","end_date","isExpanded","isGroupBy","Aggregated","value","subRows","length","props","overall_sell_through","aggregate","overall_margin","toFixedToTwo","overall_aum","overall_aur","toUnit","overall_planned_units","overall_units","overall_revenue","toDollarWithDecimal","groupByBoundary","rows","mdPlan","values","md_plan","mainGrp","find","isSelected","checkboxDisabled","getToggleRowSelectedProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,qBAAP,MAAkC,wDAAlC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,gBAAe,YAAM;AACnB,MAAMC,MAAM,GAAG,CACb;AACEC,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,SAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEC,IAAAA,KAAK,EAAE,EAJT;AAKEC,IAAAA,KAAK,EAAE,MALT;AAMEC,IAAAA,aAAa,EAAE;AANjB,GADa,EASb;AACEL,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEG,IAAAA,aAAa,EAAE,IAJjB;AAKEF,IAAAA,KAAK,EAAE;AALT,GATa,EAgBb;AACE;AACAG,IAAAA,EAAE,EAAE,UAFN;AAEkB;AAChB;AACA;AACA;AACAN,IAAAA,MAAM,EAAE,YANV;AAOEG,IAAAA,KAAK,EAAE,EAPT;AAQEI,IAAAA,IAAI,EAAE,oBAAa;AAAA,UAAVC,GAAU,QAAVA,GAAU;AACjB;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAA9B;AAEA,aAAOA,GAAG,CAACG,SAAJ,GACL,8CACMH,GAAG,CAACI,yBAAJ,CAA8B;AAChCC,QAAAA,KAAK,EAAE;AACL;AACA;AACA;AACAC,UAAAA,WAAW,YAAKN,GAAG,CAACO,KAAJ,GAAY,CAAjB;AAJN;AADyB,OAA9B,CADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASGjB,MAAM,CAACU,GAAG,CAACQ,QAAJ,CAAaC,UAAd,CAAN,CAAgCC,MAAhC,CAAuC,YAAvC,CATH,QAS2D,GAT3D,EAUGpB,MAAM,CAACU,GAAG,CAACQ,QAAJ,CAAaG,QAAd,CAAN,CAA8BD,MAA9B,CAAqC,YAArC,IAAqD,IAVxD,EAWGV,GAAG,CAACY,UAAJ,GACC;AAAG,QAAA,KAAK,EAAC,qCAAT;AAA+C,uBAAY,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAGC;AAAG,QAAA,KAAK,EAAC,sCAAT;AAAgD,uBAAY,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdJ,CADK,GAkBH,IAlBJ;AAmBD;AAhCH,GAhBa,EAkDb;AACEpB,IAAAA,MAAM,EAAE,aADV;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,cAAc,EAAE,KAHlB;AAIEmB,IAAAA,SAAS,EAAE,KAJb;AAKElB,IAAAA,KAAK,EAAE,EALT;AAMEmB,IAAAA,UAAU,EAAE;AAAA,UAAGC,KAAH,SAAGA,KAAH;AAAA,UAAUf,GAAV,SAAUA,GAAV;AAAA,8BAA8BA,GAAG,CAACgB,OAAJ,CAAYC,MAA1C;AAAA;AANd,GAlDa,EA0Db;AACEzB,IAAAA,MAAM,EAAE,eADV;AAEEC,IAAAA,QAAQ,EAAE,cAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEC,IAAAA,KAAK,EAAE,EAJT;AAKEI,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAO/B,YAAY,CAAC+B,KAAD,CAAnB,MAAX;AAAA,KALR;AAMEJ,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBW,oBAAxB,CAAP;AACD;AARH,GA1Da,EAoEb;AACE3B,IAAAA,MAAM,EAAE,YADV;AAEEC,IAAAA,QAAQ,EAAE,eAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEC,IAAAA,KAAK,EAAE,EAJT;AAKEI,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAO/B,YAAY,CAAC+B,KAAD,CAAnB,MAAX;AAAA,KALR;AAMEE,IAAAA,SAAS,EAAE,SANb;AAOEN,IAAAA,UAAU,EAAE;AAAA,UAAGC,KAAH,SAAGA,KAAH;AAAA,uBAAkBA,KAAlB;AAAA;AAPd,GApEa,EA6Eb;AACEvB,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,aAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEC,IAAAA,KAAK,EAAE,EAJT;AAKEI,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAO/B,YAAY,CAAC+B,KAAD,CAAnB,MAAX;AAAA,KALR;AAMEJ,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBa,cAAxB,CAAP;AACD;AARH,GA7Ea,EAuFb;AACE7B,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEK,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMI,YAAY,CAACJ,KAAD,CAAlB,CAAX;AAAA,KAJR;AAKEJ,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBe,WAAxB,CAAP;AACD;AAPH,GAvFa,EAgGb;AACE/B,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,cAAc,EAAE,IAHlB;AAIEK,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMI,YAAY,CAACJ,KAAD,CAAlB,CAAX;AAAA,KAJR;AAKEJ,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBgB,WAAxB,CAAP;AACD;AAPH,GAhGa,EAyGb;AACEhC,IAAAA,MAAM,EAAE,eADV;AAEEC,IAAAA,QAAQ,EAAE,cAFZ;AAGEM,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMO,MAAM,CAACP,KAAD,CAAZ,CAAX;AAAA,KAHR;AAKExB,IAAAA,cAAc,EAAE,IALlB;AAMEoB,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBkB,qBAAxB,CAAP;AACD;AARH,GAzGa,EAmHb;AACElC,IAAAA,MAAM,EAAE,cADV;AAEEC,IAAAA,QAAQ,EAAE,aAFZ;AAGEM,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMO,MAAM,CAACP,KAAD,CAAZ,CAAX;AAAA,KAHR;AAIExB,IAAAA,cAAc,EAAE,IAJlB;AAKEoB,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBmB,aAAxB,CAAP;AACD;AAPH,GAnHa,EA4Hb;AACEnC,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEqB,IAAAA,UAAU,EAAE,oBAACd,GAAD,EAAS;AACnB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,GAAG,CAACA,GAAJ,CAAQQ,QAAR,CAAiBoB,eAAxB,CAAP;AACD,KALH;AAMElC,IAAAA,cAAc,EAAE,IANlB;AAOEK,IAAAA,IAAI,EAAE,cAACmB,KAAD;AAAA,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAOW,mBAAmB,CAACX,KAAD,CAA1B,MAAX;AAAA;AAPR,GA5Ha,EAqIb;AACEpB,IAAAA,EAAE,EAAE,WADN;AAEE;AACA;AACAgC,IAAAA,eAAe,EAAE,IAJnB;AAKE;AACA;AACAtC,IAAAA,MAAM,EAAE,SAPV;AAQE;AACA;AACAO,IAAAA,IAAI,EAAE,cAACmB,KAAD,EAAW;AAAA,UACTlB,GADS,GACKkB,KADL,CACTlB,GADS;AAAA,UACJ+B,IADI,GACKb,KADL,CACJa,IADI;;AAEf,UAAIC,MAAM,GAAGhC,GAAG,CAACiC,MAAJ,CAAWC,OAAxB;AAAA,UACEC,OAAO,GAAG9C,CAAC,CAAC+C,IAAF,CAAOL,IAAP,EAAa;AAAEM,QAAAA,UAAU,EAAE,IAAd;AAAoBJ,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAEF;AAAX;AAA5B,OAAb,CADZ;AAAA,UAEEM,gBAAgB,GAAGH,OAAO,IAAI,CAACnC,GAAG,CAACqC,UAAhB,GAA6B,IAA7B,GAAoC,KAFzD;;AAIA,aAAOrC,GAAG,CAACG,SAAJ,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,qBAAD;AACE,QAAA,GAAG,EAAEH,GAAG,CAACF,EADX;AAEE,QAAA,QAAQ,EAAEwC;AAFZ,SAGMtC,GAAG,CAACuC,yBAAJ,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADK,GAQH,IARJ;AASD;AAzBH,GArIa,CAAf;AAiKA,SAAOhD,MAAP;AACD,CAnKD","sourcesContent":["import React from 'react';\nimport { toPercentage } from '../../../helper/formatter';\nimport IndeterminateCheckbox from '../../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nexport default () => {\n  const colDef = [\n    {\n      Header: 'MD Plan',\n      accessor: 'md_plan',\n      disableGroupBy: true,\n      width: 50,\n      align: 'left',\n      enableRowSpan: true,\n    },\n    {\n      Header: 'Scenario',\n      accessor: 'scenario',\n      disableGroupBy: true,\n      enableRowSpan: true,\n      width: 50,\n    },\n    {\n      // Build our expander column\n      id: 'expander', // Make sure it has an ID\n      // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n      //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n      // ),\n      Header: 'Date Range',\n      width: 15,\n      Cell: ({ row }) => {\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n        // to build the toggle for expanding a row\n        console.log('czseferuuuuuuu', row);\n\n        return row.canExpand ? (\n          <span\n            {...row.getToggleRowExpandedProps({\n              style: {\n                // We can even use the row.depth property\n                // and paddingLeft to indicate the depth\n                // of the row\n                paddingLeft: `${row.depth * 2}rem`,\n              },\n            })}>\n            {moment(row.original.start_date).format('YYYY/MM/DD')} -{' '}\n            {moment(row.original.end_date).format('YYYY/MM/DD') + '  '}\n            {row.isExpanded ? (\n              <i class=\"fa fa-angle-down expanded-icon-size\" aria-hidden=\"true\"></i>\n            ) : (\n              <i class=\"fa fa-angle-right expanded-icon-size\" aria-hidden=\"true\"></i>\n            )}\n          </span>\n        ) : null;\n      },\n    },\n    {\n      Header: 'Time Period',\n      accessor: 'week_num',\n      disableGroupBy: false,\n      isGroupBy: false,\n      width: 50,\n      Aggregated: ({ value, row }) => `weeks (${row.subRows.length})`,\n    },\n    {\n      Header: 'Sell through%',\n      accessor: 'sell_through',\n      disableGroupBy: true,\n      width: 50,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_sell_through}</span>;\n      },\n    },\n    {\n      Header: 'Markdown %',\n      accessor: 'markdown_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'average',\n      Aggregated: ({ value }) => `${value}`,\n    },\n    {\n      Header: 'Margin%',\n      accessor: 'margin_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_margin}</span>;\n      },\n    },\n    {\n      Header: 'Aum',\n      accessor: 'aum',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwo(props)}</div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_aum}</span>;\n      },\n    },\n    {\n      Header: 'Aur',\n      accessor: 'aur',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwo(props)}</div>,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_aur}</span>;\n      },\n    },\n    {\n      Header: 'Planned Units',\n      accessor: 'plannedUnits',\n      Cell: (props) => <div>{toUnit(props)}</div>,\n\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_planned_units}</span>;\n      },\n    },\n    {\n      Header: 'Actual Units',\n      accessor: 'actualUnits',\n      Cell: (props) => <div>{toUnit(props)}</div>,\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_units}</span>;\n      },\n    },\n    {\n      Header: 'Revenue',\n      accessor: 'revenue$',\n      Aggregated: (row) => {\n        return <span>{row.row.original.overall_revenue}</span>;\n      },\n      disableGroupBy: true,\n      Cell: (props) => <div> {toDollarWithDecimal(props)} </div>,\n    },\n    {\n      id: 'selection',\n      // Make this column a groupByBoundary. This ensures that groupBy columns\n      // are placed after it\n      groupByBoundary: true,\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: 'Actions',\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: (props) => {\n        let { row, rows } = props;\n        let mdPlan = row.values.md_plan,\n          mainGrp = _.find(rows, { isSelected: true, values: { md_plan: mdPlan } }),\n          checkboxDisabled = mainGrp && !row.isSelected ? true : false;\n\n        return row.canExpand ? (\n          <div>\n            <IndeterminateCheckbox\n              row={row.id}\n              disabled={checkboxDisabled}\n              {...row.getToggleRowSelectedProps()}\n            />\n          </div>\n        ) : null;\n      },\n    },\n  ];\n  return colDef;\n};\n"]},"metadata":{},"sourceType":"module"}