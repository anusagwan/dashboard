{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { config } from '../utils/config'; // import setAuthToken from '../utils/setAuthToken';\n\nimport { GET_ERRORS, SET_CURRENT_USER, LOGOUT_CURRENT_USER, SOME_ACTION } from './types';\nimport axios from 'axios';\nimport ReactGA from 'react-ga'; // Login - Post User Token\n\nexport var loginUser = function loginUser(userData) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var clientIp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get('https://api.ipify.org?format=json') //https://api.ipify.org/?format=jsonp&callback=getIP\n                .then(function (response) {\n                  return response.data;\n                }).catch(function (err) {\n                  return console.error('Problem fetching my IP', err);\n                });\n\n              case 2:\n                clientIp = _context.sent;\n                userData.client_ip = clientIp ? clientIp.ip : null;\n                axios // .post(`${config.loginUrl}`, userData)\n                .post(\"\".concat(config.createMarkdownURL, \"/login/\"), userData).then(function (res) {\n                  // Save to localStorage\n                  var _res$data = res.data,\n                      access = _res$data.access,\n                      user = _res$data.user; // Set token to ls\n                  // localStorage.setItem('id', id);\n\n                  localStorage.setItem('name', user); // localStorage.setItem('token', token);\n\n                  localStorage.setItem('token', access);\n                  ReactGA.set({\n                    userId: user\n                  });\n                  ReactGA.pageview(window.location.pathname + window.location.search); // Set token to Auth header \n                  // setAuthToken(access);\n\n                  dispatch({\n                    type: SET_CURRENT_USER,\n                    payload: res.data\n                  });\n                }).catch(function (err) {\n                  dispatch({\n                    type: GET_ERRORS,\n                    payload: err.message\n                  });\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; // Login - Post User Token\n\nexport var hidrateUser = function hidrateUser() {\n  return function (dispatch) {\n    if (localStorage.getItem('token') && localStorage.getItem('user')) {\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: {\n          token: localStorage.getItem('token'),\n          user: JSON.parse(localStorage.getItem('user'))\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_CURRENT_USER\n      });\n    }\n  };\n};\nexport var logoutUser = function logoutUser(token) {\n  return function (dispatch) {\n    localStorage.removeItem('token', token); // setAuthToken(false);\n\n    dispatch({\n      type: LOGOUT_CURRENT_USER\n    });\n  };\n};\nexport var someAction = function someAction(data) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: SOME_ACTION,\n      pathname: getState().router.pathname\n    });\n  };\n};","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/actions/auth.js"],"names":["config","GET_ERRORS","SET_CURRENT_USER","LOGOUT_CURRENT_USER","SOME_ACTION","axios","ReactGA","loginUser","userData","dispatch","get","then","response","data","catch","err","console","error","clientIp","client_ip","ip","post","createMarkdownURL","res","access","user","localStorage","setItem","set","userId","pageview","window","location","pathname","search","type","payload","message","hidrateUser","getItem","token","JSON","parse","logoutUser","removeItem","someAction","getState","router"],"mappings":"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","sourcesContent":["import { config } from '../utils/config';\n// import setAuthToken from '../utils/setAuthToken';\nimport { GET_ERRORS, SET_CURRENT_USER, LOGOUT_CURRENT_USER, SOME_ACTION } from './types';\nimport axios from 'axios';\nimport ReactGA from 'react-ga';\n\n// Login - Post User Token\nexport const loginUser = (userData) => async (dispatch) => {\n  let clientIp = await axios\n    .get('https://api.ipify.org?format=json') //https://api.ipify.org/?format=jsonp&callback=getIP\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => console.error('Problem fetching my IP', err));\n\n  userData.client_ip = clientIp ? clientIp.ip : null;\n\n  axios\n    // .post(`${config.loginUrl}`, userData)\n    .post(`${config.createMarkdownURL}/login/`, userData)\n    .then((res) => {\n      // Save to localStorage\n      const { access, user } = res.data;\n\n      // Set token to ls\n      // localStorage.setItem('id', id);\n      localStorage.setItem('name', user);\n      // localStorage.setItem('token', token);\n\n      localStorage.setItem('token', access);\n      ReactGA.set({ userId: user })\n      ReactGA.pageview(window.location.pathname + window.location.search);\n      // Set token to Auth header \n      // setAuthToken(access);\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.message,\n      });\n    });\n};\n\n// Login - Post User Token\nexport const hidrateUser = () => (dispatch) => {\n  if (localStorage.getItem('token') && localStorage.getItem('user')) {\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: {\n        token: localStorage.getItem('token'),\n        user: JSON.parse(localStorage.getItem('user')),\n      },\n    });\n  } else {\n    dispatch({\n      type: LOGOUT_CURRENT_USER,\n    });\n  }\n};\n\nexport const logoutUser = (token) => (dispatch) => {\n  localStorage.removeItem('token', token);\n  // setAuthToken(false);\n  dispatch({\n    type: LOGOUT_CURRENT_USER,\n  });\n};\n\nexport const someAction = (data) => (dispatch, getState) => {\n  dispatch({\n    type: SOME_ACTION,\n    pathname: getState().router.pathname,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}