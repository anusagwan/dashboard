{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/Finalize/FinalizeMarkdown.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Filters from '../../services/filters';\nimport './finalizeMarkdownStyle.css';\nimport styled from 'styled-components';\nimport LoadingOverlay from '../../utils/Loader';\nimport { toast } from 'react-toastify';\nimport NoData from '../noTableData';\nimport FinalizeAction from '../../actions/draftStausFinalizeAction'; // import Coldef from './coldef';\n\nimport Coldef from '../draftStatus/draft/coldef';\nimport _ from 'lodash';\nimport cloneDeep from 'clone-deep';\nimport DataTable from '../../services/reactTable';\nimport ColumnSelection from '../columnSelection';\nimport AlertWarning from '../../utils/AlertMessage/alertDanger';\nimport AlertSuccess from '../../utils/AlertMessage/alertSuccess';\nimport moment from 'moment';\nimport card1Image from '../../images/card1Image.png';\nimport card2Image from '../../images/card2Image.png';\nimport card3Image from '../../images/card3Image.png';\nimport card4Image from '../../images/card4Image.png';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\nimport { toPercentage, toDollarWithlDraft, toUnitDraft } from '../../helper/formatter';\nimport Switch from '../../services/toggleSwitch';\nimport EditMDModal from '../editMDModal';\n\nfunction FormatterStyling(props, value, val) {\n  var val1 = val || val == 0 ? val : props.value;\n  var props1 = val || val == 0 ? {\n    value: val\n  } : props;\n\n  if (value == 'pvh_units' || value == 'markdown_units' || value == 'overall_pvh_units' || value == 'overall_markdown_units') {\n    return val1 || val1 == 0 ? toUnitDraft(props1) : '-';\n  } else if (value == 'margin_perc' || value == 'overall_margin_perc') {\n    return val1 || val1 == 0 ? toPercentage(props1) : '-';\n  } else if (value == 'revenue$' || value == 'aur' || value == 'margin$' || value == 'aum' || value == 'overall_aum' || value == 'overall_revenue$' || value == 'overall_aur' || value == 'overall_margin$') {\n    return val1 || val1 == 0 ? toDollarWithlDraft(props1) : '-';\n  }\n\n  return '-';\n}\n\nvar FinalizeMarkdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FinalizeMarkdown, _Component);\n\n  function FinalizeMarkdown(_props) {\n    var _this;\n\n    _classCallCheck(this, FinalizeMarkdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FinalizeMarkdown).call(this, _props));\n\n    _this.updateTableData = function (isEdited) {\n      var finalizeMarkdownData = _this.props.finalizeMarkdownData;\n\n      var newTableData = _.filter(finalizeMarkdownData, function (item) {\n        return item.is_edited === isEdited;\n      });\n\n      if (!_.isEqual(_this.state.tableData, newTableData)) _this.setState({\n        tableData: newTableData\n      });\n    };\n\n    _this.findStatusColor = function (status, color) {\n      switch (status) {\n        case 'high':\n          return color.high;\n\n        case 'medium':\n          return color.medium;\n\n        case 'low':\n          return color.low;\n\n        default:\n          break;\n      }\n    };\n\n    _this.bgmCol = function (cellInfo) {\n      if (cellInfo.column.id === 'md_status') var status = cellInfo.row.original.md_status;\n      var bgCol = {\n        high: '#F8E8E8',\n        medium: '#FCF3D1',\n        low: '#E8F8F5'\n      };\n      return _this.findStatusColor(status, bgCol);\n    };\n\n    _this.txtCol = function (cellInfo) {\n      if (cellInfo.column.id === 'md_status') var status = cellInfo.row.original.md_status;\n      var txtCol = {\n        high: '#D38485',\n        medium: '#F0C53A',\n        low: '#66CFBA'\n      };\n      return _this.findStatusColor(status, txtCol);\n    };\n\n    _this.sendForReject = function () {\n      var msg = [];\n      var payload = {\n        markdown_data: _this.state.selectedRows.map(function (item, i) {\n          var arrLength = _this.state.selectedRows.length;\n          var msgStr = \"Scenario '\".concat(item.scenario, \"' of Plan '\").concat(item.md_plan, \"'\").concat(i === arrLength - 2 ? ' and ' : i === arrLength - 1 ? '' : ', ');\n          msg.push(msgStr);\n          return {\n            id: item.markdown_id,\n            scenario: item.scenario\n          };\n        }),\n        update_status: 'rejected'\n      };\n\n      _this.props.sendForApproval(payload).then(function (resp) {\n        if (resp && resp.data.status == true) {\n          var successMsg = \"\".concat(msg.join(''), \" has been Rejected\");\n          toast.info(successMsg, {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n\n          _this.props.getMarkdowns({\n            filters: {\n              hierarchy1: _this.props.selectedHierarchy1,\n              hierarchy2: _this.props.selectedHierarchy2,\n              hierarchy3: _this.props.selectedHierarchy3,\n              hierarchy4: _this.props.selectedHierarchy4,\n              hierarchy5: _this.props.selectedHierarchy5,\n              season: _this.props.selectedSeason,\n              clearance: _this.props.selectedClearance,\n              matrix: _this.props.selectedMatrix,\n              exclusionList: _this.props.selectedExclusionList,\n              styleColor: _this.props.selectedStyleColor,\n              country: _this.props.selectedCountry,\n              storeCluster: _this.props.selectedStoreCluster,\n              store: _this.props.selectedStore,\n              channel: _this.props.selectedChannel,\n              customStyleGroup: _this.props.selectedCustomStyleGroup,\n              customStoreGroup: _this.props.selectedCustomStoreGroup,\n              tiers: _this.props.selectedStores\n            },\n            startDate: _this.props.startDate ? moment(_this.props.startDate).format('YYYY-MM-DD') : null,\n            endDate: _this.props.endDate ? moment(_this.props.endDate).format('YYYY-MM-DD') : null,\n            status: 'pending'\n          });\n\n          _this.setState({\n            selectedRows: []\n          });\n        }\n      }).catch(function (err) {\n        toast.error(err.message, {\n          autoClose: 15000,\n          hideProgressBar: true\n        });\n      });\n    };\n\n    _this.sendForApprove = function () {\n      var msg = [];\n      var payload = {\n        markdown_data: _this.state.selectedRows.map(function (item, i) {\n          var arrLength = _this.state.selectedRows.length;\n          var msgStr = \"Scenario '\".concat(item.scenario, \"' of Plan '\").concat(item.md_plan, \"'\").concat(i === arrLength - 2 ? ' and ' : i === arrLength - 1 ? '' : ', ');\n          msg.push(msgStr);\n          return {\n            id: item.markdown_id,\n            scenario: item.scenario\n          };\n        }),\n        update_status: 'approved'\n      };\n\n      _this.props.sendForApproval(payload).then(function (resp) {\n        if (resp && resp.data.status == true) {\n          var successMsg = \"\".concat(msg.join(''), \" has been Finalized Successfully\");\n          toast.info(successMsg, {\n            autoClose: 15000,\n            hideProgressBar: true\n          });\n\n          _this.props.getMarkdowns({\n            filters: {\n              hierarchy1: _this.props.selectedHierarchy1,\n              hierarchy2: _this.props.selectedHierarchy2,\n              hierarchy3: _this.props.selectedHierarchy3,\n              hierarchy4: _this.props.selectedHierarchy4,\n              hierarchy5: _this.props.selectedHierarchy5,\n              hierarchy6: _this.props.selectedHierarchy6,\n              hierarchy7: _this.props.selectedHierarchy7,\n              hierarchy8: _this.props.selectedHierarchy8,\n              season: _this.props.selectedSeason,\n              clearance: _this.props.selectedClearance,\n              matrix: _this.props.selectedMatrix,\n              exclusionList: _this.props.selectedExclusionList,\n              styleColor: _this.props.selectedStyleColor,\n              country: _this.props.selectedCountry,\n              storeCluster: _this.props.selectedStoreCluster,\n              store: _this.props.selectedStore,\n              channel: _this.props.selectedChannel,\n              customStyleGroup: _this.props.selectedCustomStyleGroup,\n              customStoreGroup: _this.props.selectedCustomStoreGroup,\n              tiers: _this.props.selectedStores\n            },\n            startDate: _this.props.startDate ? moment(_this.props.startDate).format('YYYY-MM-DD') : null,\n            endDate: _this.props.endDate ? moment(_this.props.endDate).format('YYYY-MM-DD') : null,\n            status: 'pending'\n          });\n\n          _this.setState({\n            selectedRows: []\n          });\n        }\n      }).catch(function (err) {\n        toast.error(err.message, {\n          autoClose: 15000,\n          hideProgressBar: true\n        });\n      });\n    };\n\n    _this.onActionSelection = function (rowData) {\n      var selectedRows = _this.state.selectedRows;\n\n      var foundEle = _.find(selectedRows, {\n        markdown_id: rowData.original.markdown_id\n      });\n\n      if (foundEle) {\n        _.remove(selectedRows, function (item) {\n          return item.markdown_id === rowData.original.markdown_id;\n        });\n      } else {\n        selectedRows.push(rowData.original);\n      }\n\n      _this.setState({\n        selectedRows: selectedRows\n      });\n    };\n\n    _this.onScenarioSelection = function (rowData) {\n      var selectedRows = _this.state.selectedRows;\n\n      var foundEle = _.find(selectedRows, {\n        markdown_id: rowData.original.markdown_id\n      });\n\n      if (foundEle) {\n        _.remove(selectedRows, function (item) {\n          return item.markdown_id === rowData.original.markdown_id;\n        });\n      } else {\n        selectedRows.push(rowData.original);\n      }\n\n      _this.setState({\n        selectedRows: selectedRows\n      });\n    };\n\n    _this.onHandleSelect = function (selOptions) {\n      var headers = _.cloneDeep(_this.state.columns);\n\n      _.remove(headers, function (item) {\n        return item.metric;\n      });\n\n      selOptions.forEach(function (item) {\n        var newTableCols = headers.filter(function (a) {\n          return a.accessor === item.value;\n        });\n\n        if (newTableCols.length == 0) {\n          var spliceAt = headers.length - 1;\n          headers.splice(spliceAt, 0, {\n            Header: item.label,\n            accessor: item.value,\n            Aggregated: function Aggregated(props) {\n              var accessorName = \"overall_\".concat(item.value);\n              var val = props.row.original[accessorName];\n              return FormatterStyling(props, accessorName, val);\n            },\n            Cell: function Cell(props) {\n              var parentId = Math.floor(props.row.id);\n\n              var parentRow = _.find(props.rows, {\n                id: parentId.toString()\n              });\n\n              return FormatterStyling(props, item.value);\n            },\n            metric: true\n          });\n        }\n      });\n\n      _this.setState({\n        columns: headers,\n        selectedItems: selOptions\n      });\n    };\n\n    _this.onHandleCheckBox = function (e, label, index) {\n      //adding\n      if (e.target.checked) {\n        if (_this.state.selLabels.indexOf(label) === -1) {\n          var labels = [].concat(_toConsumableArray(_this.state.selLabels), [label]);\n          var tempArr = [];\n          labels.forEach(function (label) {\n            var columns = _this.props.getColumnHeaders[label];\n            var labelColumns = Object.keys(columns);\n            var options = labelColumns.map(function (label) {\n              return {\n                label: label,\n                value: columns[label]\n              };\n            });\n            tempArr.push.apply(tempArr, _toConsumableArray(options));\n          });\n\n          _this.setState({\n            selLabels: labels,\n            columnOptions: tempArr\n          });\n        }\n      } else {\n        //removing\n        var _index = _this.state.selLabels.indexOf(label);\n\n        if (_index !== -1) {\n          var selectedLabel = _.cloneDeep(_this.state.selLabels);\n\n          selectedLabel.splice(_index, 1);\n          var _tempArr = [];\n          selectedLabel.forEach(function (label) {\n            var columns = _this.props.getColumnHeaders[label];\n            var labelColumns = Object.keys(columns);\n            var options = labelColumns.map(function (label) {\n              return {\n                label: label,\n                value: columns[label]\n              };\n            });\n\n            _tempArr.push.apply(_tempArr, _toConsumableArray(options));\n          });\n\n          var selectedItemsClone = _.cloneDeep(_this.state.selectedItems);\n\n          var newSelectedItems = [];\n          var labelArr = Object.keys(_this.props.getColumnHeaders[label]);\n          selectedItemsClone.forEach(function (item) {\n            if (!labelArr.includes(item.label)) {\n              newSelectedItems.push(item);\n            }\n          });\n\n          _this.onHandleSelect(newSelectedItems);\n\n          _this.setState({\n            selLabels: selectedLabel,\n            columnOptions: _tempArr,\n            selectedItems: newSelectedItems\n          });\n        }\n      }\n    };\n\n    _this.mandatoryFiltersVal = function () {\n      return _this.props.selectedHierarchy1 && _this.props.selectedHierarchy2.length && _this.props.startDate && _this.props.endDate;\n    };\n\n    _this.isSwitchedPaln = function (val) {\n      _this.updateTableData(val);\n\n      _this.setState({\n        switchedPlans: val\n      });\n    };\n\n    _this.onFilter = function (_ref) {\n      var filters = _ref.filters,\n          startDate = _ref.startDate,\n          endDate = _ref.endDate;\n\n      if (!_this.mandatoryFiltersVal()) {\n        toast.error(\"Please select mandatory filters\", {\n          autoClose: 15000,\n          hideProgressBar: true\n        });\n        return;\n      }\n\n      var payload = {\n        filters: {\n          hierarchy1: filters.hierarchy1,\n          hierarchy2: filters.hierarchy2,\n          hierarchy3: filters.hierarchy3,\n          hierarchy4: filters.hierarchy4,\n          hierarchy5: filters.hierarchy5,\n          season: _this.props.selectedSeason,\n          clearance: _this.props.selectedClearance,\n          matrix: _this.props.selectedMatrix,\n          exclusionList: _this.props.selectedExclusionList,\n          styleColor: _this.props.selectedStyleColor,\n          country: _this.props.selectedCountry,\n          storeCluster: _this.props.selectedStoreCluster,\n          store: _this.props.selectedStore,\n          channel: _this.props.selectedChannel,\n          customStyleGroup: _this.props.selectedCustomStyleGroup,\n          customStoreGroup: _this.props.selectedCustomStoreGroup,\n          // tiers: filters.stores,\n          tiers: _this.props.selectedStores\n        },\n        startDate: _this.props.startDate ? moment(_this.props.startDate).format('YYYY-MM-DD') : null,\n        endDate: _this.props.endDate ? moment(_this.props.endDate).format('YYYY-MM-DD') : null,\n        status: 'pending'\n      };\n\n      _this.getMarkdowns(payload);\n    };\n\n    _this.getMarkdowns = function (payload) {\n      _this.props.getMarkdowns(payload).then(function (resp) {\n        if (resp && resp.columnHeaders && Object.keys(resp.columnHeaders).length) {\n          (function () {\n            var defaultHeader = Object.keys(resp.columnHeaders.default);\n            var setDefaultColDef = Coldef().filter(function (col) {\n              return defaultHeader.includes(col.Header) || col.Header === 'Time Period' || col.Header === 'Actions' || col.id === 'expander' || // col.accessor === 'sell_through' ||\n              _this.state.toggle && col.accessor === 'status';\n            });\n            var setDefaultLabel = [];\n            var setDefaultColumnOptions = [];\n            var setDefaultColumnOptions1 = [];\n            var setDefaultItems = [];\n\n            var colHeaders = _.cloneDeep(resp.columnHeaders);\n\n            var labels = Object.keys(colHeaders);\n            labels.splice(labels.indexOf('fixed'), 1);\n            labels.splice(labels.indexOf('default'), 1);\n\n            var _loop = function _loop() {\n              var label = _labels[_i];\n              var labelArray = Object.keys(resp.columnHeaders[label]);\n\n              function diff() {\n                var A = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : labelArray;\n                var B = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultHeader;\n                return A.filter(function (a) {\n                  return B.indexOf(a) !== -1;\n                });\n              }\n\n              if (diff().length) {\n                setDefaultColumnOptions.push.apply(setDefaultColumnOptions, _toConsumableArray(Object.keys(resp.columnHeaders[label])));\n                setDefaultColumnOptions1.push(resp.columnHeaders[label]);\n                setDefaultItems.push.apply(setDefaultItems, _toConsumableArray(diff()));\n                setDefaultLabel.push(label);\n              }\n            };\n\n            for (var _i = 0, _labels = labels; _i < _labels.length; _i++) {\n              _loop();\n            }\n\n            var options = setDefaultColumnOptions.map(function (label) {\n              var find = setDefaultColumnOptions1 && setDefaultColumnOptions1[0][label];\n              return {\n                label: label,\n                value: find\n              };\n            });\n            var selectedItems = setDefaultItems.map(function (label) {\n              var find = setDefaultColumnOptions1 && setDefaultColumnOptions1[0][label];\n              return {\n                label: label,\n                value: find\n              };\n            });\n            setDefaultColDef.push({\n              id: 'selection',\n              groupByBoundary: true,\n              Header: 'Actions',\n              // fixed: 'left',\n              Cell: function Cell(props) {\n                var row = props.row,\n                    rows = props.rows;\n\n                var mdPlan = row.original.markdown_id,\n                    mainGrp = _.find(rows, {\n                  isSelected: true,\n                  original: {\n                    markdown_id: mdPlan\n                  }\n                }),\n                    checkboxDisabled = mainGrp && !row.isSelected ? true : false;\n\n                return row.canExpand ? React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 526\n                  },\n                  __self: this\n                }, React.createElement(IndeterminateCheckbox, Object.assign({\n                  row: row.id,\n                  onClick: function onClick() {\n                    _this.onScenarioSelection(row);\n                  },\n                  disabled: checkboxDisabled\n                }, row.getToggleRowSelectedProps(), {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 527\n                  },\n                  __self: this\n                })), React.createElement(\"span\", {\n                  className: \"ml-3 align-top\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 535\n                  },\n                  __self: this\n                }, React.createElement(\"i\", {\n                  onClick: function onClick() {\n                    return _this.setState({\n                      showEditModal: true,\n                      selectedPlanDetails: row.original\n                    });\n                  },\n                  className: \"fa fa-pencil color-blue\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 536\n                  },\n                  __self: this\n                }))) : null;\n              }\n            }); // setDefaultColDef.splice(2, 0, {\n            //   Header: 'Status',\n            //   disableGroupBy: false,\n            //   isGroupBy: false,\n            //   Cell: ({ row }) => {\n            //     return row.original.is_edited ? 'Edited' : 'New';\n            //   },\n            //   width: 50,\n            // });\n\n            _this.setState({\n              columns: setDefaultColDef,\n              selLabels: setDefaultLabel,\n              selectedItems: selectedItems,\n              columnOptions: options\n            });\n          })();\n        }\n\n        if (resp && !resp.markdown_data.length) {\n          _this.setState({\n            textStr: 'No data found. Please try with different filters.'\n          });\n        }\n      });\n    };\n\n    _this.showEditModalHandler = function (val) {\n      return _this.setState({\n        showEditModal: val\n      });\n    };\n\n    _this.state = {\n      filters: [{\n        type: 'hierarchy1',\n        isMandatory: true,\n        isMultiple: false\n      }, {\n        type: 'hierarchy2',\n        isMandatory: true,\n        isMultiple: true\n      }, {\n        type: 'hierarchy3',\n        isMandatory: true,\n        isMultiple: true\n      }, {\n        type: 'hierarchy4',\n        isMandatory: true,\n        isMultiple: true\n      }, {\n        type: 'hierarchy5',\n        isMandatory: true,\n        isMultiple: true\n      }],\n      switchedPlans: false,\n      textStr: 'Please select filters to show Markdown plans',\n      firstCardText: 'KPIs to be decided',\n      firstCardFirstValue: '12%',\n      firstCardSecondValue: '24%',\n      secondCardFirstValue: '16%',\n      secondCardSecondValue: '20%',\n      thirdCardFirstValue: '6%',\n      thirdCardSecondValue: '10%',\n      fourthCardFirstValue: '345',\n      fourthCardSecondValue: '3,457',\n      cardWeekText: 'this Week',\n      cardMonthText: 'this Month',\n      selectedItems: [],\n      columnOptions: [],\n      selLabels: [],\n      columns: [],\n      selectedRows: [],\n      tableData: [],\n      showEditModal: false,\n      selectedPlanDetails: null\n    };\n    return _this;\n  }\n\n  _createClass(FinalizeMarkdown, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.setMarkDowns([]);\n      this.props.setMDColumnHeaders({});\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateTableData(this.state.switchedPlans);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var finalizeMarkdownData = this.props.finalizeMarkdownData;\n\n      if (!_.isEmpty(finalizeMarkdownData) && !_.isEqual(finalizeMarkdownData, prevProps.finalizeMarkdownData)) {\n        this.updateTableData(this.state.switchedPlans);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(LoadingOverlay, {\n        loader: this.props.getOverlayLoaderState,\n        spinner: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"createMd pl-2 pr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card CalendarMain promoCalendarDiv1 mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"font-size-14  pad-10 markdown-heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580\n        },\n        __self: this\n      }, \"MarkSmart /\", React.createElement(\"span\", {\n        className: \"font-bold color-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }, \"Finalize\"))), React.createElement(\"hr\", {\n        className: \"mb-2\",\n        style: {\n          marginTop: '-4px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"filterCol mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, React.createElement(Filters, {\n        onReset: function onReset(e) {\n          _this2.setState({\n            textStr: 'Please select filters to show Markdown plans'\n          });\n\n          _this2.props.onResetFinalizeTable(e);\n        },\n        hierarchy: this.state.filters,\n        onFilter: this.onFilter,\n        extraFiltersOptions: [{\n          type: 'country',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'channel',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'storeCluster',\n          isMandatory: false,\n          isMultiple: true\n        }, // { type: 'customStoreGroup', isMandatory: false, isMultiple: true },\n        {\n          type: 'store',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'hierarchy'\n        }, {\n          type: 'season',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'matrix',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'exclusionList',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'clearance',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'customStyleColorGroup',\n          isMandatory: false,\n          isMultiple: true\n        }, {\n          type: 'styleColor',\n          isMandatory: false,\n          isMultiple: true\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592\n        },\n        __self: this\n      }))), this.props.finalizeMarkdownData && this.props.finalizeMarkdownData.length ? React.createElement(\"div\", {\n        className: \"card pl-3 pr-3 mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687\n        },\n        __self: this\n      }, React.createElement(ColSelBtn, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688\n        },\n        __self: this\n      }, this.props.getColumnHeaders && Object.keys(this.props.getColumnHeaders).length && React.createElement(ColumnSelection, {\n        onHandleCheckBox: this.onHandleCheckBox,\n        columnHeaders: this.props.getColumnHeaders,\n        onHandleSelect: this.onHandleSelect,\n        columnOptions: this.state.columnOptions,\n        selectedItems: this.state.selectedItems,\n        selLabels: this.state.selLabels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"switchCss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        checked: this.state.switchedPlans,\n        onSwitchHandler: this.isSwitchedPaln,\n        leftLabel: \"Unedited Plans\",\n        rightLabel: \"Edited Plans\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 700\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          padding: '1rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        disabled: !this.state.selectedRows.length,\n        onClick: this.sendForApprove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        },\n        __self: this\n      }, \"Approve\"), \"\\xA0\", React.createElement(\"button\", {\n        disabled: !this.state.selectedRows.length,\n        className: \"btn btn-primary\",\n        onClick: this.sendForReject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715\n        },\n        __self: this\n      }, \"Reject\"))), React.createElement(DataTable, {\n        columns: this.state.columns,\n        isSort: true // isColumnFilter={true}\n        ,\n        data: this.state.tableData //this.props.finalizeMarkdownData}\n        ,\n        updateMyData: this.updateMyData // visibleColumns=\"markDownDrafts\"\n        ,\n        isPagination: true,\n        getColumnProps: function getColumnProps(column) {\n          return {// onClick: () => this.onColumnClick(column),\n          };\n        },\n        getCellProps: function getCellProps(cellInfo) {\n          return {\n            style: {\n              backgroundColor: _this2.bgmCol(cellInfo),\n              color: _this2.txtCol(cellInfo),\n              // textAlign: \"center\",\n              margin: '4px 4px',\n              borderRadius: '2px'\n            }\n          };\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      })) : React.createElement(NoData, {\n        description: this.state.textStr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      })), this.state.showEditModal ? React.createElement(EditMDModal, {\n        showEditModalHandler: this.showEditModalHandler,\n        selectedPlanDetails: this.state.selectedPlanDetails,\n        from: \"finalize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return FinalizeMarkdown;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    finalizeMarkdownData: store.draftStatusReducer.markdowns,\n    getOverlayLoaderState: store.loaderReducer.overlayLoaderState,\n    getColumnHeaders: store.draftStatusReducer.columnHeaders,\n    getMetricOptions: store.finalizeReducer.metricOptions,\n    selectedHierarchy1: store.filtersReducer.selectedHierarchy1,\n    selectedHierarchy2: store.filtersReducer.selectedHierarchy2,\n    selectedHierarchy3: store.filtersReducer.selectedHierarchy3,\n    selectedHierarchy4: store.filtersReducer.selectedHierarchy4,\n    selectedHierarchy5: store.filtersReducer.selectedHierarchy5,\n    selectedCustomStyleGroup: store.filtersReducer.selectedCustomStyleGroup,\n    selectedCustomStoreGroup: store.filtersReducer.selectedCustomStoreGroup,\n    startDate: store.filtersReducer.startDate,\n    endDate: store.filtersReducer.endDate,\n    selectedSeason: store.filtersReducer.selectedSeason,\n    selectedClearance: store.filtersReducer.selectedClearance,\n    selectedMatrix: store.filtersReducer.selectedMatrix,\n    selectedExclusionList: store.filtersReducer.selectedExclusionList,\n    selectedStyleColor: store.filtersReducer.selectedStyleColor,\n    selectedCountry: store.filtersReducer.selectedCountry,\n    selectedStoreCluster: store.filtersReducer.selectedStoreCluster,\n    selectedStore: store.filtersReducer.selectedStore,\n    selectedChannel: store.filtersReducer.selectedChannel\n  };\n};\n\nvar mapActionToProps = {\n  getMarkdowns: FinalizeAction.getMarkdowns,\n  setMarkDowns: FinalizeAction.setMarkDowns,\n  setMDColumnHeaders: FinalizeAction.setMDColumnHeaders,\n  sendForApproval: FinalizeAction.sendForApproval,\n  onResetFinalizeTable: FinalizeAction.onResetFinalizeTable\n};\nexport default connect(mapStateToProps, mapActionToProps)(withRouter(FinalizeMarkdown));\nvar ColSelBtn = styled.div(_templateObject());","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/Finalize/FinalizeMarkdown.js"],"names":["React","Component","connect","withRouter","Filters","styled","LoadingOverlay","toast","NoData","FinalizeAction","Coldef","_","cloneDeep","DataTable","ColumnSelection","AlertWarning","AlertSuccess","moment","card1Image","card2Image","card3Image","card4Image","IndeterminateCheckbox","toPercentage","toDollarWithlDraft","toUnitDraft","Switch","EditMDModal","FormatterStyling","props","value","val","val1","props1","FinalizeMarkdown","updateTableData","isEdited","finalizeMarkdownData","newTableData","filter","item","is_edited","isEqual","state","tableData","setState","findStatusColor","status","color","high","medium","low","bgmCol","cellInfo","column","id","row","original","md_status","bgCol","txtCol","sendForReject","msg","payload","markdown_data","selectedRows","map","i","arrLength","length","msgStr","scenario","md_plan","push","markdown_id","update_status","sendForApproval","then","resp","data","successMsg","join","info","autoClose","hideProgressBar","getMarkdowns","filters","hierarchy1","selectedHierarchy1","hierarchy2","selectedHierarchy2","hierarchy3","selectedHierarchy3","hierarchy4","selectedHierarchy4","hierarchy5","selectedHierarchy5","season","selectedSeason","clearance","selectedClearance","matrix","selectedMatrix","exclusionList","selectedExclusionList","styleColor","selectedStyleColor","country","selectedCountry","storeCluster","selectedStoreCluster","store","selectedStore","channel","selectedChannel","customStyleGroup","selectedCustomStyleGroup","customStoreGroup","selectedCustomStoreGroup","tiers","selectedStores","startDate","format","endDate","catch","err","error","message","sendForApprove","hierarchy6","selectedHierarchy6","hierarchy7","selectedHierarchy7","hierarchy8","selectedHierarchy8","onActionSelection","rowData","foundEle","find","remove","onScenarioSelection","onHandleSelect","selOptions","headers","columns","metric","forEach","newTableCols","a","accessor","spliceAt","splice","Header","label","Aggregated","accessorName","Cell","parentId","Math","floor","parentRow","rows","toString","selectedItems","onHandleCheckBox","e","index","target","checked","selLabels","indexOf","labels","tempArr","getColumnHeaders","labelColumns","Object","keys","options","columnOptions","selectedLabel","selectedItemsClone","newSelectedItems","labelArr","includes","mandatoryFiltersVal","isSwitchedPaln","switchedPlans","onFilter","columnHeaders","defaultHeader","default","setDefaultColDef","col","toggle","setDefaultLabel","setDefaultColumnOptions","setDefaultColumnOptions1","setDefaultItems","colHeaders","labelArray","diff","A","B","groupByBoundary","mdPlan","mainGrp","isSelected","checkboxDisabled","canExpand","getToggleRowSelectedProps","showEditModal","selectedPlanDetails","textStr","showEditModalHandler","type","isMandatory","isMultiple","firstCardText","firstCardFirstValue","firstCardSecondValue","secondCardFirstValue","secondCardSecondValue","thirdCardFirstValue","thirdCardSecondValue","fourthCardFirstValue","fourthCardSecondValue","cardWeekText","cardMonthText","setMarkDowns","setMDColumnHeaders","prevProps","isEmpty","getOverlayLoaderState","marginTop","onResetFinalizeTable","padding","updateMyData","style","backgroundColor","margin","borderRadius","mapStateToProps","draftStatusReducer","markdowns","loaderReducer","overlayLoaderState","getMetricOptions","finalizeReducer","metricOptions","filtersReducer","mapActionToProps","ColSelBtn","div"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Filters from '../../services/filters';\nimport './finalizeMarkdownStyle.css';\nimport styled from 'styled-components';\nimport LoadingOverlay from '../../utils/Loader';\nimport { toast } from 'react-toastify';\nimport NoData from '../noTableData';\nimport FinalizeAction from '../../actions/draftStausFinalizeAction';\n// import Coldef from './coldef';\nimport Coldef from '../draftStatus/draft/coldef';\nimport _ from 'lodash';\nimport cloneDeep from 'clone-deep';\nimport DataTable from '../../services/reactTable';\nimport ColumnSelection from '../columnSelection';\nimport AlertWarning from '../../utils/AlertMessage/alertDanger';\nimport AlertSuccess from '../../utils/AlertMessage/alertSuccess';\nimport moment from 'moment';\nimport card1Image from '../../images/card1Image.png';\nimport card2Image from '../../images/card2Image.png';\nimport card3Image from '../../images/card3Image.png';\nimport card4Image from '../../images/card4Image.png';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\nimport { toPercentage, toDollarWithlDraft, toUnitDraft } from '../../helper/formatter';\nimport Switch from '../../services/toggleSwitch';\nimport EditMDModal from '../editMDModal';\n\nfunction FormatterStyling(props, value, val) {\n  let val1 = val || val == 0 ? val : props.value;\n  let props1 = val || val == 0 ? { value: val } : props;\n  if (\n    value == 'pvh_units' ||\n    value == 'markdown_units' ||\n    value == 'overall_pvh_units' ||\n    value == 'overall_markdown_units'\n  ) {\n    return val1 || val1 == 0 ? toUnitDraft(props1) : '-';\n  } else if (value == 'margin_perc' || value == 'overall_margin_perc') {\n    return val1 || val1 == 0 ? toPercentage(props1) : '-';\n  } else if (\n    value == 'revenue$' ||\n    value == 'aur' ||\n    value == 'margin$' ||\n    value == 'aum' ||\n    value == 'overall_aum' ||\n    value == 'overall_revenue$' ||\n    value == 'overall_aur' ||\n    value == 'overall_margin$'\n  ) {\n    return val1 || val1 == 0 ? toDollarWithlDraft(props1) : '-';\n  }\n  return '-';\n}\nclass FinalizeMarkdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: [\n        {\n          type: 'hierarchy1',\n          isMandatory: true,\n          isMultiple: false,\n        },\n        {\n          type: 'hierarchy2',\n          isMandatory: true,\n          isMultiple: true,\n        },\n        {\n          type: 'hierarchy3',\n          isMandatory: true,\n          isMultiple: true,\n        },\n        {\n          type: 'hierarchy4',\n          isMandatory: true,\n          isMultiple: true,\n        },\n        {\n          type: 'hierarchy5',\n          isMandatory: true,\n          isMultiple: true,\n        },\n      ],\n      switchedPlans: false,\n      textStr: 'Please select filters to show Markdown plans',\n      firstCardText: 'KPIs to be decided',\n      firstCardFirstValue: '12%',\n      firstCardSecondValue: '24%',\n      secondCardFirstValue: '16%',\n      secondCardSecondValue: '20%',\n      thirdCardFirstValue: '6%',\n      thirdCardSecondValue: '10%',\n      fourthCardFirstValue: '345',\n      fourthCardSecondValue: '3,457',\n      cardWeekText: 'this Week',\n      cardMonthText: 'this Month',\n      selectedItems: [],\n      columnOptions: [],\n      selLabels: [],\n      columns: [],\n      selectedRows: [],\n      tableData: [],\n      showEditModal: false,\n      selectedPlanDetails: null,\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.setMarkDowns([]);\n    this.props.setMDColumnHeaders({});\n  }\n  componentDidMount() {\n    this.updateTableData(this.state.switchedPlans);\n  }\n  componentDidUpdate(prevProps) {\n    let { finalizeMarkdownData } = this.props;\n    if (\n      !_.isEmpty(finalizeMarkdownData) &&\n      !_.isEqual(finalizeMarkdownData, prevProps.finalizeMarkdownData)\n    ) {\n      this.updateTableData(this.state.switchedPlans);\n    }\n  }\n  updateTableData = (isEdited) => {\n    let { finalizeMarkdownData } = this.props;\n    let newTableData = _.filter(finalizeMarkdownData, (item) => item.is_edited === isEdited);\n\n    if (!_.isEqual(this.state.tableData, newTableData)) this.setState({ tableData: newTableData });\n  };\n  findStatusColor = (status, color) => {\n    switch (status) {\n      case 'high':\n        return color.high;\n      case 'medium':\n        return color.medium;\n      case 'low':\n        return color.low;\n      default:\n        break;\n    }\n  };\n\n  bgmCol = (cellInfo) => {\n    if (cellInfo.column.id === 'md_status') var status = cellInfo.row.original.md_status;\n    let bgCol = {\n      high: '#F8E8E8',\n      medium: '#FCF3D1',\n      low: '#E8F8F5',\n    };\n    return this.findStatusColor(status, bgCol);\n  };\n  txtCol = (cellInfo) => {\n    if (cellInfo.column.id === 'md_status') var status = cellInfo.row.original.md_status;\n    let txtCol = {\n      high: '#D38485',\n      medium: '#F0C53A',\n      low: '#66CFBA',\n    };\n    return this.findStatusColor(status, txtCol);\n  };\n  sendForReject = () => {\n    let msg = [];\n    let payload = {\n      markdown_data: this.state.selectedRows.map((item, i) => {\n        let arrLength = this.state.selectedRows.length;\n        let msgStr = `Scenario '${item.scenario}' of Plan '${item.md_plan}'${\n          i === arrLength - 2 ? ' and ' : i === arrLength - 1 ? '' : ', '\n        }`;\n        msg.push(msgStr);\n        return {\n          id: item.markdown_id,\n          scenario: item.scenario,\n        };\n      }),\n      update_status: 'rejected',\n    };\n    this.props\n      .sendForApproval(payload)\n      .then((resp) => {\n        if (resp && resp.data.status == true) {\n          let successMsg = `${msg.join('')} has been Rejected`;\n          toast.info(successMsg, {\n            autoClose: 15000,\n            hideProgressBar: true,\n          });\n          this.props.getMarkdowns({\n            filters: {\n              hierarchy1: this.props.selectedHierarchy1,\n              hierarchy2: this.props.selectedHierarchy2,\n              hierarchy3: this.props.selectedHierarchy3,\n              hierarchy4: this.props.selectedHierarchy4,\n              hierarchy5: this.props.selectedHierarchy5,\n              season: this.props.selectedSeason,\n              clearance: this.props.selectedClearance,\n              matrix: this.props.selectedMatrix,\n              exclusionList: this.props.selectedExclusionList,\n              styleColor: this.props.selectedStyleColor,\n              country: this.props.selectedCountry,\n              storeCluster: this.props.selectedStoreCluster,\n              store: this.props.selectedStore,\n              channel: this.props.selectedChannel,\n              customStyleGroup: this.props.selectedCustomStyleGroup,\n              customStoreGroup: this.props.selectedCustomStoreGroup,\n              tiers: this.props.selectedStores,\n            },\n            startDate: this.props.startDate\n              ? moment(this.props.startDate).format('YYYY-MM-DD')\n              : null,\n            endDate: this.props.endDate ? moment(this.props.endDate).format('YYYY-MM-DD') : null,\n            status: 'pending',\n          });\n          this.setState({\n            selectedRows: [],\n          });\n        }\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          autoClose: 15000,\n          hideProgressBar: true,\n        });\n      });\n  };\n  sendForApprove = () => {\n    let msg = [];\n    let payload = {\n      markdown_data: this.state.selectedRows.map((item, i) => {\n        let arrLength = this.state.selectedRows.length;\n        let msgStr = `Scenario '${item.scenario}' of Plan '${item.md_plan}'${\n          i === arrLength - 2 ? ' and ' : i === arrLength - 1 ? '' : ', '\n        }`;\n        msg.push(msgStr);\n        return {\n          id: item.markdown_id,\n          scenario: item.scenario,\n        };\n      }),\n      update_status: 'approved',\n    };\n\n    this.props\n      .sendForApproval(payload)\n      .then((resp) => {\n        if (resp && resp.data.status == true) {\n          let successMsg = `${msg.join('')} has been Finalized Successfully`;\n          toast.info(successMsg, {\n            autoClose: 15000,\n            hideProgressBar: true,\n          });\n          this.props.getMarkdowns({\n            filters: {\n              hierarchy1: this.props.selectedHierarchy1,\n              hierarchy2: this.props.selectedHierarchy2,\n              hierarchy3: this.props.selectedHierarchy3,\n              hierarchy4: this.props.selectedHierarchy4,\n              hierarchy5: this.props.selectedHierarchy5,\n              hierarchy6: this.props.selectedHierarchy6,\n              hierarchy7: this.props.selectedHierarchy7,\n              hierarchy8: this.props.selectedHierarchy8,\n              season: this.props.selectedSeason,\n              clearance: this.props.selectedClearance,\n              matrix: this.props.selectedMatrix,\n              exclusionList: this.props.selectedExclusionList,\n              styleColor: this.props.selectedStyleColor,\n              country: this.props.selectedCountry,\n              storeCluster: this.props.selectedStoreCluster,\n              store: this.props.selectedStore,\n              channel: this.props.selectedChannel,\n              customStyleGroup: this.props.selectedCustomStyleGroup,\n              customStoreGroup: this.props.selectedCustomStoreGroup,\n              tiers: this.props.selectedStores,\n            },\n            startDate: this.props.startDate\n              ? moment(this.props.startDate).format('YYYY-MM-DD')\n              : null,\n            endDate: this.props.endDate ? moment(this.props.endDate).format('YYYY-MM-DD') : null,\n            status: 'pending',\n          });\n          this.setState({\n            selectedRows: [],\n          });\n        }\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          autoClose: 15000,\n          hideProgressBar: true,\n        });\n      });\n  };\n  onActionSelection = (rowData) => {\n    let { selectedRows } = this.state;\n    let foundEle = _.find(selectedRows, { markdown_id: rowData.original.markdown_id });\n    if (foundEle) {\n      _.remove(selectedRows, (item) => item.markdown_id === rowData.original.markdown_id);\n    } else {\n      selectedRows.push(rowData.original);\n    }\n    this.setState({\n      selectedRows,\n    });\n  };\n\n  onScenarioSelection = (rowData) => {\n    let { selectedRows } = this.state;\n    let foundEle = _.find(selectedRows, { markdown_id: rowData.original.markdown_id });\n    if (foundEle) {\n      _.remove(selectedRows, (item) => item.markdown_id === rowData.original.markdown_id);\n    } else {\n      selectedRows.push(rowData.original);\n    }\n    this.setState({\n      selectedRows,\n    });\n  };\n  onHandleSelect = (selOptions) => {\n    let headers = _.cloneDeep(this.state.columns);\n    _.remove(headers, (item) => item.metric);\n    selOptions.forEach((item) => {\n      let newTableCols = headers.filter((a) => {\n        return a.accessor === item.value;\n      });\n      if (newTableCols.length == 0) {\n        let spliceAt = headers.length - 1;\n        headers.splice(spliceAt, 0, {\n          Header: item.label,\n          accessor: item.value,\n          Aggregated: (props) => {\n            let accessorName = `overall_${item.value}`;\n            let val = props.row.original[accessorName];\n            return FormatterStyling(props, accessorName, val);\n          },\n\n          Cell: (props) => {\n            let parentId = Math.floor(props.row.id);\n            let parentRow = _.find(props.rows, { id: parentId.toString() });\n            return FormatterStyling(props, item.value);\n          },\n          metric: true,\n        });\n      }\n    });\n    this.setState({\n      columns: headers,\n      selectedItems: selOptions,\n    });\n  };\n\n  onHandleCheckBox = (e, label, index) => {\n    //adding\n    if (e.target.checked) {\n      if (this.state.selLabels.indexOf(label) === -1) {\n        let labels = [...this.state.selLabels, label];\n        let tempArr = [];\n        labels.forEach((label) => {\n          let columns = this.props.getColumnHeaders[label];\n          let labelColumns = Object.keys(columns);\n          let options = labelColumns.map((label) => {\n            return {\n              label: label,\n              value: columns[label],\n            };\n          });\n          tempArr.push(...options);\n        });\n        this.setState({\n          selLabels: labels,\n          columnOptions: tempArr,\n        });\n      }\n    } else {\n      //removing\n      let index = this.state.selLabels.indexOf(label);\n      if (index !== -1) {\n        let selectedLabel = _.cloneDeep(this.state.selLabels);\n        selectedLabel.splice(index, 1);\n        let tempArr = [];\n        selectedLabel.forEach((label) => {\n          let columns = this.props.getColumnHeaders[label];\n          let labelColumns = Object.keys(columns);\n          let options = labelColumns.map((label) => {\n            return {\n              label: label,\n              value: columns[label],\n            };\n          });\n          tempArr.push(...options);\n        });\n\n        let selectedItemsClone = _.cloneDeep(this.state.selectedItems);\n        let newSelectedItems = [];\n        let labelArr = Object.keys(this.props.getColumnHeaders[label]);\n        selectedItemsClone.forEach((item) => {\n          if (!labelArr.includes(item.label)) {\n            newSelectedItems.push(item);\n          }\n        });\n\n        this.onHandleSelect(newSelectedItems);\n        this.setState({\n          selLabels: selectedLabel,\n          columnOptions: tempArr,\n          selectedItems: newSelectedItems,\n        });\n      }\n    }\n  };\n  mandatoryFiltersVal = () => {\n    return (\n      this.props.selectedHierarchy1 &&\n      this.props.selectedHierarchy2.length &&\n      this.props.startDate &&\n      this.props.endDate\n    );\n  };\n  isSwitchedPaln = (val) => {\n    this.updateTableData(val);\n    this.setState({\n      switchedPlans: val,\n    });\n  };\n  onFilter = ({ filters, startDate, endDate }) => {\n    if (!this.mandatoryFiltersVal()) {\n      toast.error(`Please select mandatory filters`, {\n        autoClose: 15000,\n        hideProgressBar: true,\n      });\n      return;\n    }\n    let payload = {\n      filters: {\n        hierarchy1: filters.hierarchy1,\n        hierarchy2: filters.hierarchy2,\n        hierarchy3: filters.hierarchy3,\n        hierarchy4: filters.hierarchy4,\n        hierarchy5: filters.hierarchy5,\n        season: this.props.selectedSeason,\n        clearance: this.props.selectedClearance,\n        matrix: this.props.selectedMatrix,\n        exclusionList: this.props.selectedExclusionList,\n        styleColor: this.props.selectedStyleColor,\n        country: this.props.selectedCountry,\n        storeCluster: this.props.selectedStoreCluster,\n        store: this.props.selectedStore,\n        channel: this.props.selectedChannel,\n        customStyleGroup: this.props.selectedCustomStyleGroup,\n        customStoreGroup: this.props.selectedCustomStoreGroup,\n        // tiers: filters.stores,\n        tiers: this.props.selectedStores,\n      },\n      startDate: this.props.startDate ? moment(this.props.startDate).format('YYYY-MM-DD') : null,\n      endDate: this.props.endDate ? moment(this.props.endDate).format('YYYY-MM-DD') : null,\n      status: 'pending',\n    };\n    this.getMarkdowns(payload);\n  };\n\n  getMarkdowns = (payload) => {\n    this.props.getMarkdowns(payload).then((resp) => {\n      if (resp && resp.columnHeaders && Object.keys(resp.columnHeaders).length) {\n        let defaultHeader = Object.keys(resp.columnHeaders.default);\n\n        let setDefaultColDef = Coldef().filter(\n          (col) =>\n            defaultHeader.includes(col.Header) ||\n            col.Header === 'Time Period' ||\n            col.Header === 'Actions' ||\n            col.id === 'expander' ||\n            // col.accessor === 'sell_through' ||\n            (this.state.toggle && col.accessor === 'status')\n        );\n        let setDefaultLabel = [];\n        let setDefaultColumnOptions = [];\n        let setDefaultColumnOptions1 = [];\n        let setDefaultItems = [];\n        let colHeaders = _.cloneDeep(resp.columnHeaders);\n        let labels = Object.keys(colHeaders);\n        labels.splice(labels.indexOf('fixed'), 1);\n        labels.splice(labels.indexOf('default'), 1);\n        for (const label of labels) {\n          let labelArray = Object.keys(resp.columnHeaders[label]);\n          function diff(A = labelArray, B = defaultHeader) {\n            return A.filter(function (a) {\n              return B.indexOf(a) !== -1;\n            });\n          }\n\n          if (diff().length) {\n            setDefaultColumnOptions.push(...Object.keys(resp.columnHeaders[label]));\n            setDefaultColumnOptions1.push(resp.columnHeaders[label]);\n            setDefaultItems.push(...diff());\n            setDefaultLabel.push(label);\n          }\n        }\n        let options = setDefaultColumnOptions.map((label) => {\n          let find = setDefaultColumnOptions1 && setDefaultColumnOptions1[0][label];\n          return {\n            label: label,\n            value: find,\n          };\n        });\n        let selectedItems = setDefaultItems.map((label) => {\n          let find = setDefaultColumnOptions1 && setDefaultColumnOptions1[0][label];\n          return {\n            label: label,\n            value: find,\n          };\n        });\n        setDefaultColDef.push({\n          id: 'selection',\n          groupByBoundary: true,\n          Header: 'Actions',\n          // fixed: 'left',\n          Cell: (props) => {\n            let { row, rows } = props;\n            let mdPlan = row.original.markdown_id,\n              mainGrp = _.find(rows, {\n                isSelected: true,\n                original: { markdown_id: mdPlan },\n              }),\n              checkboxDisabled = mainGrp && !row.isSelected ? true : false;\n\n            return row.canExpand ? (\n              <div>\n                <IndeterminateCheckbox\n                  row={row.id}\n                  onClick={() => {\n                    this.onScenarioSelection(row);\n                  }}\n                  disabled={checkboxDisabled}\n                  {...row.getToggleRowSelectedProps()}\n                />\n                <span className=\"ml-3 align-top\">\n                  <i\n                    onClick={() =>\n                      this.setState({ showEditModal: true, selectedPlanDetails: row.original })\n                    }\n                    className=\"fa fa-pencil color-blue\"\n                  />\n                </span>\n              </div>\n            ) : null;\n          },\n        });\n        // setDefaultColDef.splice(2, 0, {\n        //   Header: 'Status',\n        //   disableGroupBy: false,\n        //   isGroupBy: false,\n        //   Cell: ({ row }) => {\n        //     return row.original.is_edited ? 'Edited' : 'New';\n        //   },\n        //   width: 50,\n        // });\n        this.setState({\n          columns: setDefaultColDef,\n          selLabels: setDefaultLabel,\n          selectedItems: selectedItems,\n          columnOptions: options,\n        });\n      }\n\n      if (resp && !resp.markdown_data.length) {\n        this.setState({\n          textStr: 'No data found. Please try with different filters.',\n        });\n      }\n    });\n  };\n\n  showEditModalHandler = (val) => this.setState({ showEditModal: val });\n\n  render() {\n    return (\n      <LoadingOverlay loader={this.props.getOverlayLoaderState} spinner>\n        <div className=\"createMd pl-2 pr-2\">\n          <div className=\"card CalendarMain promoCalendarDiv1 mt-3\">\n            <div>\n              <h4 className=\"font-size-14  pad-10 markdown-heading\">\n                MarkSmart /<span className=\"font-bold color-blue\">Finalize</span>\n              </h4>\n            </div>\n            <hr\n              className=\"mb-2\"\n              style={{\n                marginTop: '-4px',\n              }}\n            />\n\n            <div className=\"filterCol mb-4\">\n              <Filters\n                onReset={(e) => {\n                  this.setState({\n                    textStr: 'Please select filters to show Markdown plans',\n                  });\n                  this.props.onResetFinalizeTable(e);\n                }}\n                hierarchy={this.state.filters}\n                onFilter={this.onFilter}\n                extraFiltersOptions={[\n                  { type: 'country', isMandatory: false, isMultiple: true },\n                  { type: 'channel', isMandatory: false, isMultiple: true },\n                  { type: 'storeCluster', isMandatory: false, isMultiple: true },\n                  // { type: 'customStoreGroup', isMandatory: false, isMultiple: true },\n                  { type: 'store', isMandatory: false, isMultiple: true },\n                  { type: 'hierarchy' },\n                  { type: 'season', isMandatory: false, isMultiple: true },\n                  { type: 'matrix', isMandatory: false, isMultiple: true },\n                  { type: 'exclusionList', isMandatory: false, isMultiple: true },\n                  { type: 'clearance', isMandatory: false, isMultiple: true },\n                  { type: 'customStyleColorGroup', isMandatory: false, isMultiple: true },\n                  { type: 'styleColor', isMandatory: false, isMultiple: true },\n                ]}\n              />\n            </div>\n          </div>\n          {/* <div className=\"row\" style={{ marginTop: '15px' }}>\n          <div className=\"col-md-3 col-sm-3 col-xs-6 \">\n            <CardComponent\n              cardImage={card1Image}\n              cardText={this.state.firstCardText}\n              cardValue={this.state.firstCardFirstValue}\n              cardValueSecond={this.state.firstCardSecondValue}\n              cardWeekText={this.state.cardWeekText}\n              cardMonthText={this.state.cardMonthText}\n              cardStyles={{\n                cardClass: 'card-border1',\n                cardValue: 'card1-value',\n                cardImg: 'card1-img',\n                cardValueSecond: 'card-value-second',\n                cardSubHeading: 'card-subHeading',\n              }}\n            />\n          </div>\n          <div className=\"col-md-3 col-sm-3 col-xs-6\">\n            <CardComponent\n              cardImage={card2Image}\n              cardText={this.state.firstCardText}\n              cardValue={this.state.secondCardFirstValue}\n              cardValueSecond={this.state.secondCardSecondValue}\n              cardWeekText={this.state.cardWeekText}\n              cardMonthText={this.state.cardMonthText}\n              cardStyles={{\n                cardClass: 'card-border2',\n                cardValue: 'card1-value',\n                cardImg: 'card2-img',\n                cardValueSecond: 'card-value-second',\n                cardSubHeading: 'card-subHeading',\n              }}\n            />\n          </div>\n          <div className=\"col-md-3 col-sm-3 col-xs-6 \">\n            <CardComponent\n              cardImage={card3Image}\n              cardText={this.state.firstCardText}\n              cardValue={this.state.thirdCardFirstValue}\n              cardValueSecond={this.state.thirdCardSecondValue}\n              cardWeekText={this.state.cardWeekText}\n              cardMonthText={this.state.cardMonthText}\n              cardStyles={{\n                cardClass: 'card-border3',\n                cardValue: 'card1-value',\n                cardImg: 'card3-img',\n                cardValueSecond: 'card-value-second',\n                cardSubHeading: 'card-subHeading',\n              }}\n            />\n          </div>\n          <div className=\"col-md-3 col-sm-3 col-xs-6 \">\n            <CardComponent\n              cardImage={card4Image}\n              cardText={this.state.firstCardText}\n              cardValue={this.state.fourthCardFirstValue}\n              cardValueSecond={this.state.fourthCardSecondValue}\n              cardWeekText={this.state.cardWeekText}\n              cardMonthText={this.state.cardMonthText}\n              cardStyles={{\n                cardClass: 'card-border4',\n                cardValue: 'card1-value',\n                cardImg: 'card4-img',\n              }}\n            />\n          </div>\n        </div> */}\n          {this.props.finalizeMarkdownData && this.props.finalizeMarkdownData.length ? (\n            <div className=\"card pl-3 pr-3 mt-3\">\n              <ColSelBtn>\n                {this.props.getColumnHeaders && Object.keys(this.props.getColumnHeaders).length && (\n                  <ColumnSelection\n                    onHandleCheckBox={this.onHandleCheckBox}\n                    columnHeaders={this.props.getColumnHeaders}\n                    onHandleSelect={this.onHandleSelect}\n                    columnOptions={this.state.columnOptions}\n                    selectedItems={this.state.selectedItems}\n                    selLabels={this.state.selLabels}\n                  />\n                )}\n                <div className=\"switchCss\">\n                  <Switch\n                    checked={this.state.switchedPlans}\n                    onSwitchHandler={this.isSwitchedPaln}\n                    leftLabel=\"Unedited Plans\"\n                    rightLabel=\"Edited Plans\"\n                  />\n                </div>\n                <div style={{ padding: '1rem' }}>\n                  <button\n                    className=\"btn btn-primary\"\n                    disabled={!this.state.selectedRows.length}\n                    onClick={this.sendForApprove}>\n                    Approve\n                  </button>\n                  &nbsp;\n                  <button\n                    disabled={!this.state.selectedRows.length}\n                    className=\"btn btn-primary\"\n                    onClick={this.sendForReject}>\n                    Reject\n                  </button>\n                </div>\n              </ColSelBtn>\n              <DataTable\n                columns={this.state.columns}\n                isSort={true}\n                // isColumnFilter={true}\n                data={this.state.tableData} //this.props.finalizeMarkdownData}\n                updateMyData={this.updateMyData}\n                // visibleColumns=\"markDownDrafts\"\n                isPagination={true}\n                getColumnProps={(column) => ({\n                  // onClick: () => this.onColumnClick(column),\n                })}\n                getCellProps={(cellInfo) => ({\n                  style: {\n                    backgroundColor: this.bgmCol(cellInfo),\n                    color: this.txtCol(cellInfo),\n                    // textAlign: \"center\",\n                    margin: '4px 4px',\n                    borderRadius: '2px',\n                  },\n                })}\n              />\n            </div>\n          ) : (\n            <NoData description={this.state.textStr} />\n          )}\n        </div>\n\n        {this.state.showEditModal ? (\n          <EditMDModal\n            showEditModalHandler={this.showEditModalHandler}\n            selectedPlanDetails={this.state.selectedPlanDetails}\n            from=\"finalize\"\n          />\n        ) : null}\n      </LoadingOverlay>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => {\n  return {\n    finalizeMarkdownData: store.draftStatusReducer.markdowns,\n    getOverlayLoaderState: store.loaderReducer.overlayLoaderState,\n    getColumnHeaders: store.draftStatusReducer.columnHeaders,\n    getMetricOptions: store.finalizeReducer.metricOptions,\n    selectedHierarchy1: store.filtersReducer.selectedHierarchy1,\n    selectedHierarchy2: store.filtersReducer.selectedHierarchy2,\n    selectedHierarchy3: store.filtersReducer.selectedHierarchy3,\n    selectedHierarchy4: store.filtersReducer.selectedHierarchy4,\n    selectedHierarchy5: store.filtersReducer.selectedHierarchy5,\n    selectedCustomStyleGroup: store.filtersReducer.selectedCustomStyleGroup,\n    selectedCustomStoreGroup: store.filtersReducer.selectedCustomStoreGroup,\n    startDate: store.filtersReducer.startDate,\n    endDate: store.filtersReducer.endDate,\n    selectedSeason: store.filtersReducer.selectedSeason,\n    selectedClearance: store.filtersReducer.selectedClearance,\n    selectedMatrix: store.filtersReducer.selectedMatrix,\n    selectedExclusionList: store.filtersReducer.selectedExclusionList,\n    selectedStyleColor: store.filtersReducer.selectedStyleColor,\n    selectedCountry: store.filtersReducer.selectedCountry,\n    selectedStoreCluster: store.filtersReducer.selectedStoreCluster,\n    selectedStore: store.filtersReducer.selectedStore,\n    selectedChannel: store.filtersReducer.selectedChannel,\n  };\n};\n\nconst mapActionToProps = {\n  getMarkdowns: FinalizeAction.getMarkdowns,\n  setMarkDowns: FinalizeAction.setMarkDowns,\n  setMDColumnHeaders: FinalizeAction.setMDColumnHeaders,\n  sendForApproval: FinalizeAction.sendForApproval,\n  onResetFinalizeTable: FinalizeAction.onResetFinalizeTable,\n};\nexport default connect(mapStateToProps, mapActionToProps)(withRouter(FinalizeMarkdown));\nconst ColSelBtn = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n"]},"metadata":{},"sourceType":"module"}