{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/services/reactTable/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  /* This is required to make the table full-width */\\n  display: block;\\n  max-width: 100%;\\n\\n  /* This will make the table scrollable when it gets too small */\\n  .tableWrap {\\n    display: block;\\n    max-width: 100%;\\n    overflow-x: scroll;\\n    overflow-y: hidden;\\n    border-bottom: 1px solid black;\\n  }\\n  table {\\n    width: 100%;\\n    border-spacing: 0;\\n    border: 1px solid #c4ced5;\\n\\n    thead {\\n      background-color: #e7eef2;\\n    }\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0 0rem;\\n      border-bottom: 1px solid #d8e3eb;\\n      border-right: 1px solid #d8e3eb;\\n      font-size: 12px;\\n\\n      /* The secret sauce */\\n      /* Each cell should grow equally */\\n      // width: 1%;\\n      /* But \\\"collapsed\\\" cells should be as small as possible */\\n      &.collapse {\\n        width: 0.0000000001%;\\n      }\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n      input {\\n        width: 100%;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport './index.css';\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useGlobalFilter, useAsyncDebounce, useRowSelect } from 'react-table';\nimport styled from 'styled-components';\nimport matchSorter from 'match-sorter';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n  switch (visibleColumns) {\n    case 'onlyRowSelection':\n      hooks.visibleColumns.push(function (columns) {\n        return [{\n          id: 'selection',\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: function Header(_ref) {\n            var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            })));\n          },\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref2) {\n            var row = _ref2.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n              },\n              __self: this\n            })));\n          }\n        }].concat(_toConsumableArray(columns));\n      });\n      break;\n\n    case 'markDownDrafts':\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          id: 'selection',\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions1',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref3) {\n            var row = _ref3.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({\n              row: row.id\n            }, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 64\n              },\n              __self: this\n            })));\n          }\n        }, {\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions2',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref4) {\n            var row = _ref4.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 79\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    case 'markDownStatus':\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: 'Actions',\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref5) {\n            var row = _ref5.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    default:\n      hooks.useInstance.push(useInstance);\n      break;\n  }\n}\n\nfunction DefaultColumnFilter(_ref6) {\n  var _ref6$column = _ref6.column,\n      filterValue = _ref6$column.filterValue,\n      preFilteredRows = _ref6$column.preFilteredRows,\n      setFilter = _ref6$column.setFilter;\n  var count = preFilteredRows.length;\n  return React.createElement(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  });\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Create a default prop getter\n\n\nvar defaultPropGetter = function defaultPropGetter() {\n  return {};\n};\n\nfunction useInstance(instance) {\n  var allColumns = instance.allColumns;\n  var rowSpanHeaders = [];\n  allColumns.forEach(function (column) {\n    var id = column.id,\n        enableRowSpan = column.enableRowSpan;\n\n    if (enableRowSpan !== undefined) {\n      rowSpanHeaders = [].concat(_toConsumableArray(rowSpanHeaders), [{\n        id: id,\n        topCellValue: null,\n        topCellIndex: 0\n      }]);\n    }\n  });\n  Object.assign(instance, {\n    rowSpanHeaders: rowSpanHeaders\n  });\n}\n\nfunction Table(_ref7) {\n  var columns = _ref7.columns,\n      data = _ref7.data,\n      updateMyData = _ref7.updateMyData,\n      visibleColumns = _ref7.visibleColumns,\n      isColumnFilter = _ref7.isColumnFilter,\n      isCellEdit = _ref7.isCellEdit,\n      defCols = _ref7.defCols,\n      isPagination = _ref7.isPagination,\n      _ref7$getHeaderProps = _ref7.getHeaderProps,\n      getHeaderProps = _ref7$getHeaderProps === void 0 ? defaultPropGetter : _ref7$getHeaderProps,\n      _ref7$getColumnProps = _ref7.getColumnProps,\n      getColumnProps = _ref7$getColumnProps === void 0 ? defaultPropGetter : _ref7$getColumnProps,\n      _ref7$getRowProps = _ref7.getRowProps,\n      getRowProps = _ref7$getRowProps === void 0 ? defaultPropGetter : _ref7$getRowProps,\n      _ref7$getCellProps = _ref7.getCellProps,\n      getCellProps = _ref7$getCellProps === void 0 ? defaultPropGetter : _ref7$getCellProps,\n      isSort = _ref7.isSort,\n      isHeaderHidden = _ref7.isHeaderHidden;\n  //Column Filter Configuration\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Add a new fuzzyTextFilterFn filter type.\n      // fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    };\n  }, []); // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n  // Use the state and functions returned from useTable to build your UI\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // defaultColumn,//for setting default view\n    filterTypes: filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    disableMultiSort: true,\n    initialState: {\n      groupBy: []\n    }\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, // Here we will use a plugin to add our selection column\n  function (hooks) {\n    setVisibleColumns(hooks, visibleColumns);\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      rows = _useTable.rows,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      rowSpanHeaders = _useTable.rowSpanHeaders,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize,\n      sortBy = _useTable$state.sortBy,\n      groupBy = _useTable$state.groupBy,\n      expanded = _useTable$state.expanded,\n      filters = _useTable$state.filters,\n      selectedRowIds = _useTable$state.selectedRowIds;\n\n  var tableData = [];\n\n  if (isPagination) {\n    tableData = page;\n  } else {\n    tableData = rows;\n  } // Render the UI for your table\n\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }), isHeaderHidden ? null : React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return React.createElement(\"th\", Object.assign({\n        className: \"thth\"\n      }, column.getHeaderProps({\n        className: column.collapse ? 'collapse' : ''\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dis_flex_r\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, column.canGroupBy ? // If the column can be grouped, let's add a toggle\n      React.createElement(\"div\", Object.assign({}, column.getGroupByToggleProps(), {\n        className: \"plr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }), column.isGrouped ? '🛑 ' : React.createElement(\"i\", {\n        className: \"fa fa-users\",\n        \"aria-hidden\": \"true\",\n        style: {\n          display: 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      })) : null, isSort ? React.createElement(\"div\", Object.assign({}, column.getSortByToggleProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }), column.render('Header'), \" \\xA0\", !column.isSorted ? typeof column.Header !== 'string' ? '' : React.createElement(\"i\", {\n        className: \"fa fa-arrows-v\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }) : column.isSortedDesc ? React.createElement(\"i\", {\n        className: \"fa fa-long-arrow-down\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        className: \"fa fa-long-arrow-up\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      })) : column.render('Header')), isColumnFilter ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, column.canFilter ? column.render('Filter') : null) : '');\n    }));\n  })), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }), rowSpanHeaders && tableData.map(function (row, i) {\n    prepareRow(row);\n\n    var _loop = function _loop(j) {\n      var cell = row.allCells[j];\n      var rowSpanHeader = rowSpanHeaders.find(function (x) {\n        return x.id === cell.column.id;\n      });\n\n      if (rowSpanHeader !== undefined) {\n        if (rowSpanHeader.topCellValue === null || rowSpanHeader.topCellValue !== cell.value) {\n          cell.isRowSpanned = false;\n          rowSpanHeader.topCellValue = cell.value;\n          rowSpanHeader.topCellIndex = i;\n          cell.rowSpan = 1;\n        } else {\n          page[rowSpanHeader.topCellIndex].allCells[j].rowSpan++;\n          cell.isRowSpanned = true;\n        }\n      }\n    };\n\n    for (var j = 0; j < row.allCells.length; j++) {\n      _loop(j);\n    }\n\n    return null;\n  }), tableData.map(function (row) {\n    if (!rowSpanHeaders || rowSpanHeaders && rowSpanHeaders.length === 0) {\n      prepareRow(row);\n    }\n\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps([getRowProps(row)]), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      row.getToggleRowExpandedProps();\n      if (cell.isRowSpanned) return null;else {\n        return React.createElement(\"td\", Object.assign({\n          className: \"tdtd\",\n          rowSpan: cell.rowSpan\n        }, cell.getCellProps(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373\n          },\n          __self: this\n        }), cell.isGrouped ? // If it's a grouped cell, add an expander and row count\n        React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          className: \"dis_flex_r\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377\n          },\n          __self: this\n        }, cell.render('Cell', {\n          editable: false\n        }), React.createElement(\"div\", Object.assign({}, row.getToggleRowExpandedProps(), {\n          className: \"expandCollapseArrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379\n          },\n          __self: this\n        }), row.isExpanded ? React.createElement(\"i\", {\n          className: \"fa fa-angle-down fa-lg\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383\n          },\n          __self: this\n        }) : React.createElement(\"i\", {\n          class: \"fa fa-angle-right fa-lg\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385\n          },\n          __self: this\n        })), ' ')) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n        // renderer for cell\n        cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n        // Otherwise, just render the regular cell\n        React.createElement(\"div\", Object.assign({}, cell.getCellProps([{\n          className: cell.column.className,\n          style: cell.column.style\n        }, getColumnProps(cell.column), getCellProps(cell)]), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396\n          },\n          __self: this\n        }), cell.render('Cell', {\n          editable: true\n        })));\n      }\n    }));\n  })))), tableData && tableData.length ? '' : React.createElement(\"div\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418\n    },\n    __self: this\n  }), isPagination && data && data.length ? React.createElement(\"div\", {\n    className: \"pagination dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426\n    },\n    __self: this\n  }, \"Showing\", ' ', React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    },\n    __self: this\n  }, pageIndex > 0 ? \"\".concat(pageSize + 1, \" to \").concat(pageSize * (pageIndex + 1), \" of \").concat(rows.length) : \"\".concat(pageIndex + 1, \" to \").concat(pageSize, \" of \").concat(rows.length)), ' '), React.createElement(\"div\", {\n    className: \"dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }, '<<'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, '<'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456\n    },\n    __self: this\n  }, '>'), ' ', React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459\n    },\n    __self: this\n  }, '>>')), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, \"Per page\", React.createElement(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return React.createElement(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \"Show \", pageSize);\n  })))) : '');\n}\n\nexport default Table;\nvar Styles = styled.div(_templateObject());","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/services/reactTable/index.js"],"names":["React","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useGlobalFilter","useAsyncDebounce","useRowSelect","styled","matchSorter","IndeterminateCheckbox","setVisibleColumns","hooks","visibleColumns","push","columns","id","groupByBoundary","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","useInstance","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","fuzzyTextFilterFn","rows","keys","values","autoRemove","val","defaultPropGetter","instance","allColumns","rowSpanHeaders","forEach","enableRowSpan","topCellValue","topCellIndex","Object","assign","Table","data","updateMyData","isColumnFilter","isCellEdit","defCols","isPagination","getHeaderProps","getColumnProps","getRowProps","getCellProps","isSort","isHeaderHidden","filterTypes","useMemo","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","disableMultiSort","initialState","groupBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","sortBy","expanded","filters","selectedRowIds","tableData","map","headerGroup","getHeaderGroupProps","headers","className","collapse","canGroupBy","getGroupByToggleProps","isGrouped","display","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","i","j","cell","allCells","rowSpanHeader","find","x","isRowSpanned","rowSpan","cells","getToggleRowExpandedProps","editable","isExpanded","isAggregated","isPlaceholder","style","Number","Styles","div"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useGlobalFilter,\n  useAsyncDebounce,\n  useRowSelect,\n} from 'react-table';\nimport styled from 'styled-components';\nimport matchSorter from 'match-sorter';\nimport IndeterminateCheckbox from '../../components/cellRenders/inderterminateCheckbox';\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n  switch (visibleColumns) {\n    case 'onlyRowSelection':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ];\n      });\n      break;\n    case 'markDownDrafts':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions1',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => {\n              return (\n                <div>\n                  <IndeterminateCheckbox row={row.id} {...row.getToggleRowSelectedProps()} />\n                </div>\n              );\n            },\n          },\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions2',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n    case 'markDownStatus':\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: 'Actions',\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n\n    default:\n      hooks.useInstance.push(useInstance);\n      break;\n  }\n}\nfunction DefaultColumnFilter({ column: { filterValue, preFilteredRows, setFilter } }) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Create a default prop getter\nconst defaultPropGetter = () => ({});\n\nfunction useInstance(instance) {\n  const { allColumns } = instance;\n\n  let rowSpanHeaders = [];\n\n  allColumns.forEach((column) => {\n    const { id, enableRowSpan } = column;\n\n    if (enableRowSpan !== undefined) {\n      rowSpanHeaders = [...rowSpanHeaders, { id: id, topCellValue: null, topCellIndex: 0 }];\n    }\n  });\n\n  Object.assign(instance, {\n    rowSpanHeaders: rowSpanHeaders,\n  });\n}\n\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  visibleColumns,\n  isColumnFilter,\n  isCellEdit,\n  defCols,\n  isPagination,\n  getHeaderProps = defaultPropGetter,\n  getColumnProps = defaultPropGetter,\n  getRowProps = defaultPropGetter,\n  getCellProps = defaultPropGetter,\n  isSort,\n  isHeaderHidden,\n}) {\n  //Column Filter Configuration\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Add a new fuzzyTextFilterFn filter type.\n      // fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    rows, // Instead of using 'rows', we'll use page, which has only the rows for the active page, The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    rowSpanHeaders,\n    state: { pageIndex, pageSize, sortBy, groupBy, expanded, filters, selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // defaultColumn,//for setting default view\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      disableMultiSort: true,\n      initialState: {\n        groupBy: [],\n      },\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    (hooks) => {\n      setVisibleColumns(hooks, visibleColumns);\n    }\n  );\n  var tableData = [];\n  if (isPagination) {\n    tableData = page;\n  } else {\n    tableData = rows;\n  }\n\n  // Render the UI for your table\n  return (\n    <Styles>\n      <div>\n        <table {...getTableProps()}>\n          {isHeaderHidden ? null : (\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((column) => {\n                    return (\n                      <th\n                        className=\"thth\"\n                        {...column.getHeaderProps({\n                          className: column.collapse ? 'collapse' : '',\n                        })}>\n                        <div className=\"dis_flex_r\">\n                          {column.canGroupBy ? (\n                            // If the column can be grouped, let's add a toggle\n                            <div {...column.getGroupByToggleProps()} className=\"plr\">\n                              {column.isGrouped ? (\n                                '🛑 '\n                              ) : (\n                                <i\n                                  className=\"fa fa-users\"\n                                  aria-hidden=\"true\"\n                                  style={{ display: 'none' }}\n                                />\n                              )}\n                            </div>\n                          ) : null}\n\n                          {isSort ? (\n                            <div {...column.getSortByToggleProps()}>\n                              {column.render('Header')} &nbsp;\n                              {!column.isSorted ? (\n                                typeof column.Header !== 'string' ? (\n                                  ''\n                                ) : (\n                                  <i className=\"fa fa-arrows-v\" aria-hidden=\"true\" />\n                                )\n                              ) : column.isSortedDesc ? (\n                                <i className=\"fa fa-long-arrow-down\" aria-hidden=\"true\" />\n                              ) : (\n                                <i className=\"fa fa-long-arrow-up\" aria-hidden=\"true\" />\n                              )}\n                            </div>\n                          ) : (\n                            column.render('Header')\n                          )}\n                        </div>\n                        {/* Render the columns filter UI */}\n                        {isColumnFilter ? (\n                          <div>{column.canFilter ? column.render('Filter') : null}</div>\n                        ) : (\n                          ''\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n          )}\n\n          <tbody {...getTableBodyProps()}>\n            {/* Row Span */}\n            {rowSpanHeaders &&\n              tableData.map((row, i) => {\n                prepareRow(row);\n                for (let j = 0; j < row.allCells.length; j++) {\n                  let cell = row.allCells[j];\n                  let rowSpanHeader = rowSpanHeaders.find((x) => x.id === cell.column.id);\n                  if (rowSpanHeader !== undefined) {\n                    if (\n                      rowSpanHeader.topCellValue === null ||\n                      rowSpanHeader.topCellValue !== cell.value\n                    ) {\n                      cell.isRowSpanned = false;\n                      rowSpanHeader.topCellValue = cell.value;\n                      rowSpanHeader.topCellIndex = i;\n                      cell.rowSpan = 1;\n                    } else {\n                      page[rowSpanHeader.topCellIndex].allCells[j].rowSpan++;\n                      cell.isRowSpanned = true;\n                    }\n                  }\n                }\n                return null;\n              })}\n\n            {tableData.map((row) => {\n              if (!rowSpanHeaders || (rowSpanHeaders && rowSpanHeaders.length === 0)) {\n                prepareRow(row);\n              }\n              return (\n                <tr {...row.getRowProps([getRowProps(row)])}>\n                  {row.cells.map((cell) => {\n                    row.getToggleRowExpandedProps();\n                    if (cell.isRowSpanned) return null;\n                    else {\n                      return (\n                        <td className=\"tdtd\" rowSpan={cell.rowSpan} {...cell.getCellProps()}>\n                          {cell.isGrouped ? (\n                            // If it's a grouped cell, add an expander and row count\n                            <>\n                              <div className=\"dis_flex_r\">\n                                {cell.render('Cell', { editable: false })}\n                                <div\n                                  {...row.getToggleRowExpandedProps()}\n                                  className=\"expandCollapseArrow\">\n                                  {row.isExpanded ? (\n                                    <i className=\"fa fa-angle-down fa-lg\" aria-hidden=\"true\" />\n                                  ) : (\n                                    <i class=\"fa fa-angle-right fa-lg\" aria-hidden=\"true\" />\n                                  )}\n                                </div>{' '}\n                              </div>\n                            </>\n                          ) : cell.isAggregated ? (\n                            // If the cell is aggregated, use the Aggregated\n                            // renderer for cell\n                            cell.render('Aggregated')\n                          ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                            // Otherwise, just render the regular cell\n                            <div\n                              {...cell.getCellProps([\n                                {\n                                  className: cell.column.className,\n                                  style: cell.column.style,\n                                },\n                                getColumnProps(cell.column),\n                                getCellProps(cell),\n                              ])}>\n                              {cell.render('Cell', { editable: true })}\n                            </div>\n                          )}\n                        </td>\n                      );\n                    }\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {tableData && tableData.length ? '' : <div align=\"center\"></div>}\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n\n      {isPagination && data && data.length ? (\n        <div className=\"pagination dis_flex_r\">\n          <div>\n            Showing{' '}\n            <strong>\n              {pageIndex > 0\n                ? `${pageSize + 1} to ${pageSize * (pageIndex + 1)} of ${rows.length}`\n                : `${pageIndex + 1} to ${pageSize} of ${rows.length}`}\n            </strong>{' '}\n          </div>\n          <div className=\"dis_flex_r\">\n            <button className=\"pages\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n              {'<<'}\n            </button>{' '}\n            <button className=\"pages\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n              {'<'}\n            </button>{' '}\n            {/* {pageOptions.map((page) => {\n              return (\n                <div\n                  className=\"pagination-options\"\n                  onClick={() => {\n                    gotoPage(page);\n                  }}>\n                  {pageIndex + 1 === page + 1 ? (\n                    <div className=\"pageCountActive\">{page + 1}</div>\n                  ) : (\n                    <div className=\"pageCount\">{page + 1}</div>\n                  )}\n                </div>\n              );\n            })} */}\n            <button className=\"pages\" onClick={() => nextPage()} disabled={!canNextPage}>\n              {'>'}\n            </button>{' '}\n            <button\n              className=\"pages\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}>\n              {'>>'}\n            </button>\n          </div>\n          {/* <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"} */}\n          <div>\n            Per page\n            <select\n              value={pageSize}\n              onChange={(e) => {\n                setPageSize(Number(e.target.value));\n              }}>\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <option key={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n    </Styles>\n  );\n}\n\nexport default Table;\n\nconst Styles = styled.div`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    border-bottom: 1px solid black;\n  }\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border: 1px solid #c4ced5;\n\n    thead {\n      background-color: #e7eef2;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0 0rem;\n      border-bottom: 1px solid #d8e3eb;\n      border-right: 1px solid #d8e3eb;\n      font-size: 12px;\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      // width: 1%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n      input {\n        width: 100%;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}