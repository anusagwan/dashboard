{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { config } from '../utils/config';\nimport { toast } from 'react-toastify';\nvar storeConfigActions = {\n  fetchStoreGroups: function fetchStoreGroups() {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      axios({\n        url: \"\".concat(config.createMarkdownURL, \"/get-storesgroups/\"),\n        method: 'GET'\n      }).then(function (resp) {\n        console.log(resp.data.data, 'storesgroups');\n        dispatch({\n          type: 'SET_STORE_GROUPS',\n          payload: resp.data.data\n        });\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      }).catch(function (err) {\n        console.log(err);\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      });\n    };\n  },\n  getStoreGroupTableData: function getStoreGroupTableData(reqObj) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(dispatch) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch({\n                    type: 'LOADER_STATE',\n                    payload: {\n                      status: true\n                    }\n                  });\n                  _context.next = 3;\n                  return axios({\n                    url: \"\".concat(config.createMarkdownURL, \"/get-stores/\"),\n                    method: 'POST',\n                    data: reqObj\n                  }).then(function (resp) {\n                    console.log(resp.data.data, reqObj, 'get-stores');\n\n                    if (reqObj) {\n                      dispatch({\n                        type: 'CURRENT_STORE_GROUP_TABLE_DATA',\n                        payload: resp.data.data\n                      });\n                    } else {\n                      dispatch({\n                        type: 'SET_STORE_GROUP_TABLE_DATA',\n                        payload: resp.data.data\n                      });\n                    }\n\n                    dispatch({\n                      type: 'LOADER_STATE',\n                      payload: {\n                        status: false\n                      }\n                    });\n                    return resp && resp.data && resp.data.data ? resp.data.data : [];\n                  }).catch(function (err) {\n                    console.log(err);\n                    dispatch({\n                      type: 'LOADER_STATE',\n                      payload: {\n                        status: false\n                      }\n                    });\n                    return [];\n                  });\n\n                case 3:\n                  res = _context.sent;\n                  return _context.abrupt(\"return\", res);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  createStoreGroup: function createStoreGroup(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      axios({\n        url: \"\".concat(config.createMarkdownURL, \"/get-stores-create/\"),\n        method: 'POST',\n        data: reqObj\n      }).then(function (resp) {\n        toast.success('Store Group Created Successfully', {\n          autoClose: 15000,\n          hideProgressBar: true\n        });\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        console.log(resp, 'get-stores-create');\n      }).catch(function (err) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        console.log(err);\n      });\n    };\n  },\n  editStoreGroup: function editStoreGroup(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      axios({\n        url: \"\".concat(config.createMarkdownURL, \"/get-stores-edit/\"),\n        method: 'POST',\n        data: reqObj\n      }).then(function (resp) {\n        toast.success('Store Group Updated Successfully', {\n          autoClose: 15000,\n          hideProgressBar: true\n        });\n        console.log(resp, 'stpreresp');\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      }).catch(function (err) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        console.log(err);\n      });\n    };\n  }\n};\nexport default storeConfigActions;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/actions/storeConfigActions.js"],"names":["axios","config","toast","storeConfigActions","fetchStoreGroups","dispatch","type","payload","status","url","createMarkdownURL","method","then","resp","console","log","data","catch","err","getStoreGroupTableData","reqObj","res","createStoreGroup","success","autoClose","hideProgressBar","editStoreGroup"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { config } from '../utils/config';\nimport { toast } from 'react-toastify';\n\nconst storeConfigActions = {\n  fetchStoreGroups: () => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      axios({\n        url: `${config.createMarkdownURL}/get-storesgroups/`,\n        method: 'GET',\n      })\n        .then((resp) => {\n          console.log(resp.data.data, 'storesgroups');\n          dispatch({\n            type: 'SET_STORE_GROUPS',\n            payload: resp.data.data,\n          });\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        });\n    };\n  },\n  getStoreGroupTableData: (reqObj) => {\n    return async (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      let res = await axios({\n        url: `${config.createMarkdownURL}/get-stores/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          console.log(resp.data.data, reqObj, 'get-stores');\n          if (reqObj) {\n            dispatch({\n              type: 'CURRENT_STORE_GROUP_TABLE_DATA',\n              payload: resp.data.data,\n            });\n          } else {\n            dispatch({\n              type: 'SET_STORE_GROUP_TABLE_DATA',\n              payload: resp.data.data,\n            });\n          }\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return resp && resp.data && resp.data.data ? resp.data.data : [];\n        })\n        .catch((err) => {\n          console.log(err);\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return [];\n        });\n      return res;\n    };\n  },\n  createStoreGroup: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      axios({\n        url: `${config.createMarkdownURL}/get-stores-create/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          toast.success('Store Group Created Successfully', {\n            autoClose: 15000,\n            hideProgressBar: true,\n          });\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          console.log(resp, 'get-stores-create');\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          console.log(err);\n        });\n    };\n  },\n  editStoreGroup: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      axios({\n        url: `${config.createMarkdownURL}/get-stores-edit/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          toast.success('Store Group Updated Successfully', {\n            autoClose: 15000,\n            hideProgressBar: true,\n          });\n          console.log(resp, 'stpreresp');\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          console.log(err);\n        });\n    };\n  },\n};\n\nexport default storeConfigActions;\n"]},"metadata":{},"sourceType":"module"}