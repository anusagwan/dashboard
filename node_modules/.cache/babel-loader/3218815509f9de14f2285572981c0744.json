{"ast":null,"code":"import _objectSpread from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nimport { resetFilterData } from '../helper/filterHelperFuncs';\nvar filtersDefaultState = {\n  selectedCustomStyleName: [],\n  retainFilters: false,\n  filtersList: {},\n  filtersLabels: {},\n  daterangeOrWeek: {},\n  filtersData: {},\n  lastSavedFilters: {\n    filters: {}\n  }\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filtersDefaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_FILTERS_DATA':\n      var _$cloneDeep = _.cloneDeep(action),\n          filterName = _$cloneDeep.filterName,\n          dataType = _$cloneDeep.dataType,\n          payload = _$cloneDeep.payload;\n\n      var filtersData = payload;\n\n      if (filterName) {\n        var _newFiltersData = _objectSpread({}, state.filtersData);\n\n        if (!_.isEmpty(_newFiltersData[filterName])) {\n          //case filter name already exists in reducer\n          if (dataType === 'options') {\n            _newFiltersData[filterName][dataType] = payload;\n          }\n\n          if (dataType === 'selectedItems') {\n            var resetValues = false;\n\n            _.map(Object.keys(_newFiltersData), function (o) {\n              if (resetValues) {\n                _newFiltersData[o] = {\n                  options: [],\n                  selectedItems: [],\n                  selectedItemsArray: []\n                };\n              }\n\n              if (o === filterName && o === 'dateRange') {\n                _newFiltersData[o] = payload;\n              }\n\n              if (o === filterName && o !== 'dateRange') {\n                _newFiltersData[o][dataType] = payload;\n                _newFiltersData[o]['selectedItemsArray'] = _.map(payload, function (e) {\n                  return (//e.value.replace(/'/g, \"''\")\n                    o === 'customStyleGroup' ? e.id : e.value\n                  );\n                });\n                resetValues = true; //filters onwards this one will get reset\n              }\n            });\n          }\n        } else {\n          //case filter name doesn't exists in reducer, then add it to the reducer\n          //this case will only exist for options type\n          _newFiltersData[filterName] = {\n            options: payload,\n            selectedItems: [],\n            selectedItemsArray: []\n          };\n        }\n\n        filtersData = _newFiltersData;\n      }\n\n      if (!filterName && !_.isEmpty(state.filtersData)) {\n        var _newFiltersData2 = _.cloneDeep(state.filtersData);\n\n        _.map(Object.keys(_newFiltersData2), function (o) {\n          filtersData[o] = _newFiltersData2[o];\n        });\n      }\n\n      return _objectSpread({}, state, {\n        filtersData: filtersData\n      });\n\n    case 'SET_FILTERS_LIST':\n      return _objectSpread({}, state, {\n        filtersList: action.payload\n      });\n\n    case 'SET_FILTERS_LABELS':\n      return _objectSpread({}, state, {\n        filtersLabels: action.payload\n      });\n\n    case 'SET_DATERANGE_WEEK':\n      return _objectSpread({}, state, {\n        daterangeOrWeek: action.payload\n      });\n\n    case 'SELECTED_CUSTOM_STYLE_GROUP_NAME':\n      return _objectSpread({}, state, {\n        selectedCustomStyleName: action.payload\n      });\n\n    case 'RESET_FILTERS_DATA':\n      return _objectSpread({}, state, {\n        filtersData: action.payload\n      });\n\n    case 'SET_RETAIN_FILTERS':\n      return _objectSpread({}, state, {\n        retainFilters: action.payload\n      });\n\n    case 'SET_LAST_SAVED_FILTERS':\n      return _objectSpread({}, state, {\n        lastSavedFilters: action.payload\n      });\n\n    case 'RESET_FILTERS':\n      var newFiltersData = resetFilterData(state.filtersData);\n      return _objectSpread({}, state, {\n        filtersData: newFiltersData\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/reducers/filtersReducer.js"],"names":["_","resetFilterData","filtersDefaultState","selectedCustomStyleName","retainFilters","filtersList","filtersLabels","daterangeOrWeek","filtersData","lastSavedFilters","filters","state","action","type","cloneDeep","filterName","dataType","payload","newFiltersData","isEmpty","resetValues","map","Object","keys","o","options","selectedItems","selectedItemsArray","e","id","value"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,uBAAuB,EAAE,EADC;AAE1BC,EAAAA,aAAa,EAAE,KAFW;AAI1BC,EAAAA,WAAW,EAAE,EAJa;AAK1BC,EAAAA,aAAa,EAAE,EALW;AAM1BC,EAAAA,eAAe,EAAE,EANS;AAQ1BC,EAAAA,WAAW,EAAE,EARa;AAS1BC,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX;AATQ,CAA5B;AAYA,gBAAe,YAAyC;AAAA,MAAxCC,KAAwC,uEAAhCT,mBAAgC;AAAA,MAAXU,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AAAA,wBAC0Cb,CAAC,CAACc,SAAF,CAAYF,MAAZ,CAD1C;AAAA,UACQG,UADR,eACQA,UADR;AAAA,UACoBC,QADpB,eACoBA,QADpB;AAAA,UAC8BC,OAD9B,eAC8BA,OAD9B;;AAEE,UAAIT,WAAW,GAAGS,OAAlB;;AACA,UAAIF,UAAJ,EAAgB;AACd,YAAIG,eAAc,qBAAQP,KAAK,CAACH,WAAd,CAAlB;;AAEA,YAAI,CAACR,CAAC,CAACmB,OAAF,CAAUD,eAAc,CAACH,UAAD,CAAxB,CAAL,EAA4C;AAC1C;AAEA,cAAIC,QAAQ,KAAK,SAAjB,EAA4B;AAC1BE,YAAAA,eAAc,CAACH,UAAD,CAAd,CAA2BC,QAA3B,IAAuCC,OAAvC;AACD;;AAED,cAAID,QAAQ,KAAK,eAAjB,EAAkC;AAChC,gBAAII,WAAW,GAAG,KAAlB;;AACApB,YAAAA,CAAC,CAACqB,GAAF,CAAMC,MAAM,CAACC,IAAP,CAAYL,eAAZ,CAAN,EAAmC,UAACM,CAAD,EAAO;AACxC,kBAAIJ,WAAJ,EAAiB;AACfF,gBAAAA,eAAc,CAACM,CAAD,CAAd,GAAoB;AAClBC,kBAAAA,OAAO,EAAE,EADS;AAElBC,kBAAAA,aAAa,EAAE,EAFG;AAGlBC,kBAAAA,kBAAkB,EAAE;AAHF,iBAApB;AAKD;;AACD,kBAAIH,CAAC,KAAKT,UAAN,IAAoBS,CAAC,KAAK,WAA9B,EAA2C;AACzCN,gBAAAA,eAAc,CAACM,CAAD,CAAd,GAAoBP,OAApB;AACD;;AACD,kBAAIO,CAAC,KAAKT,UAAN,IAAoBS,CAAC,KAAK,WAA9B,EAA2C;AACzCN,gBAAAA,eAAc,CAACM,CAAD,CAAd,CAAkBR,QAAlB,IAA8BC,OAA9B;AACAC,gBAAAA,eAAc,CAACM,CAAD,CAAd,CAAkB,oBAAlB,IAA0CxB,CAAC,CAACqB,GAAF,CAAMJ,OAAN,EAAe,UAACW,CAAD;AAAA,yBACvD;AACAJ,oBAAAA,CAAC,KAAK,kBAAN,GAA2BI,CAAC,CAACC,EAA7B,GAAkCD,CAAC,CAACE;AAFmB;AAAA,iBAAf,CAA1C;AAIAV,gBAAAA,WAAW,GAAG,IAAd,CANyC,CAMrB;AACrB;AACF,aAnBD;AAoBD;AACF,SA9BD,MA8BO;AACL;AACA;AACAF,UAAAA,eAAc,CAACH,UAAD,CAAd,GAA6B;AAC3BU,YAAAA,OAAO,EAAER,OADkB;AAE3BS,YAAAA,aAAa,EAAE,EAFY;AAG3BC,YAAAA,kBAAkB,EAAE;AAHO,WAA7B;AAKD;;AACDnB,QAAAA,WAAW,GAAGU,eAAd;AACD;;AACD,UAAI,CAACH,UAAD,IAAe,CAACf,CAAC,CAACmB,OAAF,CAAUR,KAAK,CAACH,WAAhB,CAApB,EAAkD;AAChD,YAAIU,gBAAc,GAAGlB,CAAC,CAACc,SAAF,CAAYH,KAAK,CAACH,WAAlB,CAArB;;AACAR,QAAAA,CAAC,CAACqB,GAAF,CAAMC,MAAM,CAACC,IAAP,CAAYL,gBAAZ,CAAN,EAAmC,UAACM,CAAD,EAAO;AACxChB,UAAAA,WAAW,CAACgB,CAAD,CAAX,GAAiBN,gBAAc,CAACM,CAAD,CAA/B;AACD,SAFD;AAGD;;AACD,+BACKb,KADL;AAEEH,QAAAA,WAAW,EAAXA;AAFF;;AAKF,SAAK,kBAAL;AACE,+BACKG,KADL;AAEEN,QAAAA,WAAW,EAAEO,MAAM,CAACK;AAFtB;;AAIF,SAAK,oBAAL;AACE,+BACKN,KADL;AAEEL,QAAAA,aAAa,EAAEM,MAAM,CAACK;AAFxB;;AAIF,SAAK,oBAAL;AACE,+BACKN,KADL;AAEEJ,QAAAA,eAAe,EAAEK,MAAM,CAACK;AAF1B;;AAIF,SAAK,kCAAL;AACE,+BACKN,KADL;AAEER,QAAAA,uBAAuB,EAAES,MAAM,CAACK;AAFlC;;AAKF,SAAK,oBAAL;AACE,+BACKN,KADL;AAEEH,QAAAA,WAAW,EAAEI,MAAM,CAACK;AAFtB;;AAIF,SAAK,oBAAL;AACE,+BACKN,KADL;AAEEP,QAAAA,aAAa,EAAEQ,MAAM,CAACK;AAFxB;;AAKF,SAAK,wBAAL;AACE,+BACKN,KADL;AAEEF,QAAAA,gBAAgB,EAAEG,MAAM,CAACK;AAF3B;;AAKF,SAAK,eAAL;AACE,UAAIC,cAAc,GAAGjB,eAAe,CAACU,KAAK,CAACH,WAAP,CAApC;AACA,+BACKG,KADL;AAEEH,QAAAA,WAAW,EAAEU;AAFf;;AAKF;AACE,aAAOP,KAAP;AAzGJ;AA2GD,CA5GD","sourcesContent":["import _ from 'lodash';\nimport { resetFilterData } from '../helper/filterHelperFuncs';\n\nconst filtersDefaultState = {\n  selectedCustomStyleName: [],\n  retainFilters: false,\n\n  filtersList: {},\n  filtersLabels: {},\n  daterangeOrWeek: {},\n\n  filtersData: {},\n  lastSavedFilters: { filters: {} },\n};\n\nexport default (state = filtersDefaultState, action) => {\n  switch (action.type) {\n    case 'SET_FILTERS_DATA':\n      let { filterName, dataType, payload } = _.cloneDeep(action);\n      let filtersData = payload;\n      if (filterName) {\n        let newFiltersData = { ...state.filtersData };\n\n        if (!_.isEmpty(newFiltersData[filterName])) {\n          //case filter name already exists in reducer\n\n          if (dataType === 'options') {\n            newFiltersData[filterName][dataType] = payload;\n          }\n\n          if (dataType === 'selectedItems') {\n            let resetValues = false;\n            _.map(Object.keys(newFiltersData), (o) => {\n              if (resetValues) {\n                newFiltersData[o] = {\n                  options: [],\n                  selectedItems: [],\n                  selectedItemsArray: [],\n                };\n              }\n              if (o === filterName && o === 'dateRange') {\n                newFiltersData[o] = payload;\n              }\n              if (o === filterName && o !== 'dateRange') {\n                newFiltersData[o][dataType] = payload;\n                newFiltersData[o]['selectedItemsArray'] = _.map(payload, (e) =>\n                  //e.value.replace(/'/g, \"''\")\n                  o === 'customStyleGroup' ? e.id : e.value\n                );\n                resetValues = true; //filters onwards this one will get reset\n              }\n            });\n          }\n        } else {\n          //case filter name doesn't exists in reducer, then add it to the reducer\n          //this case will only exist for options type\n          newFiltersData[filterName] = {\n            options: payload,\n            selectedItems: [],\n            selectedItemsArray: [],\n          };\n        }\n        filtersData = newFiltersData;\n      }\n      if (!filterName && !_.isEmpty(state.filtersData)) {\n        let newFiltersData = _.cloneDeep(state.filtersData);\n        _.map(Object.keys(newFiltersData), (o) => {\n          filtersData[o] = newFiltersData[o];\n        });\n      }\n      return {\n        ...state,\n        filtersData,\n      };\n\n    case 'SET_FILTERS_LIST':\n      return {\n        ...state,\n        filtersList: action.payload,\n      };\n    case 'SET_FILTERS_LABELS':\n      return {\n        ...state,\n        filtersLabels: action.payload,\n      };\n    case 'SET_DATERANGE_WEEK':\n      return {\n        ...state,\n        daterangeOrWeek: action.payload,\n      };\n    case 'SELECTED_CUSTOM_STYLE_GROUP_NAME':\n      return {\n        ...state,\n        selectedCustomStyleName: action.payload,\n      };\n\n    case 'RESET_FILTERS_DATA':\n      return {\n        ...state,\n        filtersData: action.payload,\n      };\n    case 'SET_RETAIN_FILTERS':\n      return {\n        ...state,\n        retainFilters: action.payload,\n      };\n\n    case 'SET_LAST_SAVED_FILTERS':\n      return {\n        ...state,\n        lastSavedFilters: action.payload,\n      };\n\n    case 'RESET_FILTERS':\n      let newFiltersData = resetFilterData(state.filtersData);\n      return {\n        ...state,\n        filtersData: newFiltersData,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}