{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/Finalize/coldef.js\";\nimport React from 'react';\nimport { toPercentage, toPercentageWithDecimalDraft, toDollarWithlDraft, toUnitDraft, toFixedToTwoDraft } from '../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default (function () {\n  var colDef = [{\n    Header: 'MD Plan',\n    accessor: 'md_plan',\n    disableGroupBy: true,\n    align: 'left',\n    enableRowSpan: true\n  }, {\n    Header: 'Scenario',\n    accessor: 'scenario',\n    disableGroupBy: true,\n    enableRowSpan: true\n  }, {\n    // Build our expander column\n    id: 'expander',\n    // Make sure it has an ID\n    // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n    //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n    // ),\n    Header: 'Date Range',\n    width: 15,\n    Cell: function Cell(_ref) {\n      var row = _ref.row;\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      console.log('czseferuuuuuuu', row);\n      return row.canExpand ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), moment(row.original.start_date).format('YYYY/MM/DD'), \" -\", ' ', moment(row.original.end_date).format('YYYY/MM/DD'), \"\\xA0\\xA0\\xA0\", row.isExpanded ? React.createElement(\"i\", {\n        class: \"fa fa-angle-down expanded-icon-size color-blue\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right expanded-icon-size color-blue\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })) : '-';\n    }\n  }, {\n    Header: 'Time Period',\n    accessor: 'week_num',\n    disableGroupBy: false,\n    isGroupBy: false,\n    Aggregated: function Aggregated(_ref2) {\n      var value = _ref2.value,\n          row = _ref2.row;\n      return \"weeks (\".concat(row.subRows.length, \")\");\n    }\n  }, {\n    Header: 'Sell through%',\n    accessor: 'sell_through',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" \", toPercentageWithDecimalDraft(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_sell_through;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, val ? parseFloat(val).toFixed(2) : '-');\n    }\n  }, {\n    Header: 'Markdown %',\n    accessor: 'markdown_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'average',\n    Aggregated: function Aggregated(_ref3) {\n      var value = _ref3.value;\n      return '-';\n    }\n  }, {\n    Header: 'Margin%',\n    accessor: 'margin_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \" \", toPercentageWithDecimalDraft(props), \" \");\n    },\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_margin;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, val ? Number(val).toFixed(2) : '-');\n    }\n  }, {\n    Header: 'Aum',\n    accessor: 'aum',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, toFixedToTwoDraft(props));\n    },\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_aum;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, val ? Number(val).toFixed(2) : '-');\n    }\n  }, {\n    Header: 'Aur',\n    accessor: 'aur',\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, toFixedToTwoDraft(props));\n    },\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_aur;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, val ? Number(val).toFixed(2) : '-');\n    }\n  }, {\n    Header: 'Planned Units',\n    accessor: 'plannedUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, toUnitDraft(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_planned_units;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, val ? Number(val).toLocaleString('en') : '-');\n    }\n  }, {\n    Header: 'Actual Units',\n    accessor: 'actualUnits',\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, toUnitDraft(props));\n    },\n    disableGroupBy: true,\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_units;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, val ? Number(val).toLocaleString('en') : '-');\n    }\n  }, {\n    Header: 'Revenue $',\n    accessor: 'revenue$',\n    Aggregated: function Aggregated(row) {\n      var val = row.row.original.overall_revenue$;\n      console.log(val.toFixed(2), 'fixed');\n      console.log(parseFloat(val).toFixed(2), 'valalala');\n      console.log(Number(val).toFixed(2), 'nu,ber');\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, val ? parseInt(val).toLocaleString('en') : '-');\n    },\n    disableGroupBy: true,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \" \", toDollarWithlDraft(props), \" \");\n    }\n  }];\n  return colDef;\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/Finalize/coldef.js"],"names":["React","toPercentage","toPercentageWithDecimalDraft","toDollarWithlDraft","toUnitDraft","toFixedToTwoDraft","_","moment","colDef","Header","accessor","disableGroupBy","align","enableRowSpan","id","width","Cell","row","console","log","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","original","start_date","format","end_date","isExpanded","isGroupBy","Aggregated","value","subRows","length","props","val","overall_sell_through","parseFloat","toFixed","aggregate","overall_margin","Number","overall_aum","overall_aur","overall_planned_units","toLocaleString","overall_units","overall_revenue$","parseInt"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  toPercentage,\n  toPercentageWithDecimalDraft,\n  toDollarWithlDraft,\n  toUnitDraft,\n  toFixedToTwoDraft,\n} from '../../helper/formatter';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default () => {\n  const colDef = [\n    {\n      Header: 'MD Plan',\n      accessor: 'md_plan',\n      disableGroupBy: true,\n      align: 'left',\n      enableRowSpan: true,\n    },\n    {\n      Header: 'Scenario',\n      accessor: 'scenario',\n      disableGroupBy: true,\n      enableRowSpan: true,\n    },\n    {\n      // Build our expander column\n      id: 'expander', // Make sure it has an ID\n      // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n      //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n      // ),\n      Header: 'Date Range',\n      width: 15,\n      Cell: ({ row }) => {\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n        // to build the toggle for expanding a row\n        console.log('czseferuuuuuuu', row);\n\n        return row.canExpand ? (\n          <span\n            {...row.getToggleRowExpandedProps({\n              style: {\n                // We can even use the row.depth property\n                // and paddingLeft to indicate the depth\n                // of the row\n                paddingLeft: `${row.depth * 2}rem`,\n              },\n            })}>\n            {moment(row.original.start_date).format('YYYY/MM/DD')} -{' '}\n            {moment(row.original.end_date).format('YYYY/MM/DD')}&nbsp;&nbsp;&nbsp;\n            {row.isExpanded ? (\n              <i class=\"fa fa-angle-down expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n            ) : (\n              <i class=\"fa fa-angle-right expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n            )}\n          </span>\n        ) : (\n          '-'\n        );\n      },\n    },\n    {\n      Header: 'Time Period',\n      accessor: 'week_num',\n      disableGroupBy: false,\n      isGroupBy: false,\n      Aggregated: ({ value, row }) => `weeks (${row.subRows.length})`,\n    },\n    {\n      Header: 'Sell through%',\n      accessor: 'sell_through',\n      disableGroupBy: true,\n      Cell: (props) => <div> {toPercentageWithDecimalDraft(props)} </div>,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_sell_through;\n        return <span>{val ? parseFloat(val).toFixed(2) : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Markdown %',\n      accessor: 'markdown_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'average',\n      Aggregated: ({ value }) => '-',\n    },\n    {\n      Header: 'Margin%',\n      accessor: 'margin_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentageWithDecimalDraft(props)} </div>,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_margin;\n\n        return <span>{val ? Number(val).toFixed(2) : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Aum',\n      accessor: 'aum',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwoDraft(props)}</div>,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_aum;\n        return <span>{val ? Number(val).toFixed(2) : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Aur',\n      accessor: 'aur',\n      disableGroupBy: true,\n      Cell: (props) => <div>{toFixedToTwoDraft(props)}</div>,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_aur;\n        return <span>{val ? Number(val).toFixed(2) : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Planned Units',\n      accessor: 'plannedUnits',\n      Cell: (props) => <div>{toUnitDraft(props)}</div>,\n\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_planned_units;\n        return <span>{val ? Number(val).toLocaleString('en') : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Actual Units',\n      accessor: 'actualUnits',\n      Cell: (props) => <div>{toUnitDraft(props)}</div>,\n      disableGroupBy: true,\n      Aggregated: (row) => {\n        let val = row.row.original.overall_units;\n        return <span>{val ? Number(val).toLocaleString('en') : '-'}</span>;\n      },\n    },\n    {\n      Header: 'Revenue $',\n      accessor: 'revenue$',\n      Aggregated: (row) => {\n        let val = row.row.original.overall_revenue$;\n        console.log(val.toFixed(2), 'fixed');\n        console.log(parseFloat(val).toFixed(2), 'valalala');\n        console.log(Number(val).toFixed(2), 'nu,ber');\n        return <span>{val ? parseInt(val).toLocaleString('en') : '-'}</span>;\n      },\n      disableGroupBy: true,\n      Cell: (props) => <div> {toDollarWithlDraft(props)} </div>,\n    },\n  ];\n  return colDef;\n};\n"]},"metadata":{},"sourceType":"module"}