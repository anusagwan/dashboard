{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/services/reactTable/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  /* This is required to make the table full-width */\\n  display: block;\\n  max-width: 100%;\\n\\n  /* This will make the table scrollable when it gets too small */\\n  .tableWrap {\\n    display: block;\\n    max-width: 100%;\\n    overflow-x: scroll;\\n    overflow-y: hidden;\\n    border-bottom: 1px solid black;\\n  }\\n  table {\\n    width: 100%;\\n    border-spacing: 0;\\n    border: 1px solid #c4ced5;\\n\\n    thead {\\n      background-color: #e7eef2;\\n    }\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0 0.5rem;\\n      border-bottom: 1px solid #d8e3eb;\\n      border-right: 1px solid #d8e3eb;\\n      font-size: 12px;\\n\\n      /* The secret sauce */\\n      /* Each cell should grow equally */\\n      // width: 1%;\\n      /* But \\\"collapsed\\\" cells should be as small as possible */\\n      &.collapse {\\n        width: 0.0000000001%;\\n      }\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n      input {\\n        width: 100%;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport \"./index.css\";\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useRowSelect } from \"react-table\";\nimport styled from \"styled-components\";\nimport matchSorter from \"match-sorter\";\nimport IndeterminateCheckbox from \"../../components/cellRenders/inderterminateCheckbox\";\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n  switch (visibleColumns) {\n    case \"onlyRowSelection\":\n      hooks.visibleColumns.push(function (columns) {\n        return [{\n          id: \"selection\",\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: function Header(_ref) {\n            var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 30\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31\n              },\n              __self: this\n            })));\n          },\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref2) {\n            var row = _ref2.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            })));\n          }\n        }].concat(_toConsumableArray(columns));\n      });\n      break;\n\n    case \"markDownDrafts\":\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          id: \"selection\",\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: \"Actions1\",\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref3) {\n            var row = _ref3.row;\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62\n              },\n              __self: this\n            }, React.createElement(IndeterminateCheckbox, Object.assign({\n              row: row.id\n            }, row.getToggleRowSelectedProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n              },\n              __self: this\n            })));\n          }\n        }, {\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: \"Actions2\",\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref4) {\n            var row = _ref4.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    case \"markDownStatus\":\n      hooks.visibleColumns.push(function (columns) {\n        return [].concat(_toConsumableArray(columns), [{\n          // Make this column a groupByBoundary. This ensures that groupBy columns\n          // are placed after it\n          groupByBoundary: true,\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: \"Actions\",\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: function Cell(_ref5) {\n            var row = _ref5.row;\n            return React.createElement(\"img\", {\n              width: \"20\",\n              src: \"./../../img/analysisMarkdown.png\",\n              alt: \"promoAnalysis\",\n              className: \"pointer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106\n              },\n              __self: this\n            });\n          }\n        }]);\n      });\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Create a default prop getter\n\n\nvar defaultPropGetter = function defaultPropGetter() {\n  return {};\n};\n\nfunction Table(_ref6) {\n  var columns = _ref6.columns,\n      data = _ref6.data,\n      updateMyData = _ref6.updateMyData,\n      visibleColumns = _ref6.visibleColumns,\n      isColumnFilter = _ref6.isColumnFilter,\n      isCellEdit = _ref6.isCellEdit,\n      isPagination = _ref6.isPagination,\n      _ref6$getHeaderProps = _ref6.getHeaderProps,\n      getHeaderProps = _ref6$getHeaderProps === void 0 ? defaultPropGetter : _ref6$getHeaderProps,\n      _ref6$getColumnProps = _ref6.getColumnProps,\n      getColumnProps = _ref6$getColumnProps === void 0 ? defaultPropGetter : _ref6$getColumnProps,\n      _ref6$getRowProps = _ref6.getRowProps,\n      getRowProps = _ref6$getRowProps === void 0 ? defaultPropGetter : _ref6$getRowProps,\n      _ref6$getCellProps = _ref6.getCellProps,\n      getCellProps = _ref6$getCellProps === void 0 ? defaultPropGetter : _ref6$getCellProps,\n      isSort = _ref6.isSort,\n      isHeaderHidden = _ref6.isHeaderHidden;\n  //Column Filter Configuration\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Add a new fuzzyTextFilterFn filter type.\n      // fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []); // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n  // Use the state and functions returned from useTable to build your UI\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    // defaultColumn,//for setting default view\n    filterTypes: filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    disableMultiSort: true\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, // Here we will use a plugin to add our selection column\n  function (hooks) {\n    setVisibleColumns(hooks, visibleColumns);\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize,\n      sortBy = _useTable$state.sortBy,\n      groupBy = _useTable$state.groupBy,\n      expanded = _useTable$state.expanded,\n      filters = _useTable$state.filters,\n      selectedRowIds = _useTable$state.selectedRowIds; // Render the UI for your table\n\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }), isHeaderHidden ? null : React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return React.createElement(\"th\", Object.assign({}, column.getHeaderProps({\n        className: column.collapse ? \"collapse\" : \"\"\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dis_flex_r\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, column.canGroupBy ? // If the column can be grouped, let's add a toggle\n      React.createElement(\"div\", Object.assign({}, column.getGroupByToggleProps(), {\n        className: \"plr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), column.isGrouped ? \"🛑 \" : React.createElement(\"i\", {\n        className: \"fa fa-users\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      })) : null, isSort ? React.createElement(\"div\", Object.assign({}, column.getSortByToggleProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), column.render(\"Header\"), \" \\xA0\", !column.isSorted ? typeof column.Header !== \"string\" ? \"\" : React.createElement(\"i\", {\n        className: \"fa fa-arrows-v\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }) : column.isSortedDesc ? React.createElement(\"i\", {\n        className: \"fa fa-long-arrow-down\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        className: \"fa fa-long-arrow-up\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      })) : column.render(\"Header\")), isColumnFilter ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, column.canFilter ? column.render(\"Filter\") : null) : \"\");\n    }));\n  })), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }), page.map(function (row) {\n    prepareRow(row);\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps([getRowProps(row)]), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      row.getToggleRowExpandedProps();\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, cell.isGrouped ? // If it's a grouped cell, add an expander and row count\n      React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"dis_flex_r\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, cell.render(\"Cell\", {\n        editable: false\n      }), React.createElement(\"div\", Object.assign({}, row.getToggleRowExpandedProps(), {\n        className: \"expandCollapseArrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }), row.isExpanded ? React.createElement(\"i\", {\n        className: \"fa fa-angle-down fa-lg\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right fa-lg\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      })), \" \")) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n      // renderer for cell\n      cell.render(\"Aggregated\") : cell.isPlaceholder ? null : // For cells with repeated values, render null\n      // Otherwise, just render the regular cell\n      React.createElement(\"div\", Object.assign({}, cell.getCellProps([{\n        className: cell.column.className,\n        style: cell.column.style\n      }, getColumnProps(cell.column), getCellProps(cell)]), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), cell.render(\"Cell\", {\n        editable: true\n      })));\n    }));\n  })))), isPagination && data && data.length ? React.createElement(\"div\", {\n    className: \"pagination dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  }, \"Showing\", \" \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376\n    },\n    __self: this\n  }, pageIndex > 0 ? \"\".concat(pageSize + 1, \" to \").concat(pageSize * (pageIndex + 1), \" of \").concat(pageOptions.length) : \"\".concat(pageIndex + 1, \" to \").concat(pageSize, \" of \").concat(pageOptions.length)), \" \"), React.createElement(\"div\", {\n    className: \"dis_flex_r\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, \"<<\"), \" \", React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, \"<\"), \" \", pageOptions.map(function (page) {\n    return React.createElement(\"div\", {\n      onClick: function onClick() {\n        gotoPage(page);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, pageIndex + 1 === page + 1 ? React.createElement(\"div\", {\n      className: \"pageCountActive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, page + 1) : React.createElement(\"div\", {\n      className: \"pageCount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, page + 1));\n  }), React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415\n    },\n    __self: this\n  }, \">\"), \" \", React.createElement(\"button\", {\n    className: \"pages\",\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422\n    },\n    __self: this\n  }, \">>\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, \"Per page\", React.createElement(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return React.createElement(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, \"Show \", pageSize);\n  })))) : \"\");\n}\n\nexport default Table;\nvar Styles = styled.div(_templateObject());","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/services/reactTable/index.js"],"names":["React","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useRowSelect","styled","matchSorter","IndeterminateCheckbox","setVisibleColumns","hooks","visibleColumns","push","columns","id","groupByBoundary","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","fuzzyTextFilterFn","rows","filterValue","keys","values","autoRemove","val","defaultPropGetter","Table","data","updateMyData","isColumnFilter","isCellEdit","isPagination","getHeaderProps","getColumnProps","getRowProps","getCellProps","isSort","isHeaderHidden","filterTypes","useMemo","fuzzyText","text","filter","rowValue","undefined","String","toLowerCase","startsWith","disableMultiSort","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","map","headerGroup","getHeaderGroupProps","headers","column","className","collapse","canGroupBy","getGroupByToggleProps","isGrouped","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","cells","cell","getToggleRowExpandedProps","editable","isExpanded","isAggregated","isPlaceholder","style","length","e","Number","target","value","Styles","div"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from \"react-table\";\nimport styled from \"styled-components\";\nimport matchSorter from \"match-sorter\";\nimport IndeterminateCheckbox from \"../../components/cellRenders/inderterminateCheckbox\";\n\nfunction setVisibleColumns(hooks, visibleColumns) {\n\n  switch (visibleColumns) {\n    case \"onlyRowSelection\":\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: \"selection\",\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ];\n      });\n      break;\n    case \"markDownDrafts\":\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            id: \"selection\",\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: \"Actions1\",\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => {\n              return (\n                <div>\n                  <IndeterminateCheckbox\n                    row={row.id}\n                    {...row.getToggleRowSelectedProps()}\n                  />\n                </div>\n              );\n            },\n          },\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: \"Actions2\",\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n    case \"markDownStatus\":\n      hooks.visibleColumns.push((columns) => {\n        return [\n          ...columns,\n          {\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: \"Actions\",\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <img\n                width=\"20\"\n                src=\"./../../img/analysisMarkdown.png\"\n                alt=\"promoAnalysis\"\n                className=\"pointer\"\n              />\n            ),\n          },\n        ];\n      });\n      break;\n\n    default:\n      break;\n  }\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Create a default prop getter\nconst defaultPropGetter = () => ({});\n\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  visibleColumns,\n  isColumnFilter,\n  isCellEdit,\n  isPagination,\n  getHeaderProps = defaultPropGetter,\n  getColumnProps = defaultPropGetter,\n  getRowProps = defaultPropGetter,\n  getCellProps = defaultPropGetter,\n  isSort,\n  isHeaderHidden,\n}) {\n  //Column Filter Configuration\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Add a new fuzzyTextFilterFn filter type.\n      // fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n              .toLowerCase()\n              .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  // // Set our editable cell renderer as the default Cell renderer\n  // const defaultColumn = {};\n  // if (isCellEdit) {\n  //   defaultColumn[\"Cell\"] = EditableCell;\n  // }\n  // // Set our editable cell renderer as the default Cell renderer\n  // if (isColumnFilter) {\n  //   defaultColumn[\"Filter\"] = DefaultColumnFilter;\n  // }\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page, which has only the rows for the active page, The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      // defaultColumn,//for setting default view\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    (hooks) => {\n      setVisibleColumns(hooks, visibleColumns)\n    }\n  );\n\n  // Render the UI for your table\n  return (\n    <Styles>\n      <div>\n        <table {...getTableProps()}>\n          {isHeaderHidden ? null : (\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((column) => {\n                    return (\n                      <th\n                        {...column.getHeaderProps({\n                          className: column.collapse ? \"collapse\" : \"\",\n                        })}\n                      >\n                        <div className=\"dis_flex_r\">\n                          {column.canGroupBy ? (\n                            // If the column can be grouped, let's add a toggle\n                            <div\n                              {...column.getGroupByToggleProps()}\n                              className=\"plr\"\n                            >\n                              {column.isGrouped ? (\n                                \"🛑 \"\n                              ) : (\n                                  <i className=\"fa fa-users\" aria-hidden=\"true\" />\n                                )}\n                            </div>\n                          ) : null}\n\n                          {isSort ? (\n                            <div {...column.getSortByToggleProps()}>\n                              {column.render(\"Header\")} &nbsp;\n                              {!column.isSorted ? (\n                                typeof column.Header !== \"string\" ? (\n                                  \"\"\n                                ) : (\n                                    <i\n                                      className=\"fa fa-arrows-v\"\n                                      aria-hidden=\"true\"\n                                    />\n                                  )\n                              ) : column.isSortedDesc ? (\n                                <i\n                                  className=\"fa fa-long-arrow-down\"\n                                  aria-hidden=\"true\"\n                                />\n                              ) : (\n                                    <i\n                                      className=\"fa fa-long-arrow-up\"\n                                      aria-hidden=\"true\"\n                                    />\n                                  )}\n                            </div>\n                          ) : (\n                              column.render(\"Header\")\n                            )}\n                        </div>\n                        {/* Render the columns filter UI */}\n                        {isColumnFilter ? (\n                          <div>\n                            {column.canFilter ? column.render(\"Filter\") : null}\n                          </div>\n                        ) : (\n                            \"\"\n                          )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n          )}\n\n          <tbody {...getTableBodyProps()}>\n            {page.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps([getRowProps(row)])}>\n                  {row.cells.map((cell) => {\n                    row.getToggleRowExpandedProps();\n                    return (\n                      <td>\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <div className=\"dis_flex_r\">\n                              {cell.render(\"Cell\", { editable: false })}\n                              <div\n                                {...row.getToggleRowExpandedProps()}\n                                className=\"expandCollapseArrow\"\n                              >\n                                {row.isExpanded ? (\n                                  <i\n                                    className=\"fa fa-angle-down fa-lg\"\n                                    aria-hidden=\"true\"\n                                  />\n                                ) : (\n                                    <i\n                                      class=\"fa fa-angle-right fa-lg\"\n                                      aria-hidden=\"true\"\n                                    />\n                                  )}\n                              </div>{\" \"}\n                            </div>\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          <div\n                            {...cell.getCellProps([\n                              {\n                                className: cell.column.className,\n                                style: cell.column.style,\n                              },\n                              getColumnProps(cell.column),\n                              getCellProps(cell),\n                            ])}\n                          >\n                            {cell.render(\"Cell\", { editable: true })}\n                          </div>\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n\n      {isPagination && data && data.length ? (\n        <div className=\"pagination dis_flex_r\">\n          <div>\n            Showing{\" \"}\n            <strong>\n              {pageIndex > 0\n                ? `${pageSize + 1} to ${pageSize * (pageIndex + 1)} of ${\n                pageOptions.length\n                }`\n                : `${pageIndex + 1} to ${pageSize} of ${pageOptions.length}`}\n              {/* {pageIndex + 1} to {pageSize} of {pageOptions.length} */}\n            </strong>{\" \"}\n          </div>\n          <div className=\"dis_flex_r\">\n            <button\n              className=\"pages\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              {\"<<\"}\n            </button>{\" \"}\n            <button\n              className=\"pages\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              {\"<\"}\n            </button>{\" \"}\n            {pageOptions.map((page) => {\n              return (\n                <div\n                  onClick={() => {\n                    gotoPage(page);\n                  }}\n                >\n                  {pageIndex + 1 === page + 1 ? (\n                    <div className=\"pageCountActive\">{page + 1}</div>\n                  ) : (\n                      <div className=\"pageCount\">{page + 1}</div>\n                    )}\n                </div>\n              );\n            })}\n            <button\n              className=\"pages\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              {\">\"}\n            </button>{\" \"}\n            <button\n              className=\"pages\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              {\">>\"}\n            </button>\n          </div>\n          {/* <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"} */}\n          <div>\n            Per page\n            <select\n              value={pageSize}\n              onChange={(e) => {\n                setPageSize(Number(e.target.value));\n              }}\n            >\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <option key={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      ) : (\n          \"\"\n        )}\n    </Styles>\n  );\n}\n\nexport default Table;\n\nconst Styles = styled.div`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    border-bottom: 1px solid black;\n  }\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border: 1px solid #c4ced5;\n\n    thead {\n      background-color: #e7eef2;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0 0.5rem;\n      border-bottom: 1px solid #d8e3eb;\n      border-right: 1px solid #d8e3eb;\n      font-size: 12px;\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      // width: 1%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n      input {\n        width: 100%;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}