{"ast":null,"code":"import _objectSpread from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  markdownAnalysisGraphData: [],\n  analysisTable: [],\n  comparisonData: {},\n  analysisData: {},\n  analysisTableBySkus: {},\n  analysisDataBySkus: {},\n  markdownAnalysisGraphDataBySkus: {}\n}; // const getComparsionTableData = (payload) => {\n// }\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'RESET_INVENTORY_INFO_DATA':\n      return _objectSpread({}, state, {\n        markdownAnalysisGraphData: [],\n        analysisTable: [],\n        comparisonData: {},\n        analysisData: {},\n        analysisTableBySkus: {},\n        analysisDataBySkus: {},\n        markdownAnalysisGraphDataBySkus: {}\n      });\n\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA':\n      return _objectSpread({}, state, {\n        markdownAnalysisGraphData: action.payload\n      });\n\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA_BY_SKUS':\n      return _objectSpread({}, state, {\n        markdownAnalysisGraphDataBySkus: action.payload\n      });\n\n    case 'SET_ANALYSIS_TABLE_DATA_BY_SKUS':\n      {\n        var _obj = {};\n        action.payload.analysisTabledata.forEach(function (ob) {\n          _obj[ob.style_id] = ob.style_desc;\n        });\n        _obj.scenario = action.cadenceType;\n        var _data = []; // if (action.comparisonData && action.comparisonData.length === 0) {\n        //   data = [];\n        // } else {\n        //   data = state.comparisonData;\n        // }\n        // let data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n\n        var _analysisData = state.analysisDataBySkus;\n\n        if (action.cadenceType !== 'Comparison') {\n          _data[action.cadenceType] = _obj;\n          _analysisData[action.cadenceType] = action.data;\n        } // else {\n        //   data[action.cadenceType] = obj;\n        //   analysisData[action.cadenceType] = action.data;\n        // }\n\n\n        return _objectSpread({}, state, {\n          analysisTableBySkus: action.payload,\n          // comparisonData: data,\n          analysisDataBySkus: _analysisData\n        });\n      }\n\n    case 'SET_ANALYSIS_TABLE_DATA':\n      var obj = {};\n      action.payload.analysisTabledata.forEach(function (ob) {\n        obj[ob.style_id] = ob.style_desc;\n      });\n      obj.scenario = action.cadenceType;\n      var data = {}; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n\n      if (action.comparisonData && action.comparisonData.length === 0) {\n        data = {}; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n      } else {\n        data = state.comparisonData;\n      } // let data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n\n\n      var analysisData = state.analysisData;\n\n      if (action.cadenceType !== 'Comparison') {\n        data[action.cadenceType] = obj; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n\n        analysisData[action.cadenceType] = action.data;\n      } // else {\n      //   data[action.cadenceType] = obj;\n      //   analysisData[action.cadenceType] = action.data;\n      // }\n\n\n      return _objectSpread({}, state, {\n        analysisTable: action.payload,\n        comparisonData: data,\n        analysisData: analysisData\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n}","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/reducers/markdownAnalysisReducer.js"],"names":["initialState","markdownAnalysisGraphData","analysisTable","comparisonData","analysisData","analysisTableBySkus","analysisDataBySkus","markdownAnalysisGraphDataBySkus","state","action","type","payload","obj","analysisTabledata","forEach","ob","style_id","style_desc","scenario","cadenceType","data","length"],"mappings":"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","sourcesContent":["const initialState = {\n  markdownAnalysisGraphData: [],\n  analysisTable: [],\n  comparisonData: {},\n  analysisData: {},\n  analysisTableBySkus: {},\n  analysisDataBySkus: {},\n  markdownAnalysisGraphDataBySkus: {},\n};\n\n// const getComparsionTableData = (payload) => {\n\n// }\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'RESET_INVENTORY_INFO_DATA':\n      return {\n        ...state,\n        markdownAnalysisGraphData: [],\n        analysisTable: [],\n        comparisonData: {},\n        analysisData: {},\n        analysisTableBySkus: {},\n        analysisDataBySkus: {},\n        markdownAnalysisGraphDataBySkus: {},\n      };\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA':\n      return {\n        ...state,\n        markdownAnalysisGraphData: action.payload,\n      };\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA_BY_SKUS':\n      return {\n        ...state,\n        markdownAnalysisGraphDataBySkus: action.payload,\n      };\n    case 'SET_ANALYSIS_TABLE_DATA_BY_SKUS': {\n      let obj = {};\n      action.payload.analysisTabledata.forEach((ob) => {\n        obj[ob.style_id] = ob.style_desc;\n      });\n      obj.scenario = action.cadenceType;\n      let data = [];\n      // if (action.comparisonData && action.comparisonData.length === 0) {\n      //   data = [];\n      // } else {\n      //   data = state.comparisonData;\n      // }\n      // let data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n      let analysisData = state.analysisDataBySkus;\n      if (action.cadenceType !== 'Comparison') {\n        data[action.cadenceType] = obj;\n        analysisData[action.cadenceType] = action.data;\n      }\n      // else {\n      //   data[action.cadenceType] = obj;\n      //   analysisData[action.cadenceType] = action.data;\n      // }\n      return {\n        ...state,\n        analysisTableBySkus: action.payload,\n        // comparisonData: data,\n        analysisDataBySkus: analysisData,\n      };\n    }\n    case 'SET_ANALYSIS_TABLE_DATA':\n      let obj = {};\n      action.payload.analysisTabledata.forEach((ob) => {\n        obj[ob.style_id] = ob.style_desc;\n      });\n      obj.scenario = action.cadenceType;\n      let data = {}; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n      if (action.comparisonData && action.comparisonData.length === 0) {\n        data = {}; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n      } else {\n        data = state.comparisonData;\n      }\n      // let data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n      let analysisData = state.analysisData;\n      if (action.cadenceType !== 'Comparison') {\n        data[action.cadenceType] = obj; //array of key value pairs is not a proper way to store data,  so changing it to object of keyvalue pairs\n        analysisData[action.cadenceType] = action.data;\n      }\n      // else {\n      //   data[action.cadenceType] = obj;\n      //   analysisData[action.cadenceType] = action.data;\n      // }\n      return {\n        ...state,\n        analysisTable: action.payload,\n        comparisonData: data,\n        analysisData: analysisData,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}