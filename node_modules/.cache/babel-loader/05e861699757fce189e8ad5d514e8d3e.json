{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/SKUCockpit/skuColdef.js\";\nimport React from 'react';\nimport { toUnit, toDollar, toPercentage } from '../../helper/formatter';\n\nvar CellRenderer = function CellRenderer(_ref) {\n  var row = _ref.row,\n      accessorValue = _ref.accessorValue;\n  return React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n    style: {\n      paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n    }\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }), accessorValue, ' ', row.isExpanded ? React.createElement(\"i\", {\n    class: \"fa fa-angle-down expanded-icon-size color-blue\",\n    \"aria-hidden\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }) : React.createElement(\"i\", {\n    class: \"fa fa-angle-right expanded-icon-size color-blue\",\n    \"aria-hidden\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  var header = [{\n    Header: 'Style Group',\n    columns: [{\n      id: 'expander',\n      Header: '',\n      width: 15,\n      Cell: function Cell(_ref2) {\n        var row = _ref2.row;\n        return row.id.includes('.') ? null : React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n          style: {\n            paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }), row.original.style_group, \"\\xA0\\xA0\\xA0\", row.isExpanded ? React.createElement(\"i\", {\n          class: \"fa fa-angle-down expanded-icon-size color-blue\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }) : React.createElement(\"i\", {\n          class: \"fa fa-angle-right expanded-icon-size color-blue\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }));\n      }\n    }]\n  }, {\n    Header: 'Custom Style Group',\n    columns: [{\n      id: 'expander1',\n      Header: '',\n      width: 15,\n      Cell: function Cell(_ref3) {\n        var row = _ref3.row;\n        var checkForDot = row.id.includes('.') ? row.id.split('.') : [];\n        return checkForDot.length === 2 ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n          style: {\n            paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), row.original.custom_style_group, \"\\xA0\\xA0\\xA0\", row.isExpanded ? React.createElement(\"i\", {\n          class: \"fa fa-angle-down expanded-icon-size color-blue\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }) : React.createElement(\"i\", {\n          class: \"fa fa-angle-right expanded-icon-size color-blue\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        })) : null;\n      }\n    }]\n  }, {\n    Header: 'Style Color',\n    columns: [{\n      // Cell: ({ row }) => <CellRenderer row={row} accessorValue={row.original.style_number} />,\n      downloadHeader: 'Style Color',\n      accessor: 'style_color',\n      groupByID: 'style_color',\n      disableGroupBy: true,\n      align: 'left',\n      //showFilter: true,\n      disableSort: true\n    }]\n  }, {\n    Header: 'Sell through %',\n    columns: [{\n      Header: 'TY',\n      downloadHeader: 'Sell through TY %',\n      downloadFormatter: toPercentage,\n      accessor: 'sell_through_ty',\n      aggregate: 'sum',\n      disableGroupBy: true,\n      align: 'left',\n      Cell: function Cell(props) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \" \", toPercentage({\n          value: props.value\n        }), \" \");\n      }\n    }, {\n      Header: 'LY',\n      downloadHeader: 'Sell through LY %',\n      downloadFormatter: toPercentage,\n      accessor: 'sell_through_ly',\n      disableGroupBy: true,\n      align: 'left',\n      Cell: function Cell(props) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, \" \", toPercentage({\n          value: props.value\n        }), \" \");\n      }\n    }]\n  }, {\n    Header: 'Margin %',\n    columns: [{\n      Header: 'TY',\n      downloadHeader: 'Margin TY %',\n      downloadFormatter: toPercentage,\n      accessor: 'margin_ty',\n      disableGroupBy: true,\n      aggregate: roundedMedian,\n      Aggregated: function Aggregated(_ref4) {\n        var value = _ref4.value;\n        return \"\".concat(value);\n      },\n      align: 'left',\n      Cell: function Cell(props) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \" \", toPercentage({\n          value: props.value\n        }), \" \");\n      }\n    }, {\n      Header: 'LY',\n      downloadHeader: 'Margin LY %',\n      downloadFormatter: toPercentage,\n      accessor: 'margin_ly',\n      disableGroupBy: true,\n      align: 'left',\n      Cell: function Cell(props) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \" \", toPercentage({\n          value: props.value\n        }), \" \");\n      }\n    }]\n  }, // {\n  //   Header: 'Margin ',\n  //   columns: [\n  //     {\n  //       Header: 'Margin ($)',\n  //       accessor: 'margin$',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toDollar(props)} </div>,\n  //       downloadFormatter: toDollar,\n  //     },\n  //     {\n  //       Header: 'AUM $',\n  //       accessor: 'aum',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toDollar(props)} </div>,\n  //       downloadFormatter: toDollar,\n  //     },\n  //   ],\n  // },\n  // {\n  //   Header: 'Sales',\n  //   columns: [\n  //     {\n  //       Header: 'Actual sales (units)',\n  //       accessor: 'units_sold',\n  //       aggregate: 'average',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //     {\n  //       Header: 'Revenue ($)',\n  //       accessor: 'revenue$',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toDollar(props)} </div>,\n  //       downloadFormatter: toDollar,\n  //     },\n  //     {\n  //       Header: 'AUR $',\n  //       accessor: 'aur',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toDollar(props)} </div>,\n  //       downloadFormatter: toDollar,\n  //     },\n  //     {\n  //       Header: \"Last week's sales\",\n  //       accessor: 'last_week_sales',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //     },\n  //   ],\n  // },\n  // {\n  //   Header: 'Current inventory',\n  //   columns: [\n  //     {\n  //       Header: 'On hand',\n  //       accessor: 'inventory.inventory_on_hand',\n  //       aggregate: 'average',\n  //       disableGroupBy: true,\n  //       align: 'left',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //     {\n  //       Header: 'In transit',\n  //       accessor: 'inventory.inventory_in_transit',\n  //       aggregate: 'average',\n  //       disableGroupBy: true,\n  //       align: 'left',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //     {\n  //       Header: 'On order',\n  //       accessor: 'inventory.inventory_on_order',\n  //       aggregate: 'average',\n  //       disableGroupBy: true,\n  //       align: 'left',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //     {\n  //       Header: 'In DC',\n  //       accessor: 'inventory.inventory_in_dc',\n  //       aggregate: 'average',\n  //       disableGroupBy: true,\n  //       align: 'left',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //     {\n  //       Header: 'Weeks on hand',\n  //       accessor: 'wos',\n  //       disableGroupBy: true,\n  //       Aggregated: ({ value }) => `${value}`,\n  //       align: 'centre',\n  //       Cell: (props) => <div> {toUnit(props)} </div>,\n  //       downloadFormatter: toUnit,\n  //     },\n  //   ],\n  // },\n  {\n    Header: 'Markdown status',\n    columns: [{\n      Header: '',\n      downloadHeader: 'Markdown status',\n      accessor: 'mdStatus',\n      disableGroupBy: true,\n      align: 'centre',\n      showFilter: true,\n      Cell: function Cell(props) {\n        switch (props.row.original.mdStatus) {\n          case 'High':\n            return React.createElement(\"div\", {\n              className: \"high-status\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 272\n              },\n              __self: this\n            }, \"High\");\n\n          case 'Medium':\n            return React.createElement(\"div\", {\n              className: \"medium-status\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 274\n              },\n              __self: this\n            }, \"Medium\");\n\n          case 'Low':\n            return React.createElement(\"div\", {\n              className: \"low-status\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 276\n              },\n              __self: this\n            }, \"Low\");\n\n          default:\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 278\n              },\n              __self: this\n            });\n        }\n      },\n      disableSort: true\n    }]\n  }];\n  return header;\n});\n\nfunction roundedMedian(leafValues) {\n  var min = leafValues[0] || 0;\n  var max = leafValues[0] || 0;\n  leafValues.forEach(function (value) {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n  return Math.round((min + max) / 2);\n}","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/SKUCockpit/skuColdef.js"],"names":["React","toUnit","toDollar","toPercentage","CellRenderer","row","accessorValue","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","header","Header","columns","id","width","Cell","includes","original","style_group","checkForDot","split","length","custom_style_group","downloadHeader","accessor","groupByID","disableGroupBy","align","disableSort","downloadFormatter","aggregate","props","value","roundedMedian","Aggregated","showFilter","mdStatus","leafValues","min","max","forEach","Math","round"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toUnit, toDollar, toPercentage } from '../../helper/formatter';\n\nconst CellRenderer = ({ row, accessorValue }) => {\n  return (\n    <span\n      {...row.getToggleRowExpandedProps({\n        style: {\n          paddingLeft: `${row.depth * 2}rem`,\n        },\n      })}>\n      {accessorValue}{' '}\n      {row.isExpanded ? (\n        <i class=\"fa fa-angle-down expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n      ) : (\n        <i class=\"fa fa-angle-right expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n      )}\n    </span>\n  );\n};\nexport default () => {\n  const header = [\n    {\n      Header: 'Style Group',\n      columns: [\n        {\n          id: 'expander',\n          Header: '',\n          width: 15,\n          Cell: ({ row }) => {\n            return row.id.includes('.') ? null : (\n              <span\n                {...row.getToggleRowExpandedProps({\n                  style: {\n                    paddingLeft: `${row.depth * 2}rem`,\n                  },\n                })}>\n                {row.original.style_group}&nbsp;&nbsp;&nbsp;\n                {row.isExpanded ? (\n                  <i class=\"fa fa-angle-down expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n                ) : (\n                  <i class=\"fa fa-angle-right expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n                )}\n              </span>\n            );\n          },\n        },\n      ],\n    },\n    {\n      Header: 'Custom Style Group',\n      columns: [\n        {\n          id: 'expander1',\n          Header: '',\n          width: 15,\n          Cell: ({ row }) => {\n            let checkForDot = row.id.includes('.') ? row.id.split('.') : [];\n\n            return checkForDot.length === 2 ? (\n              <span\n                {...row.getToggleRowExpandedProps({\n                  style: {\n                    paddingLeft: `${row.depth * 2}rem`,\n                  },\n                })}>\n                {row.original.custom_style_group}&nbsp;&nbsp;&nbsp;\n                {row.isExpanded ? (\n                  <i class=\"fa fa-angle-down expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n                ) : (\n                  <i class=\"fa fa-angle-right expanded-icon-size color-blue\" aria-hidden=\"true\"></i>\n                )}\n              </span>\n            ) : null;\n          },\n        },\n      ],\n    },\n    {\n      Header: 'Style Color',\n      columns: [\n        {\n          // Cell: ({ row }) => <CellRenderer row={row} accessorValue={row.original.style_number} />,\n          downloadHeader: 'Style Color',\n          accessor: 'style_color',\n          groupByID: 'style_color',\n          disableGroupBy: true,\n          align: 'left',\n          //showFilter: true,\n          disableSort: true,\n        },\n      ],\n    },\n\n    {\n      Header: 'Sell through %',\n      columns: [\n        {\n          Header: 'TY',\n          downloadHeader: 'Sell through TY %',\n          downloadFormatter: toPercentage,\n          accessor: 'sell_through_ty',\n          aggregate: 'sum',\n          disableGroupBy: true,\n          align: 'left',\n          Cell: (props) => <div> {toPercentage({ value: props.value })} </div>,\n        },\n        {\n          Header: 'LY',\n          downloadHeader: 'Sell through LY %',\n          downloadFormatter: toPercentage,\n          accessor: 'sell_through_ly',\n          disableGroupBy: true,\n          align: 'left',\n          Cell: (props) => <div> {toPercentage({ value: props.value })} </div>,\n        },\n      ],\n    },\n    {\n      Header: 'Margin %',\n      columns: [\n        {\n          Header: 'TY',\n          downloadHeader: 'Margin TY %',\n          downloadFormatter: toPercentage,\n          accessor: 'margin_ty',\n          disableGroupBy: true,\n          aggregate: roundedMedian,\n          Aggregated: ({ value }) => `${value}`,\n          align: 'left',\n          Cell: (props) => <div> {toPercentage({ value: props.value })} </div>,\n        },\n        {\n          Header: 'LY',\n          downloadHeader: 'Margin LY %',\n          downloadFormatter: toPercentage,\n          accessor: 'margin_ly',\n          disableGroupBy: true,\n          align: 'left',\n          Cell: (props) => <div> {toPercentage({ value: props.value })} </div>,\n        },\n      ],\n    },\n    // {\n    //   Header: 'Margin ',\n    //   columns: [\n    //     {\n    //       Header: 'Margin ($)',\n    //       accessor: 'margin$',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toDollar(props)} </div>,\n    //       downloadFormatter: toDollar,\n    //     },\n\n    //     {\n    //       Header: 'AUM $',\n    //       accessor: 'aum',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toDollar(props)} </div>,\n    //       downloadFormatter: toDollar,\n    //     },\n    //   ],\n    // },\n    // {\n    //   Header: 'Sales',\n    //   columns: [\n    //     {\n    //       Header: 'Actual sales (units)',\n    //       accessor: 'units_sold',\n    //       aggregate: 'average',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //     {\n    //       Header: 'Revenue ($)',\n    //       accessor: 'revenue$',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toDollar(props)} </div>,\n    //       downloadFormatter: toDollar,\n    //     },\n    //     {\n    //       Header: 'AUR $',\n    //       accessor: 'aur',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toDollar(props)} </div>,\n    //       downloadFormatter: toDollar,\n    //     },\n    //     {\n    //       Header: \"Last week's sales\",\n    //       accessor: 'last_week_sales',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //     },\n    //   ],\n    // },\n\n    // {\n    //   Header: 'Current inventory',\n    //   columns: [\n    //     {\n    //       Header: 'On hand',\n    //       accessor: 'inventory.inventory_on_hand',\n    //       aggregate: 'average',\n    //       disableGroupBy: true,\n    //       align: 'left',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //     {\n    //       Header: 'In transit',\n    //       accessor: 'inventory.inventory_in_transit',\n    //       aggregate: 'average',\n    //       disableGroupBy: true,\n    //       align: 'left',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //     {\n    //       Header: 'On order',\n    //       accessor: 'inventory.inventory_on_order',\n    //       aggregate: 'average',\n    //       disableGroupBy: true,\n    //       align: 'left',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //     {\n    //       Header: 'In DC',\n    //       accessor: 'inventory.inventory_in_dc',\n    //       aggregate: 'average',\n    //       disableGroupBy: true,\n    //       align: 'left',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //     {\n    //       Header: 'Weeks on hand',\n    //       accessor: 'wos',\n    //       disableGroupBy: true,\n    //       Aggregated: ({ value }) => `${value}`,\n    //       align: 'centre',\n    //       Cell: (props) => <div> {toUnit(props)} </div>,\n    //       downloadFormatter: toUnit,\n    //     },\n    //   ],\n    // },\n    {\n      Header: 'Markdown status',\n      columns: [\n        {\n          Header: '',\n          downloadHeader: 'Markdown status',\n          accessor: 'mdStatus',\n          disableGroupBy: true,\n          align: 'centre',\n          showFilter: true,\n          Cell: (props) => {\n            switch (props.row.original.mdStatus) {\n              case 'High':\n                return <div className=\"high-status\">High</div>;\n              case 'Medium':\n                return <div className=\"medium-status\">Medium</div>;\n              case 'Low':\n                return <div className=\"low-status\">Low</div>;\n              default:\n                return <div></div>;\n            }\n          },\n          disableSort: true,\n        },\n      ],\n    },\n  ];\n  return header;\n};\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n\n  leafValues.forEach((value) => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n\n  return Math.round((min + max) / 2);\n}\n"]},"metadata":{},"sourceType":"module"}