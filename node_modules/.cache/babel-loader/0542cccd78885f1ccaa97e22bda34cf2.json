{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/draftStatus/status/coldef.js\";\nimport React from 'react';\nimport { toPercentage } from '../../../helper/formatter';\nimport IndeterminateCheckbox from '../../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport moment from 'moment';\nexport default (function () {\n  var colDef = [{\n    Header: 'MD Plan',\n    accessor: 'md_plan',\n    disableGroupBy: true,\n    width: 50,\n    // isGroupBy: false,\n    align: 'left',\n    enableRowSpan: true // aggregate: 'uniqueCount',\n    // Aggregated: ({ value }) => `${value} scenario`,\n\n  }, {\n    Header: 'Scenario',\n    accessor: 'scenario',\n    disableGroupBy: true,\n    enableRowSpan: true,\n    // isGroupBy: false,\n    width: 50 // aggregate: 'uniqueCount',\n    // Aggregated: ({ value }) => `${value} scenario`,\n\n  }, {\n    // Build our expander column\n    id: 'expander',\n    // Make sure it has an ID\n    // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n    //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n    // ),\n    Header: 'Date Range',\n    width: 15,\n    Cell: function Cell(_ref) {\n      var row = _ref.row;\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      console.log('czseferuuuuuuu', row);\n      return row.canExpand ? React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), moment(row.original.start_date).format('YYYY/MM/DD'), \" -\", ' ', moment(row.original.end_date).format('YYYY/MM/DD') + '  ', row.isExpanded ? React.createElement(\"i\", {\n        class: \"fa fa-angle-down expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }) : React.createElement(\"i\", {\n        class: \"fa fa-angle-right expanded-icon-size\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })) : null;\n    }\n  }, {\n    Header: 'Time Period',\n    accessor: 'time_period',\n    disableGroupBy: false,\n    isGroupBy: false,\n    width: 50,\n    // aggregate: 'uniqueCount',\n    Aggregated: function Aggregated(_ref2) {\n      var value = _ref2.value,\n          row = _ref2.row;\n      return \"weeks (\".concat(row.subRows.length, \")\");\n    }\n  }, //Inventory\n  {\n    Header: 'Sell through%',\n    accessor: 'sell_through_perc',\n    disableGroupBy: true,\n    width: 50,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'sum',\n    Aggregated: function Aggregated(_ref3) {\n      var value = _ref3.value;\n      return \"\".concat(value);\n    }\n  }, {\n    Header: 'Inventory On Hand',\n    accessor: 'ioh',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    aggregate: 'average',\n    Aggregated: function Aggregated(_ref4) {\n      var value = _ref4.value;\n      return \"\".concat(value);\n    }\n  }, //Margin\n  {\n    Header: 'Margin%',\n    accessor: 'margin_perc',\n    disableGroupBy: true,\n    width: 70,\n    Cell: function Cell(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \" \", toPercentage(props), \" \");\n    },\n    // aggregate: 'average',\n    Aggregated: function Aggregated(_ref5) {\n      var value = _ref5.value;\n      return \"\".concat(value);\n    }\n  }];\n  return colDef;\n});","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/draftStatus/status/coldef.js"],"names":["React","toPercentage","IndeterminateCheckbox","_","moment","colDef","Header","accessor","disableGroupBy","width","align","enableRowSpan","id","Cell","row","console","log","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","original","start_date","format","end_date","isExpanded","isGroupBy","Aggregated","value","subRows","length","props","aggregate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toPercentage } from '../../../helper/formatter';\nimport IndeterminateCheckbox from '../../../components/cellRenders/inderterminateCheckbox';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nexport default () => {\n  const colDef = [\n    {\n      Header: 'MD Plan',\n      accessor: 'md_plan',\n      disableGroupBy: true,\n      width: 50,\n      // isGroupBy: false,\n      align: 'left',\n      enableRowSpan: true,\n      // aggregate: 'uniqueCount',\n      // Aggregated: ({ value }) => `${value} scenario`,\n    },\n    {\n      Header: 'Scenario',\n      accessor: 'scenario',\n      disableGroupBy: true,\n      enableRowSpan: true,\n      // isGroupBy: false,\n      width: 50,\n      // aggregate: 'uniqueCount',\n      // Aggregated: ({ value }) => `${value} scenario`,\n    },\n    {\n      // Build our expander column\n      id: 'expander', // Make sure it has an ID\n      // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n      //   <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}</span>\n      // ),\n      Header: 'Date Range',\n      width: 15,\n      Cell: ({ row }) => {\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n        // to build the toggle for expanding a row\n        console.log('czseferuuuuuuu', row);\n\n        return row.canExpand ? (\n          <span\n            {...row.getToggleRowExpandedProps({\n              style: {\n                // We can even use the row.depth property\n                // and paddingLeft to indicate the depth\n                // of the row\n                paddingLeft: `${row.depth * 2}rem`,\n              },\n            })}>\n            {moment(row.original.start_date).format('YYYY/MM/DD')} -{' '}\n            {moment(row.original.end_date).format('YYYY/MM/DD') + '  '}\n            {row.isExpanded ? (\n              <i class=\"fa fa-angle-down expanded-icon-size\" aria-hidden=\"true\"></i>\n            ) : (\n              <i class=\"fa fa-angle-right expanded-icon-size\" aria-hidden=\"true\"></i>\n            )}\n          </span>\n        ) : null;\n      },\n    },\n    {\n      Header: 'Time Period',\n      accessor: 'time_period',\n      disableGroupBy: false,\n      isGroupBy: false,\n      width: 50,\n      // aggregate: 'uniqueCount',\n      Aggregated: ({ value, row }) => `weeks (${row.subRows.length})`,\n    },\n    //Inventory\n    {\n      Header: 'Sell through%',\n      accessor: 'sell_through_perc',\n      disableGroupBy: true,\n      width: 50,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'sum',\n      Aggregated: ({ value }) => `${value}`,\n    },\n    {\n      Header: 'Inventory On Hand',\n      accessor: 'ioh',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      aggregate: 'average',\n      Aggregated: ({ value }) => `${value}`,\n    },\n\n    //Margin\n    {\n      Header: 'Margin%',\n      accessor: 'margin_perc',\n      disableGroupBy: true,\n      width: 70,\n      Cell: (props) => <div> {toPercentage(props)} </div>,\n      // aggregate: 'average',\n      Aggregated: ({ value }) => `${value}`,\n    },\n  ];\n  return colDef;\n};\n"]},"metadata":{},"sourceType":"module"}