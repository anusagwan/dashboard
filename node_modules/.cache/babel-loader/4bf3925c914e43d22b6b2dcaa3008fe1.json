{"ast":null,"code":"import _classCallCheck from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/generic-markdown-frontend/src/components/autocomplete.js\";\nimport React, { Component, Fragment } from 'react';\nimport { asyncContainer, Typeahead } from 'react-bootstrap-typeahead';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport 'react-bootstrap-typeahead/css/Typeahead-bs4.css';\nimport '../App.css';\nimport { getChartData, getChartDataFilters } from '../actions/chart';\nvar AsyncTypeahead = asyncContainer(Typeahead);\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AutoComplete, _Component);\n\n  function AutoComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).call(this, props));\n\n    _this.keyPress = function (e) {\n      if (e.keyCode === 13) {\n        var query = e.target.value;\n\n        _this.props.showDataOnSelectedQuery(query);\n      }\n    };\n\n    _this.handleOnChange = function (e) {\n      _this.props.showDataOnSelectedQuery(e[0]);\n    };\n\n    _this.state = {\n      isLoading: false,\n      options: [],\n      disabled: false,\n      dropup: false,\n      flip: false,\n      highlightOnlyResult: false,\n      minLength: 1,\n      open: undefined,\n      selectHintOnEnter: false,\n      emptyLabel: ''\n    };\n    return _this;\n  } // _handleChange = (e) => {\n  //   const { checked, name } = e.target;\n  //   const newState = { [name]: checked };\n  //   switch (name) {\n  //     case 'minLength':\n  //       newState[name] = checked ? 2 : 0;\n  //       break;\n  //     case 'open':\n  //       newState[name] = checked ? true : undefined;\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   this.setState({newState,\n  //   });\n  // }\n\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questionArray = [\"Performance of promos\", \"Performance of dog and cat promos\", \"How are the dry grocery promos doing?\", \"Performance of promos having discount more than 40 %\", \"Performance of promos for pedigree brand\", \"Performance of promos of products having price more than 50 dollars\", \"Performance of red promos\", \"How is Houston doing?\", \"How is TX doing for bird products\", \"How many stores in CA\", \"Sales of dog and cat products\", \"Performance of promos for last 3 months\", \"How is the business doing?\", \"Quantity sold for pedigree in CA last quarter\", \"Average discount given last year\", \"Average lift percentage last year\", \"Average units per transaction for states\"];\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(AsyncTypeahead, Object.assign({\n        onSearch: function onSearch(query) {}\n      }, this.state, {\n        isLoading: this.state.isLoading,\n        options: questionArray,\n        placeholder: \"Ask me anything....\",\n        onChange: function onChange(e) {\n          return _this2.handleOnChange(e);\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _this2.keyPress(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AutoComplete;\n}(Component);\n\nAutoComplete.propTypes = {\n  chartData: PropTypes.func.isRequired,\n  chartDataFilters: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired,\n  success: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chartData: state.chartData,\n    chartDataFilters: state.chartDataFilters,\n    errors: state.errors,\n    success: state.success\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getChartData: getChartData,\n  getChartDataFilters: getChartDataFilters\n})(withRouter(AutoComplete));","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/components/autocomplete.js"],"names":["React","Component","Fragment","asyncContainer","Typeahead","connect","withRouter","PropTypes","getChartData","getChartDataFilters","AsyncTypeahead","AutoComplete","props","keyPress","e","keyCode","query","target","value","showDataOnSelectedQuery","handleOnChange","state","isLoading","options","disabled","dropup","flip","highlightOnlyResult","minLength","open","undefined","selectHintOnEnter","emptyLabel","questionArray","propTypes","chartData","func","isRequired","chartDataFilters","errors","object","success","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'; \nimport { asyncContainer, Typeahead } from 'react-bootstrap-typeahead';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport 'react-bootstrap-typeahead/css/Typeahead-bs4.css';\nimport '../App.css';\nimport { getChartData, getChartDataFilters } from '../actions/chart';\n\nconst AsyncTypeahead = asyncContainer(Typeahead);\n\n\nclass AutoComplete extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      options: [],\n      disabled: false,\n      dropup: false,\n      flip: false,\n      highlightOnlyResult: false,\n      minLength: 1,\n      open: undefined,\n      selectHintOnEnter: false,\n      emptyLabel:''\n    };\n  }\n  // _handleChange = (e) => {\n  //   const { checked, name } = e.target;\n  //   const newState = { [name]: checked };\n\n  //   switch (name) {\n  //     case 'minLength':\n  //       newState[name] = checked ? 2 : 0;\n  //       break;\n  //     case 'open':\n  //       newState[name] = checked ? true : undefined;\n  //       break;\n  //     default:\n  //       break;\n  //   }\n\n  //   this.setState({newState,\n  //   });\n  // }\n\n  keyPress = (e)=> {\n    if(e.keyCode === 13){\n       let query = e.target.value;\n       this.props.showDataOnSelectedQuery(query)\n    }\n }\n\n  handleOnChange = (e) => {\n    this.props.showDataOnSelectedQuery(e[0])\n  }\n\n\n  render() {\n    \n   \n    const questionArray = [\"Performance of promos\", \"Performance of dog and cat promos\", \"How are the dry grocery promos doing?\", \"Performance of promos having discount more than 40 %\", \"Performance of promos for pedigree brand\", \"Performance of promos of products having price more than 50 dollars\", \"Performance of red promos\", \"How is Houston doing?\", \"How is TX doing for bird products\", \"How many stores in CA\", \"Sales of dog and cat products\", \"Performance of promos for last 3 months\", \"How is the business doing?\", \"Quantity sold for pedigree in CA last quarter\", \"Average discount given last year\", \"Average lift percentage last year\", \"Average units per transaction for states\"]\n   \n    return (\n      <Fragment>     \n        <AsyncTypeahead\n         onSearch={query => {\n          \n        }}\n          {...this.state}\n          isLoading={this.state.isLoading}\n          options={questionArray} \n          placeholder=\"Ask me anything....\"\n          onChange={e => this.handleOnChange(e)}\n          onKeyDown={e => this.keyPress(e)}\n        />      \n      </Fragment>\n    );\n  }\n}\n\n\nAutoComplete.propTypes = {\n  chartData: PropTypes.func.isRequired,\n  chartDataFilters: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired,\n  success: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  chartData: state.chartData,\n  chartDataFilters: state.chartDataFilters,\n  errors: state.errors,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, { getChartData, getChartDataFilters })(withRouter(AutoComplete));"]},"metadata":{},"sourceType":"module"}