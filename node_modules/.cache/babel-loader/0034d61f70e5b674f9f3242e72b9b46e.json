{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../utils/config';\n\nvar fillMissingWeeks = function fillMissingWeeks(data, weeks) {\n  for (var i = weeks[0]; i <= weeks[weeks.length - 1]; i++) {\n    if (!data.sell_through.hasOwnProperty('W' + i)) {\n      data.sell_through['W' + i] = data.sell_through['W' + Number(i - 1)] ? data.sell_through['W' + Number(i - 1)] : {\n        ty: 0,\n        ly: 0\n      };\n    }\n\n    if (!data.margin.hasOwnProperty('W' + i)) {\n      data.margin['W' + i] = {\n        ty: 0,\n        ly: 0\n      };\n    }\n\n    if (!data.inventory.hasOwnProperty('W' + i)) {\n      data.inventory['W' + i] = {\n        ty: 0,\n        ly: 0\n      };\n    }\n  }\n\n  return data;\n};\n\nvar reportingActions = {\n  onReset: function onReset() {\n    return function (dispatch) {\n      dispatch({\n        type: 'RESET_REPORTING_DATA'\n      });\n    };\n  },\n  getReportingData: function getReportingData(req) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      axios({\n        url: \"\".concat(config.createMarkdownURL, \"/getReporting/\"),\n        method: 'POST',\n        data: req\n      }).then(function (resp) {\n        if (req.reportingType === 'week_level_aggregated_data') {\n          dispatch({\n            type: 'SET_REPORTING_DATA',\n            payload: resp.data.data && (Object.keys(resp.data.data.sell_through).length || Object.keys(resp.data.data.margin).length || Object.keys(resp.data.data.inventory).length || resp.data.data.sales.ty || resp.data.data.sales.ly) ? fillMissingWeeks(resp.data.data, req.week) : {\n              message: 'No data found. Please try with different filters.'\n            }\n          });\n          dispatch({\n            type: 'GET_SKU_COCKPIT',\n            payload: []\n          });\n        } else {\n          dispatch({\n            type: 'GET_SKU_COCKPIT',\n            payload: resp.data.data.length ? resp.data.data : {\n              message: 'No data found. Please try with different filters.'\n            }\n          });\n          dispatch({\n            type: 'GET_COLUMNHEADERS'\n          });\n        }\n\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      }).catch(function (err) {\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n      });\n    };\n  }\n};\nexport default reportingActions;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/actions/reportingActions.js"],"names":["axios","config","fillMissingWeeks","data","weeks","i","length","sell_through","hasOwnProperty","Number","ty","ly","margin","inventory","reportingActions","onReset","dispatch","type","getReportingData","req","payload","status","url","createMarkdownURL","method","then","resp","reportingType","Object","keys","sales","week","message","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { config } from '../utils/config';\nconst fillMissingWeeks = (data, weeks) => {\n  for (let i = weeks[0]; i <= weeks[weeks.length - 1]; i++) {\n    if (!data.sell_through.hasOwnProperty('W' + i)) {\n      data.sell_through['W' + i] = data.sell_through['W' + Number(i - 1)]\n        ? data.sell_through['W' + Number(i - 1)]\n        : { ty: 0, ly: 0 };\n    }\n    if (!data.margin.hasOwnProperty('W' + i)) {\n      data.margin['W' + i] = { ty: 0, ly: 0 };\n    }\n    if (!data.inventory.hasOwnProperty('W' + i)) {\n      data.inventory['W' + i] = { ty: 0, ly: 0 };\n    }\n  }\n  return data;\n};\nconst reportingActions = {\n  onReset: () => {\n    return (dispatch) => {\n      dispatch({\n        type: 'RESET_REPORTING_DATA',\n      });\n    };\n  },\n  getReportingData: (req) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      axios({\n        url: `${config.createMarkdownURL}/getReporting/`,\n        method: 'POST',\n        data: req,\n      })\n        .then((resp) => {\n          if (req.reportingType === 'week_level_aggregated_data') {\n            dispatch({\n              type: 'SET_REPORTING_DATA',\n              payload:\n                resp.data.data &&\n                (Object.keys(resp.data.data.sell_through).length ||\n                  Object.keys(resp.data.data.margin).length ||\n                  Object.keys(resp.data.data.inventory).length ||\n                  resp.data.data.sales.ty ||\n                  resp.data.data.sales.ly)\n                  ? fillMissingWeeks(resp.data.data, req.week)\n                  : { message: 'No data found. Please try with different filters.' },\n            });\n            dispatch({\n              type: 'GET_SKU_COCKPIT',\n              payload: [],\n            });\n          } else {\n            dispatch({\n              type: 'GET_SKU_COCKPIT',\n              payload: resp.data.data.length\n                ? resp.data.data\n                : { message: 'No data found. Please try with different filters.' },\n            });\n            dispatch({\n              type: 'GET_COLUMNHEADERS',\n            });\n          }\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n        });\n    };\n  },\n};\n\nexport default reportingActions;\n"]},"metadata":{},"sourceType":"module"}