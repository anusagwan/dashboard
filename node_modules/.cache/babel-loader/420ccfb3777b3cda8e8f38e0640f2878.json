{"ast":null,"code":"import _objectSpread from \"/home/user/generic-markdown-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  markdownAnalysisGraphData: [],\n  analysisTable: [],\n  // comparisonDataTemp: {\n  //   scenario: '',\n  //   sellthrough: '',\n  //   \"margin%\": '',\n  //   aur: '',\n  //   aum: '',\n  //   budgetUtilised: '',\n  //   leftOverInventory: '',\n  //   revenue: '',\n  //   margin$: '',\n  //   units: '',\n  // },\n  comparisonData: {},\n  analysisData: {}\n}; // const getComparsionTableData = (payload) => {\n// }\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA':\n      return _objectSpread({}, state, {\n        markdownAnalysisGraphData: action.payload\n      });\n\n    case 'SET_ANALYSIS_TABLE_DATA':\n      var obj = {};\n      action.payload.analysisTabledata.forEach(function (ob) {\n        obj[ob.style_id] = ob.style_desc;\n      });\n      obj.scenario = action.cadenceType;\n      var data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n      var analysisData = state.analysisData;\n\n      if (action.cadenceType !== 'Comparison') {\n        data[action.cadenceType] = obj;\n        analysisData[action.cadenceType] = action.data;\n      } // else {\n      //   data[action.cadenceType] = obj;\n      //   analysisData[action.cadenceType] = action.data;\n      // }\n\n\n      return _objectSpread({}, state, {\n        analysisTable: action.payload,\n        comparisonData: data,\n        analysisData: analysisData\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n}","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/reducers/markdownAnalysisReducer.js"],"names":["initialState","markdownAnalysisGraphData","analysisTable","comparisonData","analysisData","state","action","type","payload","obj","analysisTabledata","forEach","ob","style_id","style_desc","scenario","cadenceType","data"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,yBAAyB,EAAE,EADR;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,EAfG;AAgBnBC,EAAAA,YAAY,EAAE;AAhBK,CAArB,C,CAmBA;AAEA;;AAEA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iCAAL;AACE,+BACKF,KADL;AAEEJ,QAAAA,yBAAyB,EAAEK,MAAM,CAACE;AAFpC;;AAIF,SAAK,yBAAL;AACE,UAAIC,GAAG,GAAG,EAAV;AACAH,MAAAA,MAAM,CAACE,OAAP,CAAeE,iBAAf,CAAiCC,OAAjC,CAAyC,UAACC,EAAD,EAAQ;AAC/CH,QAAAA,GAAG,CAACG,EAAE,CAACC,QAAJ,CAAH,GAAmBD,EAAE,CAACE,UAAtB;AACD,OAFD;AAGAL,MAAAA,GAAG,CAACM,QAAJ,GAAeT,MAAM,CAACU,WAAtB;AACA,UAAIC,IAAI,GAAGX,MAAM,CAACU,WAAP,KAAuB,SAAvB,GAAmC,EAAnC,GAAwCX,KAAK,CAACF,cAAzD;AACA,UAAIC,YAAY,GAAGC,KAAK,CAACD,YAAzB;;AACA,UAAIE,MAAM,CAACU,WAAP,KAAuB,YAA3B,EAAyC;AACvCC,QAAAA,IAAI,CAACX,MAAM,CAACU,WAAR,CAAJ,GAA2BP,GAA3B;AACAL,QAAAA,YAAY,CAACE,MAAM,CAACU,WAAR,CAAZ,GAAmCV,MAAM,CAACW,IAA1C;AACD,OAXH,CAYE;AACA;AACA;AACA;;;AACA,+BACKZ,KADL;AAEEH,QAAAA,aAAa,EAAEI,MAAM,CAACE,OAFxB;AAGEL,QAAAA,cAAc,EAAEc,IAHlB;AAIEb,QAAAA,YAAY,EAAEA;AAJhB;;AAMF;AACE,+BACKC,KADL;AA7BJ;AAiCD","sourcesContent":["const initialState = {\n  markdownAnalysisGraphData: [],\n  analysisTable: [],\n  // comparisonDataTemp: {\n  //   scenario: '',\n  //   sellthrough: '',\n  //   \"margin%\": '',\n  //   aur: '',\n  //   aum: '',\n  //   budgetUtilised: '',\n  //   leftOverInventory: '',\n  //   revenue: '',\n  //   margin$: '',\n  //   units: '',\n  // },\n  comparisonData: {},\n  analysisData: {},\n};\n\n// const getComparsionTableData = (payload) => {\n\n// }\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'GET_MARKDOWNANALYSIS_GRAPH_DATA':\n      return {\n        ...state,\n        markdownAnalysisGraphData: action.payload,\n      };\n    case 'SET_ANALYSIS_TABLE_DATA':\n      let obj = {};\n      action.payload.analysisTabledata.forEach((ob) => {\n        obj[ob.style_id] = ob.style_desc;\n      });\n      obj.scenario = action.cadenceType;\n      let data = action.cadenceType === 'Optimal' ? [] : state.comparisonData;\n      let analysisData = state.analysisData;\n      if (action.cadenceType !== 'Comparison') {\n        data[action.cadenceType] = obj;\n        analysisData[action.cadenceType] = action.data;\n      }\n      // else {\n      //   data[action.cadenceType] = obj;\n      //   analysisData[action.cadenceType] = action.data;\n      // }\n      return {\n        ...state,\n        analysisTable: action.payload,\n        comparisonData: data,\n        analysisData: analysisData,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}