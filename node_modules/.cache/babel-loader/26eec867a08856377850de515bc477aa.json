{"ast":null,"code":"var _jsxFileName = \"/home/user/generic-markdown-frontend/src/services/download/index.js\";\nimport { ExportToCsv } from 'export-to-csv';\nimport React from 'react';\nimport 'tippy.js/dist/tippy.css';\nimport Tippy from '@tippy.js/react';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\nexport default function Download(_ref) {\n  var data = _ref.data,\n      data2 = _ref.data2,\n      xlsx = _ref.xlsx,\n      fileName = _ref.fileName,\n      data2Header = _ref.data2Header;\n\n  var downloadTable = function downloadTable() {\n    var options = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      filename: 'Comparison Table',\n      decimalSeparator: '.',\n      showLabels: true,\n      showTitle: true,\n      title: 'Markdown Percentages',\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n    };\n    var csvExporter = new ExportToCsv(options);\n    csvExporter.generateCsv(data);\n  };\n\n  var xlsxDownloadHandler = function xlsxDownloadHandler() {\n    var headers2 = _.map(data2Header, function (c, i) {\n      return c.Header === 'Scenario' ? 'scenario' : c.Header;\n    });\n\n    var wb = XLSX.utils.book_new();\n    var ws1 = XLSX.utils.json_to_sheet([], {\n      header: ['Markdown Percentages: ']\n    });\n    XLSX.utils.sheet_add_json(ws1, data, {\n      origin: 'A2'\n    });\n    var refNum = ws1['!ref'];\n    var endRowNum = parseInt(refNum.charAt(refNum.length - 1));\n    XLSX.utils.sheet_add_json(ws1, [], {\n      header: ['Comparison: '],\n      origin: \"A\".concat(endRowNum + 2)\n    });\n    XLSX.utils.sheet_add_json(ws1, Object.values(data2), {\n      header: headers2,\n      skipHeader: false,\n      origin: \"A\".concat(endRowNum + 3)\n    });\n    var wsrows = [{\n      hpx: 23\n    }, {\n      hpx: 23\n    }, {\n      hpx: 23\n    }];\n    wsrows[endRowNum] = {\n      hpx: 30\n    };\n    wsrows[endRowNum + 1] = {\n      hpx: 23\n    };\n    wsrows[endRowNum + 2] = {\n      hpx: 23\n    };\n    wsrows[endRowNum + 3] = {\n      hpx: 23\n    };\n    ws1['!rows'] = wsrows;\n    var merge = [{\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: 0,\n        c: 8\n      }\n    }, {\n      s: {\n        r: endRowNum,\n        c: 0\n      },\n      e: {\n        r: endRowNum,\n        c: 8\n      }\n    }, {\n      s: {\n        r: endRowNum + 1,\n        c: 0\n      },\n      e: {\n        r: endRowNum + 1,\n        c: 8\n      }\n    }];\n    ws1['!merges'] = merge;\n    XLSX.utils.book_append_sheet(wb, ws1, 'Data');\n    XLSX.writeFile(wb, \"\".concat(fileName, \".xlsx\"));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Tippy, {\n    style: {\n      cursor: 'pointer'\n    },\n    placement: 'left',\n    arrow: true,\n    distance: 10,\n    content: \"Comparison Table Download\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      if (xlsx) {\n        xlsxDownloadHandler();\n        return;\n      }\n\n      downloadTable();\n    },\n    className: \"btn btn-primary mr-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa fa-download\",\n    \"aria-hidden\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/services/download/index.js"],"names":["ExportToCsv","React","Tippy","XLSX","_","Download","data","data2","xlsx","fileName","data2Header","downloadTable","options","fieldSeparator","quoteStrings","filename","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","csvExporter","generateCsv","xlsxDownloadHandler","headers2","map","c","i","Header","wb","utils","book_new","ws1","json_to_sheet","header","sheet_add_json","origin","refNum","endRowNum","parseInt","charAt","length","Object","values","skipHeader","wsrows","hpx","merge","s","r","e","book_append_sheet","writeFile","cursor"],"mappings":"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","sourcesContent":["import { ExportToCsv } from 'export-to-csv';\nimport React from 'react';\nimport 'tippy.js/dist/tippy.css';\nimport Tippy from '@tippy.js/react';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\n\nexport default function Download({ data, data2, xlsx, fileName, data2Header }) {\n  const downloadTable = () => {\n    const options = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      filename: 'Comparison Table',\n      decimalSeparator: '.',\n      showLabels: true,\n      showTitle: true,\n      title: 'Markdown Percentages',\n      useTextFile: false,\n      useBom: true,\n      useKeysAsHeaders: true,\n      // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n    };\n\n    const csvExporter = new ExportToCsv(options);\n\n    csvExporter.generateCsv(data);\n  };\n\n  const xlsxDownloadHandler = () => {\n    let headers2 = _.map(data2Header, (c, i) => (c.Header === 'Scenario' ? 'scenario' : c.Header));\n    let wb = XLSX.utils.book_new();\n    let ws1 = XLSX.utils.json_to_sheet([], { header: ['Markdown Percentages: '] });\n\n    XLSX.utils.sheet_add_json(ws1, data, { origin: 'A2' });\n\n    let refNum = ws1['!ref'];\n    let endRowNum = parseInt(refNum.charAt(refNum.length - 1));\n    XLSX.utils.sheet_add_json(ws1, [], {\n      header: ['Comparison: '],\n      origin: `A${endRowNum + 2}`,\n    });\n\n    XLSX.utils.sheet_add_json(ws1, Object.values(data2), {\n      header: headers2,\n      skipHeader: false,\n      origin: `A${endRowNum + 3}`,\n    });\n\n    let wsrows = [{ hpx: 23 }, { hpx: 23 }, { hpx: 23 }];\n    wsrows[endRowNum] = { hpx: 30 };\n    wsrows[endRowNum + 1] = { hpx: 23 };\n    wsrows[endRowNum + 2] = { hpx: 23 };\n    wsrows[endRowNum + 3] = { hpx: 23 };\n\n    ws1['!rows'] = wsrows;\n\n    const merge = [\n      { s: { r: 0, c: 0 }, e: { r: 0, c: 8 } },\n      { s: { r: endRowNum, c: 0 }, e: { r: endRowNum, c: 8 } },\n      { s: { r: endRowNum + 1, c: 0 }, e: { r: endRowNum + 1, c: 8 } },\n    ];\n    ws1['!merges'] = merge;\n\n    XLSX.utils.book_append_sheet(wb, ws1, 'Data');\n\n    XLSX.writeFile(wb, `${fileName}.xlsx`);\n  };\n\n  return (\n    <div>\n      <Tippy\n        style={{ cursor: 'pointer' }}\n        placement={'left'}\n        arrow={true}\n        distance={10}\n        content=\"Comparison Table Download\">\n        <button\n          onClick={() => {\n            if (xlsx) {\n              xlsxDownloadHandler();\n              return;\n            }\n            downloadTable();\n          }}\n          className=\"btn btn-primary mr-3\">\n          <span>\n            <i className=\"fa fa-download\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </Tippy>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}