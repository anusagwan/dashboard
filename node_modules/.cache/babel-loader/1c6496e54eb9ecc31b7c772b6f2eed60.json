{"ast":null,"code":"import axios from '../utils/axios';\nimport { config } from '../utils/config';\nvar plannedReportsActions = {\n  onReset: function onReset() {\n    return function (dispatch) {\n      dispatch({\n        type: 'RESET_PLANNED_REPORTS_DATA'\n      });\n    };\n  },\n  fetchPlannedReports: function fetchPlannedReports(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true\n        }\n      });\n      return axios({\n        url: \"\".concat(config.createMarkdownURL, \"/getActualAndPlanned/\"),\n        method: 'POST',\n        data: reqObj\n      }).then(function (resp) {\n        console.log(resp.data.data, 'resp.data.data');\n        dispatch({\n          type: 'GET_PLANNED_REPORTS_DATA',\n          payload: resp.data.data && resp.data.data[1].length > 0 ? resp.data.data[1].map(function (d) {\n            return d.data;\n          }) : []\n        });\n        dispatch({\n          type: 'FISCAL_WEEK',\n          payload: resp.data && resp.data.data && resp.data.data[0]\n        });\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        return resp.data.data && resp.data.data[1].length > 0 ? resp.data.data[1].map(function (d) {\n          return d.data;\n        }) : [];\n      }).catch(function (err) {\n        dispatch({\n          type: 'GET_PLANNED_REPORTS_ERROR',\n          payload: err\n        });\n        dispatch({\n          type: 'LOADER_STATE',\n          payload: {\n            status: false\n          }\n        });\n        return [];\n      });\n    };\n  },\n  updateSidebar: function updateSidebar(reqObj) {\n    return function (dispatch) {\n      dispatch({\n        type: 'UPDATE_SIDEBAR',\n        payload: reqObj\n      });\n    };\n  }\n};\nexport default plannedReportsActions;","map":{"version":3,"sources":["/home/user/generic-markdown-frontend/src/actions/plannedReportsAction.js"],"names":["axios","config","plannedReportsActions","onReset","dispatch","type","fetchPlannedReports","reqObj","payload","status","url","createMarkdownURL","method","data","then","resp","console","log","length","map","d","catch","err","updateSidebar"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,IAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,mBAAM;AACb,WAAO,UAACC,QAAD,EAAc;AACnBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE;AADC,OAAD,CAAR;AAGD,KAJD;AAKD,GAP2B;AAQ5BC,EAAAA,mBAAmB,EAAE,6BAACC,MAAD,EAAY;AAC/B,WAAO,UAACH,QAAD,EAAc;AACnBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,cADC;AAEPG,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD;AAFF,OAAD,CAAR;AAMA,aAAOT,KAAK,CAAC;AACXU,QAAAA,GAAG,YAAKT,MAAM,CAACU,iBAAZ,0BADQ;AAEXC,QAAAA,MAAM,EAAE,MAFG;AAGXC,QAAAA,IAAI,EAAEN;AAHK,OAAD,CAAL,CAKJO,IALI,CAKC,UAACC,IAAD,EAAU;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACF,IAAL,CAAUA,IAAtB,EAA4B,gBAA5B;AACAT,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,0BADC;AAEPG,UAAAA,OAAO,EACLO,IAAI,CAACF,IAAL,CAAUA,IAAV,IAAkBE,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAe,CAAf,EAAkBK,MAAlB,GAA2B,CAA7C,GACIH,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAe,CAAf,EAAkBM,GAAlB,CAAsB,UAACC,CAAD;AAAA,mBAAOA,CAAC,CAACP,IAAT;AAAA,WAAtB,CADJ,GAEI;AALC,SAAD,CAAR;AAOAT,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,aADC;AAEPG,UAAAA,OAAO,EAAEO,IAAI,CAACF,IAAL,IAAaE,IAAI,CAACF,IAAL,CAAUA,IAAvB,IAA+BE,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAe,CAAf;AAFjC,SAAD,CAAR;AAIAT,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPG,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AADD;AAFF,SAAD,CAAR;AAMA,eAAOM,IAAI,CAACF,IAAL,CAAUA,IAAV,IAAkBE,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAe,CAAf,EAAkBK,MAAlB,GAA2B,CAA7C,GACHH,IAAI,CAACF,IAAL,CAAUA,IAAV,CAAe,CAAf,EAAkBM,GAAlB,CAAsB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACP,IAAT;AAAA,SAAtB,CADG,GAEH,EAFJ;AAGD,OA3BI,EA4BJQ,KA5BI,CA4BE,UAACC,GAAD,EAAS;AACdlB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,2BADC;AAEPG,UAAAA,OAAO,EAAEc;AAFF,SAAD,CAAR;AAIAlB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,cADC;AAEPG,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AADD;AAFF,SAAD,CAAR;AAMA,eAAO,EAAP;AACD,OAxCI,CAAP;AAyCD,KAhDD;AAiDD,GA1D2B;AA2D5Bc,EAAAA,aAAa,EAAE,uBAAChB,MAAD,EAAY;AACzB,WAAO,UAACH,QAAD,EAAc;AACnBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,gBADC;AAEPG,QAAAA,OAAO,EAAED;AAFF,OAAD,CAAR;AAID,KALD;AAMD;AAlE2B,CAA9B;AAqEA,eAAeL,qBAAf","sourcesContent":["import axios from '../utils/axios';\nimport { config } from '../utils/config';\n\nconst plannedReportsActions = {\n  onReset: () => {\n    return (dispatch) => {\n      dispatch({\n        type: 'RESET_PLANNED_REPORTS_DATA',\n      });\n    };\n  },\n  fetchPlannedReports: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'LOADER_STATE',\n        payload: {\n          status: true,\n        },\n      });\n      return axios({\n        url: `${config.createMarkdownURL}/getActualAndPlanned/`,\n        method: 'POST',\n        data: reqObj,\n      })\n        .then((resp) => {\n          console.log(resp.data.data, 'resp.data.data');\n          dispatch({\n            type: 'GET_PLANNED_REPORTS_DATA',\n            payload:\n              resp.data.data && resp.data.data[1].length > 0\n                ? resp.data.data[1].map((d) => d.data)\n                : [],\n          });\n          dispatch({\n            type: 'FISCAL_WEEK',\n            payload: resp.data && resp.data.data && resp.data.data[0],\n          });\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return resp.data.data && resp.data.data[1].length > 0\n            ? resp.data.data[1].map((d) => d.data)\n            : [];\n        })\n        .catch((err) => {\n          dispatch({\n            type: 'GET_PLANNED_REPORTS_ERROR',\n            payload: err,\n          });\n          dispatch({\n            type: 'LOADER_STATE',\n            payload: {\n              status: false,\n            },\n          });\n          return [];\n        });\n    };\n  },\n  updateSidebar: (reqObj) => {\n    return (dispatch) => {\n      dispatch({\n        type: 'UPDATE_SIDEBAR',\n        payload: reqObj,\n      });\n    };\n  },\n};\n\nexport default plannedReportsActions;\n"]},"metadata":{},"sourceType":"module"}