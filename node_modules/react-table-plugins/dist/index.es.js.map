{"version":3,"file":"index.es.js","sources":["../src/plguins/useExportData.js"],"sourcesContent":["import React from \"react\";\nimport { ensurePluginOrder } from \"react-table\";\n\n// Get exported file name(do not specify extension here)\nconst defaultGetExportFileName = ({ fileType, all }) => {\n  return `${all ? \"all-\" : \"\"}data`;\n};\n\n// To get column name while exporting\nconst defaultGetColumnExportValue = (col) => {\n  let name = col.Header;\n  if (typeof name === \"object\" || typeof name === \"function\") {\n    name = col.id;\n  }\n  return name;\n};\n\n// To get cell value while exporting\nconst defaultGetCellExportValue = (row, col) => {\n  return row.values[col.id];\n};\n\nconst defaultGetExportFileBlob = () => {\n  throw new Error(\"React Table: Export Blob is mandatory\");\n};\n\nexport const useExportData = (hooks) => {\n  hooks.useInstance.push(useInstance);\n};\n\nuseExportData.pluginName = \"useExportData\";\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    initialRows = [],\n    allColumns,\n    disableExport,\n    getExportFileName = defaultGetExportFileName,\n    getExportFileBlob = defaultGetExportFileBlob,\n    plugins,\n  } = instance;\n\n  ensurePluginOrder(\n    plugins,\n    [\"useColumnOrder\", \"useColumnVisibility\", \"useFilters\", \"useSortBy\"],\n    \"useExportData\"\n  );\n\n  // Adding `canExport` & `exportValue` meta data\n  allColumns.forEach((column) => {\n    const {\n      accessor,\n      getColumnExportValue = defaultGetColumnExportValue,\n    } = column;\n\n    const canExport = accessor\n      ? getFirstDefined(\n          column.disableExport === true ? false : undefined,\n          disableExport === true ? false : undefined,\n          true\n        )\n      : false;\n\n    column.canExport = canExport;\n    column.exportValue = getColumnExportValue(column);\n  });\n\n  // This method will enable export of data on `instance` object\n  const exportData = React.useCallback(\n    (fileType, all = false) => {\n      // Columns which are exportable\n      const exportableColumns = allColumns.filter(\n        (col) => col.canExport && (all || col.isVisible)\n      );\n\n      if (exportableColumns.length === 0) {\n        console.warn(\"No exportable columns are available\");\n      }\n\n      // Rows which are exportable\n      let exportableRows = (all ? initialRows : rows).map((row) => {\n        return exportableColumns.map((col) => {\n          const { getCellExportValue = defaultGetCellExportValue } = col;\n\n          return getCellExportValue(row, col);\n        });\n      });\n\n      // Getting fileName\n      const fileName = getExportFileName({ fileType, all });\n\n      // Get `FileBlob` to download\n      let fileBlob = getExportFileBlob({\n        columns: exportableColumns,\n        data: exportableRows,\n        fileName,\n        fileType,\n      });\n\n      // Trigger download in browser\n      if (fileBlob) {\n        downloadFileViaBlob(fileBlob, fileName, fileType);\n      }\n    },\n    [getExportFileBlob, getExportFileName, initialRows, rows, allColumns]\n  );\n\n  Object.assign(instance, {\n    exportData,\n  });\n}\n\nfunction downloadFileViaBlob(fileBlob, fileName, type) {\n  if (fileBlob) {\n    const dataUrl = URL.createObjectURL(fileBlob);\n    const link = document.createElement(\"a\");\n    link.download = `${fileName}.${type}`;\n    link.href = dataUrl;\n    link.click();\n  }\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== \"undefined\") {\n      return args[i];\n    }\n  }\n}\n"],"names":["defaultGetExportFileName","fileType","all","defaultGetColumnExportValue","col","name","Header","id","defaultGetCellExportValue","row","values","defaultGetExportFileBlob","Error","useExportData","hooks","useInstance","push","pluginName","instance","rows","initialRows","allColumns","disableExport","getExportFileName","getExportFileBlob","plugins","ensurePluginOrder","forEach","column","accessor","getColumnExportValue","canExport","getFirstDefined","undefined","exportValue","exportData","React","useCallback","exportableColumns","filter","isVisible","length","console","warn","exportableRows","map","getCellExportValue","fileName","fileBlob","columns","data","downloadFileViaBlob","Object","assign","type","dataUrl","URL","createObjectURL","link","document","createElement","download","href","click","args","i"],"mappings":"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"}